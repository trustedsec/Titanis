//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Titanis.Security.Spnego.Asn1.SPNEGOASNOneSpec
{
    using System;
    using System.Collections.Generic;
    using Titanis.Asn1;
    using Titanis.Asn1.Metadata;
    using Titanis.Asn1.Serialization;


    public class SPNEGOASNOneSpecModule
    {

        private static SPNEGOASNOneSpecModule _instance = new SPNEGOASNOneSpecModule();

        private SPNEGOASNOneSpecModule()
        {
        }

        public static SPNEGOASNOneSpecModule Instance
        {
            get
            {
                return _instance;
            }
        }
    }

    [System.FlagsAttribute()]
    public enum ReqFlags
    {

        delegFlag = 1,

        mutualFlag = 2,

        replayFlag = 4,

        sequenceFlag = 8,

        anonFlag = 16,

        confFlag = 32,

        integFlag = 64,
    }

    public class NegTokenInit : IAsn1DerEncodableTlv
    {

        public Titanis.Asn1.Asn1Oid[] mechTypes;

        public Nullable<ReqFlags> reqFlags;

        public byte[] mechToken;

        public byte[] mechListMIC;

        public virtual Asn1Tag Tag
        {
            get
            {
                return (new Asn1Tag(48));
            }
        }

        public virtual void DecodeTlv(Asn1DerDecoder decoder)
        {
            var end_struc_0 = decoder.DecodeTlvStart((new Asn1Tag(48)));
            this.DecodeValue(decoder);
            decoder.CloseTlv(end_struc_0);
        }

        public virtual void DecodeValue(Asn1DerDecoder decoder)
        {
            var end_mechTypes_1 = decoder.DecodeTlvStart((new Asn1Tag(160)));
            var end_mechTypes_2 = decoder.DecodeTlvStart((new Asn1Tag(48)));
            List<Titanis.Asn1.Asn1Oid> list_mechTypes_3 = new List<Titanis.Asn1.Asn1Oid>();
            for (
            ; (decoder.IsEndOfTuple == false);
            )
            {
                Titanis.Asn1.Asn1Oid item_mechTypes_3;
                var end_mechTypes_4 = decoder.DecodeTlvStart((new Asn1Tag(6)));
                item_mechTypes_3 = decoder.DecodeOid();
                decoder.CloseTlv(end_mechTypes_4);
                list_mechTypes_3.Add(item_mechTypes_3);
            }
            this.mechTypes = list_mechTypes_3.ToArray();
            decoder.CloseTlv(end_mechTypes_2);
            decoder.CloseTlv(end_mechTypes_1);
            if (decoder.CheckTag((new Asn1Tag(161))))
            {
                var end_reqFlags_1 = decoder.DecodeTlvStart((new Asn1Tag(161)));
                var end_reqFlags_2 = decoder.DecodeTlvStart((new Asn1Tag(3)));
                this.reqFlags = ((ReqFlags)(decoder.DecodeInt32()));
                decoder.CloseTlv(end_reqFlags_2);
                decoder.CloseTlv(end_reqFlags_1);
            }
            if (decoder.CheckTag((new Asn1Tag(162))))
            {
                var end_mechToken_1 = decoder.DecodeTlvStart((new Asn1Tag(162)));
                var end_mechToken_2 = decoder.DecodeTlvStart((new Asn1Tag(4)));
                this.mechToken = decoder.DecodeOctetString();
                decoder.CloseTlv(end_mechToken_2);
                decoder.CloseTlv(end_mechToken_1);
            }
            if (decoder.CheckTag((new Asn1Tag(163))))
            {
                var end_mechListMIC_1 = decoder.DecodeTlvStart((new Asn1Tag(163)));
                var end_mechListMIC_2 = decoder.DecodeTlvStart((new Asn1Tag(4)));
                this.mechListMIC = decoder.DecodeOctetString();
                decoder.CloseTlv(end_mechListMIC_2);
                decoder.CloseTlv(end_mechListMIC_1);
            }
        }

        public virtual bool TryDecodeTlv(Asn1DerDecoder decoder)
        {
            if (decoder.CheckTag((new Asn1Tag(48))))
            {
                this.DecodeTlv(decoder);
                return true;
            }
            else
            {
                return false;
            }
        }

        public virtual void EncodeValue(Asn1DerEncoder encoder)
        {
            if ((this.mechListMIC != null))
            {
                var end_mechListMIC_1 = encoder.Position;
                var end_mechListMIC_2 = encoder.Position;
                encoder.EncodeOctetString(this.mechListMIC);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(4)), end_mechListMIC_2);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(163)), end_mechListMIC_1);
            }
            if ((this.mechToken != null))
            {
                var end_mechToken_1 = encoder.Position;
                var end_mechToken_2 = encoder.Position;
                encoder.EncodeOctetString(this.mechToken);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(4)), end_mechToken_2);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(162)), end_mechToken_1);
            }
            if (this.reqFlags.HasValue)
            {
                var end_reqFlags_1 = encoder.Position;
                var end_reqFlags_2 = encoder.Position;
                encoder.EncodeCloseTlvHeader((new Asn1Tag(3)), end_reqFlags_2);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(161)), end_reqFlags_1);
            }
            var end_mechTypes_1 = encoder.Position;
            var end_mechTypes_2 = encoder.Position;
            if ((this.mechTypes != null))
            {
                for (int index_mechTypes_3 = (this.mechTypes.Length - 1); (index_mechTypes_3 >= 0); index_mechTypes_3 = (index_mechTypes_3 - 1))
                {
                    Titanis.Asn1.Asn1Oid item_mechTypes_3 = this.mechTypes[index_mechTypes_3];
                    var end_mechTypes_4 = encoder.Position;
                    encoder.EncodeOid(item_mechTypes_3);
                    encoder.EncodeCloseTlvHeader((new Asn1Tag(6)), end_mechTypes_4);
                }
            }
            encoder.EncodeCloseTlvHeader((new Asn1Tag(48)), end_mechTypes_2);
            encoder.EncodeCloseTlvHeader((new Asn1Tag(160)), end_mechTypes_1);
        }
    }

    public class NegTokenResp : IAsn1DerEncodableTlv
    {

        public Nullable<NegTokenResp_NegState_NegState> negState;

        public Nullable<Titanis.Asn1.Asn1Oid> supportedMech;

        public byte[] responseToken;

        public byte[] mechListMIC;

        public virtual Asn1Tag Tag
        {
            get
            {
                return (new Asn1Tag(48));
            }
        }

        public virtual void DecodeTlv(Asn1DerDecoder decoder)
        {
            var end_struc_0 = decoder.DecodeTlvStart((new Asn1Tag(48)));
            this.DecodeValue(decoder);
            decoder.CloseTlv(end_struc_0);
        }

        public virtual void DecodeValue(Asn1DerDecoder decoder)
        {
            if (decoder.CheckTag((new Asn1Tag(160))))
            {
                var end_negState_1 = decoder.DecodeTlvStart((new Asn1Tag(160)));
                var end_negState_2 = decoder.DecodeTlvStart((new Asn1Tag(10)));
                this.negState = ((NegTokenResp_NegState_NegState)(decoder.DecodeInt32()));
                decoder.CloseTlv(end_negState_2);
                decoder.CloseTlv(end_negState_1);
            }
            if (decoder.CheckTag((new Asn1Tag(161))))
            {
                var end_supportedMech_1 = decoder.DecodeTlvStart((new Asn1Tag(161)));
                var end_supportedMech_2 = decoder.DecodeTlvStart((new Asn1Tag(6)));
                this.supportedMech = decoder.DecodeOid();
                decoder.CloseTlv(end_supportedMech_2);
                decoder.CloseTlv(end_supportedMech_1);
            }
            if (decoder.CheckTag((new Asn1Tag(162))))
            {
                var end_responseToken_1 = decoder.DecodeTlvStart((new Asn1Tag(162)));
                var end_responseToken_2 = decoder.DecodeTlvStart((new Asn1Tag(4)));
                this.responseToken = decoder.DecodeOctetString();
                decoder.CloseTlv(end_responseToken_2);
                decoder.CloseTlv(end_responseToken_1);
            }
            if (decoder.CheckTag((new Asn1Tag(163))))
            {
                var end_mechListMIC_1 = decoder.DecodeTlvStart((new Asn1Tag(163)));
                var end_mechListMIC_2 = decoder.DecodeTlvStart((new Asn1Tag(4)));
                this.mechListMIC = decoder.DecodeOctetString();
                decoder.CloseTlv(end_mechListMIC_2);
                decoder.CloseTlv(end_mechListMIC_1);
            }
        }

        public virtual bool TryDecodeTlv(Asn1DerDecoder decoder)
        {
            if (decoder.CheckTag((new Asn1Tag(48))))
            {
                this.DecodeTlv(decoder);
                return true;
            }
            else
            {
                return false;
            }
        }

        public virtual void EncodeValue(Asn1DerEncoder encoder)
        {
            if ((this.mechListMIC != null))
            {
                var end_mechListMIC_1 = encoder.Position;
                var end_mechListMIC_2 = encoder.Position;
                encoder.EncodeOctetString(this.mechListMIC);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(4)), end_mechListMIC_2);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(163)), end_mechListMIC_1);
            }
            if ((this.responseToken != null))
            {
                var end_responseToken_1 = encoder.Position;
                var end_responseToken_2 = encoder.Position;
                encoder.EncodeOctetString(this.responseToken);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(4)), end_responseToken_2);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(162)), end_responseToken_1);
            }
            if (this.supportedMech.HasValue)
            {
                var end_supportedMech_1 = encoder.Position;
                var end_supportedMech_2 = encoder.Position;
                encoder.EncodeOid(this.supportedMech.Value);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(6)), end_supportedMech_2);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(161)), end_supportedMech_1);
            }
            if (this.negState.HasValue)
            {
                var end_negState_1 = encoder.Position;
                var end_negState_2 = encoder.Position;
                encoder.EncodeInt32(((int)(this.negState.Value)));
                encoder.EncodeCloseTlvHeader((new Asn1Tag(10)), end_negState_2);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(160)), end_negState_1);
            }
        }
    }

    public enum NegTokenResp_NegState_NegState
    {

        accept_completed = 0,

        accept_incomplete = 1,

        reject = 2,

        request_mic = 3,
    }

    public class NegotiationToken : IAsn1DerEncodableTlv
    {

        public NegTokenInit _negTokenInit;

        public NegTokenResp _negTokenResp;

        private int _choiceIndex;

        public NegotiationToken()
        {
        }

        public NegotiationToken(NegTokenInit _negTokenInit)
        {
            this._negTokenInit = _negTokenInit;
            this._choiceIndex = 1;
        }

        public NegotiationToken(NegTokenResp _negTokenResp)
        {
            this._negTokenResp = _negTokenResp;
            this._choiceIndex = 2;
        }

        public virtual NegTokenInit negTokenInit
        {
            get
            {
                return this._negTokenInit;
            }
            set
            {
                this._negTokenInit = value;
                this._choiceIndex = 1;
            }
        }

        public virtual NegTokenResp negTokenResp
        {
            get
            {
                return this._negTokenResp;
            }
            set
            {
                this._negTokenResp = value;
                this._choiceIndex = 2;
            }
        }

        public virtual Asn1Tag Tag
        {
            get
            {
                if ((this._choiceIndex == 1))
                {
                    return (new Asn1Tag(160));
                }
                else
                {
                    if ((this._choiceIndex == 2))
                    {
                        return (new Asn1Tag(161));
                    }
                    else
                    {
                        return (new Asn1Tag());
                    }
                }
            }
        }

        public virtual int ChoiceIndex
        {
            get
            {
                return this._choiceIndex;
            }
            set
            {
                this._choiceIndex = value;
            }
        }

        public virtual void DecodeTlv(Asn1DerDecoder decoder)
        {
            this.TryDecodeTlv(decoder);
        }

        public virtual void DecodeValue(Asn1DerDecoder decoder)
        {
            throw new System.NotImplementedException();
        }

        public virtual bool TryDecodeTlv(Asn1DerDecoder decoder)
        {
            if (decoder.CheckTag((new Asn1Tag(160))))
            {
                var end__negTokenInit_1 = decoder.DecodeTlvStart((new Asn1Tag(160)));
                var end__negTokenInit_2 = decoder.DecodeTlvStart((new Asn1Tag(48)));
                this._negTokenInit = new NegTokenInit();
                this._negTokenInit.DecodeValue(decoder);
                decoder.CloseTlv(end__negTokenInit_2);
                decoder.CloseTlv(end__negTokenInit_1);
                this._choiceIndex = 1;
                return true;
            }
            else
            {
                if (decoder.CheckTag((new Asn1Tag(161))))
                {
                    var end__negTokenResp_1 = decoder.DecodeTlvStart((new Asn1Tag(161)));
                    var end__negTokenResp_2 = decoder.DecodeTlvStart((new Asn1Tag(48)));
                    this._negTokenResp = new NegTokenResp();
                    this._negTokenResp.DecodeValue(decoder);
                    decoder.CloseTlv(end__negTokenResp_2);
                    decoder.CloseTlv(end__negTokenResp_1);
                    this._choiceIndex = 2;
                    return true;
                }
            }
            return false;
        }

        public virtual void EncodeValue(Asn1DerEncoder encoder)
        {
            if ((this._choiceIndex == 1))
            {
                var end__negTokenInit_2 = encoder.Position;
                this._negTokenInit.EncodeValue(encoder);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(48)), end__negTokenInit_2);
            }
            else
            {
                if ((this._choiceIndex == 2))
                {
                    var end__negTokenResp_2 = encoder.Position;
                    this._negTokenResp.EncodeValue(encoder);
                    encoder.EncodeCloseTlvHeader((new Asn1Tag(48)), end__negTokenResp_2);
                }
            }
        }
    }

    public class NegHints : IAsn1DerEncodableTlv
    {

        public Nullable<Titanis.Asn1.GeneralString> hintName;

        public byte[] hintAddress;

        public virtual Asn1Tag Tag
        {
            get
            {
                return (new Asn1Tag(48));
            }
        }

        public virtual void DecodeTlv(Asn1DerDecoder decoder)
        {
            var end_struc_0 = decoder.DecodeTlvStart((new Asn1Tag(48)));
            this.DecodeValue(decoder);
            decoder.CloseTlv(end_struc_0);
        }

        public virtual void DecodeValue(Asn1DerDecoder decoder)
        {
            if (decoder.CheckTag((new Asn1Tag(160))))
            {
                var end_hintName_1 = decoder.DecodeTlvStart((new Asn1Tag(160)));
                var end_hintName_2 = decoder.DecodeTlvStart((new Asn1Tag(27)));
                this.hintName = decoder.DecodeString<GeneralString>();
                decoder.CloseTlv(end_hintName_2);
                decoder.CloseTlv(end_hintName_1);
            }
            if (decoder.CheckTag((new Asn1Tag(161))))
            {
                var end_hintAddress_1 = decoder.DecodeTlvStart((new Asn1Tag(161)));
                var end_hintAddress_2 = decoder.DecodeTlvStart((new Asn1Tag(4)));
                this.hintAddress = decoder.DecodeOctetString();
                decoder.CloseTlv(end_hintAddress_2);
                decoder.CloseTlv(end_hintAddress_1);
            }
        }

        public virtual bool TryDecodeTlv(Asn1DerDecoder decoder)
        {
            if (decoder.CheckTag((new Asn1Tag(48))))
            {
                this.DecodeTlv(decoder);
                return true;
            }
            else
            {
                return false;
            }
        }

        public virtual void EncodeValue(Asn1DerEncoder encoder)
        {
            if ((this.hintAddress != null))
            {
                var end_hintAddress_1 = encoder.Position;
                var end_hintAddress_2 = encoder.Position;
                encoder.EncodeOctetString(this.hintAddress);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(4)), end_hintAddress_2);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(161)), end_hintAddress_1);
            }
            if (this.hintName.HasValue)
            {
                var end_hintName_1 = encoder.Position;
                var end_hintName_2 = encoder.Position;
                encoder.EncodeString(this.hintName.Value);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(27)), end_hintName_2);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(160)), end_hintName_1);
            }
        }
    }

    public class NegTokenInit2 : IAsn1DerEncodableTlv
    {

        public Titanis.Asn1.Asn1Oid[] mechTypes;

        public Nullable<ReqFlags> reqFlags;

        public byte[] mechToken;

        public NegHints negHints;

        public byte[] mechListMIC;

        public virtual Asn1Tag Tag
        {
            get
            {
                return (new Asn1Tag(48));
            }
        }

        public virtual void DecodeTlv(Asn1DerDecoder decoder)
        {
            var end_struc_0 = decoder.DecodeTlvStart((new Asn1Tag(48)));
            this.DecodeValue(decoder);
            decoder.CloseTlv(end_struc_0);
        }

        public virtual void DecodeValue(Asn1DerDecoder decoder)
        {
            if (decoder.CheckTag((new Asn1Tag(160))))
            {
                var end_mechTypes_1 = decoder.DecodeTlvStart((new Asn1Tag(160)));
                var end_mechTypes_2 = decoder.DecodeTlvStart((new Asn1Tag(48)));
                List<Titanis.Asn1.Asn1Oid> list_mechTypes_3 = new List<Titanis.Asn1.Asn1Oid>();
                for (
                ; (decoder.IsEndOfTuple == false);
                )
                {
                    Titanis.Asn1.Asn1Oid item_mechTypes_3;
                    var end_mechTypes_4 = decoder.DecodeTlvStart((new Asn1Tag(6)));
                    item_mechTypes_3 = decoder.DecodeOid();
                    decoder.CloseTlv(end_mechTypes_4);
                    list_mechTypes_3.Add(item_mechTypes_3);
                }
                this.mechTypes = list_mechTypes_3.ToArray();
                decoder.CloseTlv(end_mechTypes_2);
                decoder.CloseTlv(end_mechTypes_1);
            }
            if (decoder.CheckTag((new Asn1Tag(161))))
            {
                var end_reqFlags_1 = decoder.DecodeTlvStart((new Asn1Tag(161)));
                var end_reqFlags_2 = decoder.DecodeTlvStart((new Asn1Tag(3)));
                this.reqFlags = ((ReqFlags)(decoder.DecodeInt32()));
                decoder.CloseTlv(end_reqFlags_2);
                decoder.CloseTlv(end_reqFlags_1);
            }
            if (decoder.CheckTag((new Asn1Tag(162))))
            {
                var end_mechToken_1 = decoder.DecodeTlvStart((new Asn1Tag(162)));
                var end_mechToken_2 = decoder.DecodeTlvStart((new Asn1Tag(4)));
                this.mechToken = decoder.DecodeOctetString();
                decoder.CloseTlv(end_mechToken_2);
                decoder.CloseTlv(end_mechToken_1);
            }
            if (decoder.CheckTag((new Asn1Tag(163))))
            {
                var end_negHints_1 = decoder.DecodeTlvStart((new Asn1Tag(163)));
                var end_negHints_2 = decoder.DecodeTlvStart((new Asn1Tag(48)));
                this.negHints = new NegHints();
                this.negHints.DecodeValue(decoder);
                decoder.CloseTlv(end_negHints_2);
                decoder.CloseTlv(end_negHints_1);
            }
            if (decoder.CheckTag((new Asn1Tag(164))))
            {
                var end_mechListMIC_1 = decoder.DecodeTlvStart((new Asn1Tag(164)));
                var end_mechListMIC_2 = decoder.DecodeTlvStart((new Asn1Tag(4)));
                this.mechListMIC = decoder.DecodeOctetString();
                decoder.CloseTlv(end_mechListMIC_2);
                decoder.CloseTlv(end_mechListMIC_1);
            }
        }

        public virtual bool TryDecodeTlv(Asn1DerDecoder decoder)
        {
            if (decoder.CheckTag((new Asn1Tag(48))))
            {
                this.DecodeTlv(decoder);
                return true;
            }
            else
            {
                return false;
            }
        }

        public virtual void EncodeValue(Asn1DerEncoder encoder)
        {
            if ((this.mechListMIC != null))
            {
                var end_mechListMIC_1 = encoder.Position;
                var end_mechListMIC_2 = encoder.Position;
                encoder.EncodeOctetString(this.mechListMIC);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(4)), end_mechListMIC_2);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(164)), end_mechListMIC_1);
            }
            if ((this.negHints != null))
            {
                var end_negHints_1 = encoder.Position;
                var end_negHints_2 = encoder.Position;
                this.negHints.EncodeValue(encoder);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(48)), end_negHints_2);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(163)), end_negHints_1);
            }
            if ((this.mechToken != null))
            {
                var end_mechToken_1 = encoder.Position;
                var end_mechToken_2 = encoder.Position;
                encoder.EncodeOctetString(this.mechToken);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(4)), end_mechToken_2);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(162)), end_mechToken_1);
            }
            if (this.reqFlags.HasValue)
            {
                var end_reqFlags_1 = encoder.Position;
                var end_reqFlags_2 = encoder.Position;
                encoder.EncodeCloseTlvHeader((new Asn1Tag(3)), end_reqFlags_2);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(161)), end_reqFlags_1);
            }
            if ((this.mechTypes != null))
            {
                var end_mechTypes_1 = encoder.Position;
                var end_mechTypes_2 = encoder.Position;
                if ((this.mechTypes != null))
                {
                    for (int index_mechTypes_3 = (this.mechTypes.Length - 1); (index_mechTypes_3 >= 0); index_mechTypes_3 = (index_mechTypes_3 - 1))
                    {
                        Titanis.Asn1.Asn1Oid item_mechTypes_3 = this.mechTypes[index_mechTypes_3];
                        var end_mechTypes_4 = encoder.Position;
                        encoder.EncodeOid(item_mechTypes_3);
                        encoder.EncodeCloseTlvHeader((new Asn1Tag(6)), end_mechTypes_4);
                    }
                }
                encoder.EncodeCloseTlvHeader((new Asn1Tag(48)), end_mechTypes_2);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(160)), end_mechTypes_1);
            }
        }
    }

    public class NegotiationToken2 : IAsn1DerEncodableTlv
    {

        public NegTokenInit2 _negTokenInit2;

        public NegTokenResp _negTokenResp;

        private int _choiceIndex;

        public NegotiationToken2()
        {
        }

        public NegotiationToken2(NegTokenInit2 _negTokenInit2)
        {
            this._negTokenInit2 = _negTokenInit2;
            this._choiceIndex = 1;
        }

        public NegotiationToken2(NegTokenResp _negTokenResp)
        {
            this._negTokenResp = _negTokenResp;
            this._choiceIndex = 2;
        }

        public virtual NegTokenInit2 negTokenInit2
        {
            get
            {
                return this._negTokenInit2;
            }
            set
            {
                this._negTokenInit2 = value;
                this._choiceIndex = 1;
            }
        }

        public virtual NegTokenResp negTokenResp
        {
            get
            {
                return this._negTokenResp;
            }
            set
            {
                this._negTokenResp = value;
                this._choiceIndex = 2;
            }
        }

        public virtual Asn1Tag Tag
        {
            get
            {
                if ((this._choiceIndex == 1))
                {
                    return (new Asn1Tag(160));
                }
                else
                {
                    if ((this._choiceIndex == 2))
                    {
                        return (new Asn1Tag(161));
                    }
                    else
                    {
                        return (new Asn1Tag());
                    }
                }
            }
        }

        public virtual int ChoiceIndex
        {
            get
            {
                return this._choiceIndex;
            }
            set
            {
                this._choiceIndex = value;
            }
        }

        public virtual void DecodeTlv(Asn1DerDecoder decoder)
        {
            this.TryDecodeTlv(decoder);
        }

        public virtual void DecodeValue(Asn1DerDecoder decoder)
        {
            throw new System.NotImplementedException();
        }

        public virtual bool TryDecodeTlv(Asn1DerDecoder decoder)
        {
            if (decoder.CheckTag((new Asn1Tag(160))))
            {
                var end__negTokenInit2_1 = decoder.DecodeTlvStart((new Asn1Tag(160)));
                var end__negTokenInit2_2 = decoder.DecodeTlvStart((new Asn1Tag(48)));
                this._negTokenInit2 = new NegTokenInit2();
                this._negTokenInit2.DecodeValue(decoder);
                decoder.CloseTlv(end__negTokenInit2_2);
                decoder.CloseTlv(end__negTokenInit2_1);
                this._choiceIndex = 1;
                return true;
            }
            else
            {
                if (decoder.CheckTag((new Asn1Tag(161))))
                {
                    var end__negTokenResp_1 = decoder.DecodeTlvStart((new Asn1Tag(161)));
                    var end__negTokenResp_2 = decoder.DecodeTlvStart((new Asn1Tag(48)));
                    this._negTokenResp = new NegTokenResp();
                    this._negTokenResp.DecodeValue(decoder);
                    decoder.CloseTlv(end__negTokenResp_2);
                    decoder.CloseTlv(end__negTokenResp_1);
                    this._choiceIndex = 2;
                    return true;
                }
            }
            return false;
        }

        public virtual void EncodeValue(Asn1DerEncoder encoder)
        {
            if ((this._choiceIndex == 1))
            {
                var end__negTokenInit2_2 = encoder.Position;
                this._negTokenInit2.EncodeValue(encoder);
                encoder.EncodeCloseTlvHeader((new Asn1Tag(48)), end__negTokenInit2_2);
            }
            else
            {
                if ((this._choiceIndex == 2))
                {
                    var end__negTokenResp_2 = encoder.Position;
                    this._negTokenResp.EncodeValue(encoder);
                    encoder.EncodeCloseTlvHeader((new Asn1Tag(48)), end__negTokenResp_2);
                }
            }
        }
    }
}
