//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Titanis.Security.Ntlm {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Messages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Messages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Titanis.Security.Ntlm.Messages", typeof(Messages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server does not support 128-bit encryption, which was requested by the client..
        /// </summary>
        internal static string Ntlm_128BitEncryptionNotSupported {
            get {
                return ResourceManager.GetString("Ntlm_128BitEncryptionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requested features are unsupported with anonymous authentication..
        /// </summary>
        internal static string Ntlm_AnonFeaturesUnsupported {
            get {
                return ResourceManager.GetString("Ntlm_AnonFeaturesUnsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message failed the integrity check.  This could indicate that the message was tampered with in transit..
        /// </summary>
        internal static string Ntlm_BadMessageSignature {
            get {
                return ResourceManager.GetString("Ntlm_BadMessageSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The negotiated authentication does not provide the minimum specified encryption..
        /// </summary>
        internal static string Ntlm_InsufficientEncryption {
            get {
                return ResourceManager.GetString("Ntlm_InsufficientEncryption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer does not contain a valid NTLM message..
        /// </summary>
        internal static string Ntlm_InvalidMessage {
            get {
                return ResourceManager.GetString("Ntlm_InvalidMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SingleHostData structure is invalid..
        /// </summary>
        internal static string Ntlm_InvalidSingleHostData {
            get {
                return ResourceManager.GetString("Ntlm_InvalidSingleHostData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requested features are unsupported with LM authentication..
        /// </summary>
        internal static string Ntlm_LMAuthFeaturesUnsupported {
            get {
                return ResourceManager.GetString("Ntlm_LMAuthFeaturesUnsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Since the provided credential only provides the LM hash, the negotiate flags must specify either LMKey or NonNTSessionKey..
        /// </summary>
        internal static string Ntlm_LMAuthRequiresLMKey {
            get {
                return ResourceManager.GetString("Ntlm_LMAuthRequiresLMKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided MAC buffer was not large enough.  It must be at least 16 bytes in size..
        /// </summary>
        internal static string Ntlm_MacBufferTooSmall {
            get {
                return ResourceManager.GetString("Ntlm_MacBufferTooSmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The negotiate flags does no indicate either of the Unicode or OEM character sets..
        /// </summary>
        internal static string Ntlm_NoCharset {
            get {
                return ResourceManager.GetString("Ntlm_NoCharset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server did not return a computer name and domain, which is required for integrity and confidentiality..
        /// </summary>
        internal static string Ntlm_NoComputerNameOrDomain {
            get {
                return ResourceManager.GetString("Ntlm_NoComputerNameOrDomain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied credential does not provide either the LM hash or the NTLM hash.  It must provide one or the other.  For anonymous authentication, don&apos;t provide a credential..
        /// </summary>
        internal static string Ntlm_NoCredHash {
            get {
                return ResourceManager.GetString("Ntlm_NoCredHash", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The credential must be able to generate the NTKey..
        /// </summary>
        internal static string Ntlm_NTKeySupportRequired {
            get {
                return ResourceManager.GetString("Ntlm_NTKeySupportRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NTLM signature is invalid..
        /// </summary>
        internal static string Ntlm_NtlmSignatureInvalid {
            get {
                return ResourceManager.GetString("Ntlm_NtlmSignatureInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of NTLMv2 requires an NTLM hash, but the provided credential does not provide the NTLM hash..
        /// </summary>
        internal static string Ntlm_NtlmV2RequiresNTHash {
            get {
                return ResourceManager.GetString("Ntlm_NtlmV2RequiresNTHash", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided seal buffer was not large enough.  It must be at least the size of the message..
        /// </summary>
        internal static string Ntlm_SealBufferTooSmall {
            get {
                return ResourceManager.GetString("Ntlm_SealBufferTooSmall", resourceCulture);
            }
        }
    }
}
