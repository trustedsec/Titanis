//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Titanis.Winterop {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class NtstatusMessageTable {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal NtstatusMessageTable() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Titanis.Winterop.NtstatusMessageTable", typeof(NtstatusMessageTable).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The debugger found that the application is not idle. (code=0xC0010002).
        /// </summary>
        internal static string DBG_APP_NOT_IDLE {
            get {
                return ResourceManager.GetString("DBG_APP_NOT_IDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugger command communication exception. (code=0x40010009).
        /// </summary>
        internal static string DBG_COMMAND_EXCEPTION {
            get {
                return ResourceManager.GetString("DBG_COMMAND_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The debugger continued. (code=0x00010002).
        /// </summary>
        internal static string DBG_CONTINUE {
            get {
                return ResourceManager.GetString("DBG_CONTINUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugger received a control break. (code=0x40010008).
        /// </summary>
        internal static string DBG_CONTROL_BREAK {
            get {
                return ResourceManager.GetString("DBG_CONTROL_BREAK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugger obtained control of C. (code=0x40010005).
        /// </summary>
        internal static string DBG_CONTROL_C {
            get {
                return ResourceManager.GetString("DBG_CONTROL_C", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugger handled the exception. (code=0x00010001).
        /// </summary>
        internal static string DBG_EXCEPTION_HANDLED {
            get {
                return ResourceManager.GetString("DBG_EXCEPTION_HANDLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugger did not handle the exception. (code=0x80010001).
        /// </summary>
        internal static string DBG_EXCEPTION_NOT_HANDLED {
            get {
                return ResourceManager.GetString("DBG_EXCEPTION_NOT_HANDLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The debugger did not perform a state change. (code=0xC0010001).
        /// </summary>
        internal static string DBG_NO_STATE_CHANGE {
            get {
                return ResourceManager.GetString("DBG_NO_STATE_CHANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugger printed an exception on control C. (code=0x40010006).
        /// </summary>
        internal static string DBG_PRINTEXCEPTION_C {
            get {
                return ResourceManager.GetString("DBG_PRINTEXCEPTION_C", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugger will reply later. (code=0x40010001).
        /// </summary>
        internal static string DBG_REPLY_LATER {
            get {
                return ResourceManager.GetString("DBG_REPLY_LATER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugger received a RIP exception. (code=0x40010007).
        /// </summary>
        internal static string DBG_RIPEXCEPTION {
            get {
                return ResourceManager.GetString("DBG_RIPEXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugger terminated the process. (code=0x40010004).
        /// </summary>
        internal static string DBG_TERMINATE_PROCESS {
            get {
                return ResourceManager.GetString("DBG_TERMINATE_PROCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugger terminated the thread. (code=0x40010003).
        /// </summary>
        internal static string DBG_TERMINATE_THREAD {
            get {
                return ResourceManager.GetString("DBG_TERMINATE_THREAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugger cannot provide a handle. (code=0x40010002).
        /// </summary>
        internal static string DBG_UNABLE_TO_PROVIDE_HANDLE {
            get {
                return ResourceManager.GetString("DBG_UNABLE_TO_PROVIDE_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint mapper database entry could not be created. (code=0xC002004C).
        /// </summary>
        internal static string EPT_NT_CANT_CREATE {
            get {
                return ResourceManager.GetString("EPT_NT_CANT_CREATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be performed. (code=0xC0020035).
        /// </summary>
        internal static string EPT_NT_CANT_PERFORM_OP {
            get {
                return ResourceManager.GetString("EPT_NT_CANT_PERFORM_OP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entry is invalid. (code=0xC0020034).
        /// </summary>
        internal static string EPT_NT_INVALID_ENTRY {
            get {
                return ResourceManager.GetString("EPT_NT_INVALID_ENTRY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No more endpoints are available from the endpoint mapper. (code=0xC0020036).
        /// </summary>
        internal static string EPT_NT_NOT_REGISTERED {
            get {
                return ResourceManager.GetString("EPT_NT_NOT_REGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An addressing error occurred in the RPC server. (code=0xC0020045).
        /// </summary>
        internal static string RPC_NT_ADDRESS_ERROR {
            get {
                return ResourceManager.GetString("RPC_NT_ADDRESS_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC server is already listening. (code=0xC002000E).
        /// </summary>
        internal static string RPC_NT_ALREADY_LISTENING {
            get {
                return ResourceManager.GetString("RPC_NT_ALREADY_LISTENING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object UUID has already been registered. (code=0xC002000C).
        /// </summary>
        internal static string RPC_NT_ALREADY_REGISTERED {
            get {
                return ResourceManager.GetString("RPC_NT_ALREADY_REGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stub received bad data. (code=0xC003000C).
        /// </summary>
        internal static string RPC_NT_BAD_STUB_DATA {
            get {
                return ResourceManager.GetString("RPC_NT_BAD_STUB_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding does not contain any authentication information. (code=0xC002002F).
        /// </summary>
        internal static string RPC_NT_BINDING_HAS_NO_AUTH {
            get {
                return ResourceManager.GetString("RPC_NT_BINDING_HAS_NO_AUTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding handle does not contain all the required information. (code=0xC0020051).
        /// </summary>
        internal static string RPC_NT_BINDING_INCOMPLETE {
            get {
                return ResourceManager.GetString("RPC_NT_BINDING_INCOMPLETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The byte count is too small. (code=0xC003000B).
        /// </summary>
        internal static string RPC_NT_BYTE_COUNT_TOO_SMALL {
            get {
                return ResourceManager.GetString("RPC_NT_BYTE_COUNT_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC was canceled. (code=0xC0020050).
        /// </summary>
        internal static string RPC_NT_CALL_CANCELLED {
            get {
                return ResourceManager.GetString("RPC_NT_CALL_CANCELLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC failed. (code=0xC002001B).
        /// </summary>
        internal static string RPC_NT_CALL_FAILED {
            get {
                return ResourceManager.GetString("RPC_NT_CALL_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC failed and did not execute. (code=0xC002001C).
        /// </summary>
        internal static string RPC_NT_CALL_FAILED_DNE {
            get {
                return ResourceManager.GetString("RPC_NT_CALL_FAILED_DNE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An RPC is already in progress for this thread. (code=0xC0020049).
        /// </summary>
        internal static string RPC_NT_CALL_IN_PROGRESS {
            get {
                return ResourceManager.GetString("RPC_NT_CALL_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation is not supported. (code=0xC0020041).
        /// </summary>
        internal static string RPC_NT_CANNOT_SUPPORT {
            get {
                return ResourceManager.GetString("RPC_NT_CANNOT_SUPPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint cannot be created. (code=0xC0020015).
        /// </summary>
        internal static string RPC_NT_CANT_CREATE_ENDPOINT {
            get {
                return ResourceManager.GetString("RPC_NT_CANT_CREATE_ENDPOINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A communications failure occurred during an RPC. (code=0xC0020052).
        /// </summary>
        internal static string RPC_NT_COMM_FAILURE {
            get {
                return ResourceManager.GetString("RPC_NT_COMM_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint is a duplicate. (code=0xC0020029).
        /// </summary>
        internal static string RPC_NT_DUPLICATE_ENDPOINT {
            get {
                return ResourceManager.GetString("RPC_NT_DUPLICATE_ENDPOINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entry already exists. (code=0xC002003D).
        /// </summary>
        internal static string RPC_NT_ENTRY_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("RPC_NT_ENTRY_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entry was not found. (code=0xC002003E).
        /// </summary>
        internal static string RPC_NT_ENTRY_NOT_FOUND {
            get {
                return ResourceManager.GetString("RPC_NT_ENTRY_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The enumeration value is out of range. (code=0xC003000A).
        /// </summary>
        internal static string RPC_NT_ENUM_VALUE_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("RPC_NT_ENUM_VALUE_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A floating point operation at the RPC server caused a divide by zero. (code=0xC0020046).
        /// </summary>
        internal static string RPC_NT_FP_DIV_ZERO {
            get {
                return ResourceManager.GetString("RPC_NT_FP_DIV_ZERO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A floating point overflow occurred at the RPC server. (code=0xC0020048).
        /// </summary>
        internal static string RPC_NT_FP_OVERFLOW {
            get {
                return ResourceManager.GetString("RPC_NT_FP_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A floating point underflow occurred at the RPC server. (code=0xC0020047).
        /// </summary>
        internal static string RPC_NT_FP_UNDERFLOW {
            get {
                return ResourceManager.GetString("RPC_NT_FP_UNDERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The group member was not found. (code=0xC002004B).
        /// </summary>
        internal static string RPC_NT_GROUP_MEMBER_NOT_FOUND {
            get {
                return ResourceManager.GetString("RPC_NT_GROUP_MEMBER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entry name is incomplete. (code=0xC0020038).
        /// </summary>
        internal static string RPC_NT_INCOMPLETE_NAME {
            get {
                return ResourceManager.GetString("RPC_NT_INCOMPLETE_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The interface was not found. (code=0xC002003C).
        /// </summary>
        internal static string RPC_NT_INTERFACE_NOT_FOUND {
            get {
                return ResourceManager.GetString("RPC_NT_INTERFACE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error occurred in the RPC. (code=0xC0020043).
        /// </summary>
        internal static string RPC_NT_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("RPC_NT_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid asynchronous RPC call handle for this operation. (code=0xC0020063).
        /// </summary>
        internal static string RPC_NT_INVALID_ASYNC_CALL {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_ASYNC_CALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid asynchronous RPC handle. (code=0xC0020062).
        /// </summary>
        internal static string RPC_NT_INVALID_ASYNC_HANDLE {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_ASYNC_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security context is invalid. (code=0xC0020032).
        /// </summary>
        internal static string RPC_NT_INVALID_AUTH_IDENTITY {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_AUTH_IDENTITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding handle is invalid. (code=0xC0020003).
        /// </summary>
        internal static string RPC_NT_INVALID_BINDING {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_BINDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array bounds are invalid. (code=0xC0020023).
        /// </summary>
        internal static string RPC_NT_INVALID_BOUND {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_BOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint format is invalid. (code=0xC0020007).
        /// </summary>
        internal static string RPC_NT_INVALID_ENDPOINT_FORMAT {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_ENDPOINT_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid operation on the encoding/decoding handle. (code=0xC0030059).
        /// </summary>
        internal static string RPC_NT_INVALID_ES_ACTION {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_ES_ACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network address family is invalid. (code=0xC0020040).
        /// </summary>
        internal static string RPC_NT_INVALID_NAF_ID {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_NAF_ID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name syntax is invalid. (code=0xC0020025).
        /// </summary>
        internal static string RPC_NT_INVALID_NAME_SYNTAX {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_NAME_SYNTAX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network address is invalid. (code=0xC0020008).
        /// </summary>
        internal static string RPC_NT_INVALID_NET_ADDR {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_NET_ADDR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network options are invalid. (code=0xC0020019).
        /// </summary>
        internal static string RPC_NT_INVALID_NETWORK_OPTIONS {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_NETWORK_OPTIONS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object UUID is the nil UUID. (code=0xC002004D).
        /// </summary>
        internal static string RPC_NT_INVALID_OBJECT {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC pipe object is invalid or corrupt. (code=0xC003005C).
        /// </summary>
        internal static string RPC_NT_INVALID_PIPE_OBJECT {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_PIPE_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid operation was attempted on an RPC pipe object. (code=0xC003005D).
        /// </summary>
        internal static string RPC_NT_INVALID_PIPE_OPERATION {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_PIPE_OPERATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC protocol sequence is invalid. (code=0xC0020005).
        /// </summary>
        internal static string RPC_NT_INVALID_RPC_PROTSEQ {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_RPC_PROTSEQ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string binding is invalid. (code=0xC0020001).
        /// </summary>
        internal static string RPC_NT_INVALID_STRING_BINDING {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_STRING_BINDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string UUID is invalid. (code=0xC0020006).
        /// </summary>
        internal static string RPC_NT_INVALID_STRING_UUID {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_STRING_UUID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tag is invalid. (code=0xC0020022).
        /// </summary>
        internal static string RPC_NT_INVALID_TAG {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_TAG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The time-out value is invalid. (code=0xC002000A).
        /// </summary>
        internal static string RPC_NT_INVALID_TIMEOUT {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version option is invalid. (code=0xC0020039).
        /// </summary>
        internal static string RPC_NT_INVALID_VERS_OPTION {
            get {
                return ResourceManager.GetString("RPC_NT_INVALID_VERS_OPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of calls is too small. (code=0xC002002B).
        /// </summary>
        internal static string RPC_NT_MAX_CALLS_TOO_SMALL {
            get {
                return ResourceManager.GetString("RPC_NT_MAX_CALLS_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name service is unavailable. (code=0xC002003F).
        /// </summary>
        internal static string RPC_NT_NAME_SERVICE_UNAVAILABLE {
            get {
                return ResourceManager.GetString("RPC_NT_NAME_SERVICE_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no bindings. (code=0xC0020013).
        /// </summary>
        internal static string RPC_NT_NO_BINDINGS {
            get {
                return ResourceManager.GetString("RPC_NT_NO_BINDINGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No RPCs are active on this thread. (code=0xC002001A).
        /// </summary>
        internal static string RPC_NT_NO_CALL_ACTIVE {
            get {
                return ResourceManager.GetString("RPC_NT_NO_CALL_ACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No security context is available to allow impersonation. (code=0xC0020042).
        /// </summary>
        internal static string RPC_NT_NO_CONTEXT_AVAILABLE {
            get {
                return ResourceManager.GetString("RPC_NT_NO_CONTEXT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No endpoint was found. (code=0xC0020009).
        /// </summary>
        internal static string RPC_NT_NO_ENDPOINT_FOUND {
            get {
                return ResourceManager.GetString("RPC_NT_NO_ENDPOINT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding does not contain an entry name. (code=0xC0020024).
        /// </summary>
        internal static string RPC_NT_NO_ENTRY_NAME {
            get {
                return ResourceManager.GetString("RPC_NT_NO_ENTRY_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No interfaces have been registered. (code=0xC002004F).
        /// </summary>
        internal static string RPC_NT_NO_INTERFACES {
            get {
                return ResourceManager.GetString("RPC_NT_NO_INTERFACES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no more bindings. (code=0xC002004A).
        /// </summary>
        internal static string RPC_NT_NO_MORE_BINDINGS {
            get {
                return ResourceManager.GetString("RPC_NT_NO_MORE_BINDINGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list of RPC servers available for auto-handle binding has been exhausted. (code=0xC0030001).
        /// </summary>
        internal static string RPC_NT_NO_MORE_ENTRIES {
            get {
                return ResourceManager.GetString("RPC_NT_NO_MORE_ENTRIES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no more members. (code=0xC002003A).
        /// </summary>
        internal static string RPC_NT_NO_MORE_MEMBERS {
            get {
                return ResourceManager.GetString("RPC_NT_NO_MORE_MEMBERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No principal name was registered. (code=0xC0020054).
        /// </summary>
        internal static string RPC_NT_NO_PRINC_NAME {
            get {
                return ResourceManager.GetString("RPC_NT_NO_PRINC_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no protocol sequences. (code=0xC0020014).
        /// </summary>
        internal static string RPC_NT_NO_PROTSEQS {
            get {
                return ResourceManager.GetString("RPC_NT_NO_PROTSEQS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No protocol sequences have been registered. (code=0xC002000F).
        /// </summary>
        internal static string RPC_NT_NO_PROTSEQS_REGISTERED {
            get {
                return ResourceManager.GetString("RPC_NT_NO_PROTSEQS_REGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is nothing to unexport. (code=0xC002003B).
        /// </summary>
        internal static string RPC_NT_NOT_ALL_OBJS_UNEXPORTED {
            get {
                return ResourceManager.GetString("RPC_NT_NOT_ALL_OBJS_UNEXPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The thread was not canceled. (code=0xC0020058).
        /// </summary>
        internal static string RPC_NT_NOT_CANCELLED {
            get {
                return ResourceManager.GetString("RPC_NT_NOT_CANCELLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC server is not listening. (code=0xC0020010).
        /// </summary>
        internal static string RPC_NT_NOT_LISTENING {
            get {
                return ResourceManager.GetString("RPC_NT_NOT_LISTENING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The error specified is not a valid Windows RPC error code. (code=0xC0020055).
        /// </summary>
        internal static string RPC_NT_NOT_RPC_ERROR {
            get {
                return ResourceManager.GetString("RPC_NT_NOT_RPC_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No interfaces have been exported. (code=0xC0020037).
        /// </summary>
        internal static string RPC_NT_NOTHING_TO_EXPORT {
            get {
                return ResourceManager.GetString("RPC_NT_NOTHING_TO_EXPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A null reference pointer was passed to the stub. (code=0xC0030009).
        /// </summary>
        internal static string RPC_NT_NULL_REF_POINTER {
            get {
                return ResourceManager.GetString("RPC_NT_NULL_REF_POINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object UUID was not found. (code=0xC002000B).
        /// </summary>
        internal static string RPC_NT_OBJECT_NOT_FOUND {
            get {
                return ResourceManager.GetString("RPC_NT_OBJECT_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient resources are available to complete this operation. (code=0xC0020016).
        /// </summary>
        internal static string RPC_NT_OUT_OF_RESOURCES {
            get {
                return ResourceManager.GetString("RPC_NT_OUT_OF_RESOURCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC pipe object has already been closed. (code=0xC003005F).
        /// </summary>
        internal static string RPC_NT_PIPE_CLOSED {
            get {
                return ResourceManager.GetString("RPC_NT_PIPE_CLOSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC call completed before all pipes were processed. (code=0xC0030060).
        /// </summary>
        internal static string RPC_NT_PIPE_DISCIPLINE_ERROR {
            get {
                return ResourceManager.GetString("RPC_NT_PIPE_DISCIPLINE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No more data is available from the RPC pipe. (code=0xC0030061).
        /// </summary>
        internal static string RPC_NT_PIPE_EMPTY {
            get {
                return ResourceManager.GetString("RPC_NT_PIPE_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The procedure number is out of range. (code=0xC002002E).
        /// </summary>
        internal static string RPC_NT_PROCNUM_OUT_OF_RANGE {
            get {
                return ResourceManager.GetString("RPC_NT_PROCNUM_OUT_OF_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An RPC protocol error occurred. (code=0xC002001D).
        /// </summary>
        internal static string RPC_NT_PROTOCOL_ERROR {
            get {
                return ResourceManager.GetString("RPC_NT_PROTOCOL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC protocol sequence was not found. (code=0xC002002D).
        /// </summary>
        internal static string RPC_NT_PROTSEQ_NOT_FOUND {
            get {
                return ResourceManager.GetString("RPC_NT_PROTSEQ_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC protocol sequence is not supported. (code=0xC0020004).
        /// </summary>
        internal static string RPC_NT_PROTSEQ_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("RPC_NT_PROTSEQ_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to the HTTP proxy is denied. (code=0xC0020064).
        /// </summary>
        internal static string RPC_NT_PROXY_ACCESS_DENIED {
            get {
                return ResourceManager.GetString("RPC_NT_PROXY_ACCESS_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A security package-specific error occurred. (code=0xC0020057).
        /// </summary>
        internal static string RPC_NT_SEC_PKG_ERROR {
            get {
                return ResourceManager.GetString("RPC_NT_SEC_PKG_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some data remains to be sent in the request buffer. (code=0x400200AF).
        /// </summary>
        internal static string RPC_NT_SEND_INCOMPLETE {
            get {
                return ResourceManager.GetString("RPC_NT_SEND_INCOMPLETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC server is too busy to complete this operation. (code=0xC0020018).
        /// </summary>
        internal static string RPC_NT_SERVER_TOO_BUSY {
            get {
                return ResourceManager.GetString("RPC_NT_SERVER_TOO_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC server is unavailable. (code=0xC0020017).
        /// </summary>
        internal static string RPC_NT_SERVER_UNAVAILABLE {
            get {
                return ResourceManager.GetString("RPC_NT_SERVER_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stub is unable to get the call handle. (code=0xC0030008).
        /// </summary>
        internal static string RPC_NT_SS_CANNOT_GET_CALL_HANDLE {
            get {
                return ResourceManager.GetString("RPC_NT_SS_CANNOT_GET_CALL_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file designated by DCERPCCHARTRANS cannot be opened. (code=0xC0030002).
        /// </summary>
        internal static string RPC_NT_SS_CHAR_TRANS_OPEN_FAIL {
            get {
                return ResourceManager.GetString("RPC_NT_SS_CHAR_TRANS_OPEN_FAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file containing the character translation table has fewer than 512 bytes. (code=0xC0030003).
        /// </summary>
        internal static string RPC_NT_SS_CHAR_TRANS_SHORT_FILE {
            get {
                return ResourceManager.GetString("RPC_NT_SS_CHAR_TRANS_SHORT_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The context handle changed during a call. (code=0xC0030006).
        /// </summary>
        internal static string RPC_NT_SS_CONTEXT_DAMAGED {
            get {
                return ResourceManager.GetString("RPC_NT_SS_CONTEXT_DAMAGED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The context handle does not match any known context handles. (code=0xC0030005).
        /// </summary>
        internal static string RPC_NT_SS_CONTEXT_MISMATCH {
            get {
                return ResourceManager.GetString("RPC_NT_SS_CONTEXT_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding handles passed to an RPC do not match. (code=0xC0030007).
        /// </summary>
        internal static string RPC_NT_SS_HANDLES_MISMATCH {
            get {
                return ResourceManager.GetString("RPC_NT_SS_HANDLES_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A null context handle is passed as an [in] parameter. (code=0xC0030004).
        /// </summary>
        internal static string RPC_NT_SS_IN_NULL_CONTEXT {
            get {
                return ResourceManager.GetString("RPC_NT_SS_IN_NULL_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string is too long. (code=0xC002002C).
        /// </summary>
        internal static string RPC_NT_STRING_TOO_LONG {
            get {
                return ResourceManager.GetString("RPC_NT_STRING_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type UUID has already been registered. (code=0xC002000D).
        /// </summary>
        internal static string RPC_NT_TYPE_ALREADY_REGISTERED {
            get {
                return ResourceManager.GetString("RPC_NT_TYPE_ALREADY_REGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authentication level is unknown. (code=0xC0020031).
        /// </summary>
        internal static string RPC_NT_UNKNOWN_AUTHN_LEVEL {
            get {
                return ResourceManager.GetString("RPC_NT_UNKNOWN_AUTHN_LEVEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authentication service is unknown. (code=0xC0020030).
        /// </summary>
        internal static string RPC_NT_UNKNOWN_AUTHN_SERVICE {
            get {
                return ResourceManager.GetString("RPC_NT_UNKNOWN_AUTHN_SERVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authentication type is unknown. (code=0xC002002A).
        /// </summary>
        internal static string RPC_NT_UNKNOWN_AUTHN_TYPE {
            get {
                return ResourceManager.GetString("RPC_NT_UNKNOWN_AUTHN_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authorization service is unknown. (code=0xC0020033).
        /// </summary>
        internal static string RPC_NT_UNKNOWN_AUTHZ_SERVICE {
            get {
                return ResourceManager.GetString("RPC_NT_UNKNOWN_AUTHZ_SERVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The interface is unknown. (code=0xC0020012).
        /// </summary>
        internal static string RPC_NT_UNKNOWN_IF {
            get {
                return ResourceManager.GetString("RPC_NT_UNKNOWN_IF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The manager type is unknown. (code=0xC0020011).
        /// </summary>
        internal static string RPC_NT_UNKNOWN_MGR_TYPE {
            get {
                return ResourceManager.GetString("RPC_NT_UNKNOWN_MGR_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested authentication level is not supported. (code=0xC0020053).
        /// </summary>
        internal static string RPC_NT_UNSUPPORTED_AUTHN_LEVEL {
            get {
                return ResourceManager.GetString("RPC_NT_UNSUPPORTED_AUTHN_LEVEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name syntax is not supported. (code=0xC0020026).
        /// </summary>
        internal static string RPC_NT_UNSUPPORTED_NAME_SYNTAX {
            get {
                return ResourceManager.GetString("RPC_NT_UNSUPPORTED_NAME_SYNTAX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC server does not support the transfer syntax. (code=0xC002001F).
        /// </summary>
        internal static string RPC_NT_UNSUPPORTED_TRANS_SYN {
            get {
                return ResourceManager.GetString("RPC_NT_UNSUPPORTED_TRANS_SYN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type UUID is not supported. (code=0xC0020021).
        /// </summary>
        internal static string RPC_NT_UNSUPPORTED_TYPE {
            get {
                return ResourceManager.GetString("RPC_NT_UNSUPPORTED_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A UUID that is valid only on this computer has been allocated. (code=0x40020056).
        /// </summary>
        internal static string RPC_NT_UUID_LOCAL_ONLY {
            get {
                return ResourceManager.GetString("RPC_NT_UUID_LOCAL_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No network address is available to construct a UUID. (code=0xC0020028).
        /// </summary>
        internal static string RPC_NT_UUID_NO_ADDRESS {
            get {
                return ResourceManager.GetString("RPC_NT_UUID_NO_ADDRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incompatible version of the serializing package. (code=0xC003005A).
        /// </summary>
        internal static string RPC_NT_WRONG_ES_VERSION {
            get {
                return ResourceManager.GetString("RPC_NT_WRONG_ES_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding handle is not the correct type. (code=0xC0020002).
        /// </summary>
        internal static string RPC_NT_WRONG_KIND_OF_BINDING {
            get {
                return ResourceManager.GetString("RPC_NT_WRONG_KIND_OF_BINDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported RPC pipe version. (code=0xC003005E).
        /// </summary>
        internal static string RPC_NT_WRONG_PIPE_VERSION {
            get {
                return ResourceManager.GetString("RPC_NT_WRONG_PIPE_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incompatible version of the RPC stub. (code=0xC003005B).
        /// </summary>
        internal static string RPC_NT_WRONG_STUB_VERSION {
            get {
                return ResourceManager.GetString("RPC_NT_WRONG_STUB_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RPC server attempted to divide an integer by zero. (code=0xC0020044).
        /// </summary>
        internal static string RPC_NT_ZERO_DIVIDE {
            get {
                return ResourceManager.GetString("RPC_NT_ZERO_DIVIDE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A valid hibernation file has been invalidated and should be abandoned. (code=0x40000033).
        /// </summary>
        internal static string STATUS_ABANDON_HIBERFILE {
            get {
                return ResourceManager.GetString("STATUS_ABANDON_HIBERFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller attempted to wait for a mutex that has been abandoned. (code=0x00000080).
        /// </summary>
        internal static string STATUS_ABANDONED {
            get {
                return ResourceManager.GetString("STATUS_ABANDONED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller attempted to wait for a mutex that has been abandoned. (code=0x00000080).
        /// </summary>
        internal static string STATUS_ABANDONED_WAIT_0 {
            get {
                return ResourceManager.GetString("STATUS_ABANDONED_WAIT_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller attempted to wait for a mutex that has been abandoned. (code=0x000000BF).
        /// </summary>
        internal static string STATUS_ABANDONED_WAIT_63 {
            get {
                return ResourceManager.GetString("STATUS_ABANDONED_WAIT_63", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to %1 is monitored by policy rule %2. (code=0x40000032).
        /// </summary>
        internal static string STATUS_ACCESS_AUDIT_BY_POLICY {
            get {
                return ResourceManager.GetString("STATUS_ACCESS_AUDIT_BY_POLICY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Access Denied} A process has requested access to an object but has not been granted those access rights. (code=0xC0000022).
        /// </summary>
        internal static string STATUS_ACCESS_DENIED {
            get {
                return ResourceManager.GetString("STATUS_ACCESS_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to %1 has been restricted by your Administrator by the default software restriction policy level. (code=0xC0000361).
        /// </summary>
        internal static string STATUS_ACCESS_DISABLED_BY_POLICY_DEFAULT {
            get {
                return ResourceManager.GetString("STATUS_ACCESS_DISABLED_BY_POLICY_DEFAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to %1 has been restricted by your Administrator by policy rule %2. (code=0xC0000364).
        /// </summary>
        internal static string STATUS_ACCESS_DISABLED_BY_POLICY_OTHER {
            get {
                return ResourceManager.GetString("STATUS_ACCESS_DISABLED_BY_POLICY_OTHER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to %1 has been restricted by your Administrator by location with policy rule %2 placed on path %3. (code=0xC0000362).
        /// </summary>
        internal static string STATUS_ACCESS_DISABLED_BY_POLICY_PATH {
            get {
                return ResourceManager.GetString("STATUS_ACCESS_DISABLED_BY_POLICY_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to %1 has been restricted by your Administrator by software publisher policy. (code=0xC0000363).
        /// </summary>
        internal static string STATUS_ACCESS_DISABLED_BY_POLICY_PUBLISHER {
            get {
                return ResourceManager.GetString("STATUS_ACCESS_DISABLED_BY_POLICY_PUBLISHER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to %1 has been restricted by your Administrator by policy rule %2. (code=0xC0000372).
        /// </summary>
        internal static string STATUS_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY {
            get {
                return ResourceManager.GetString("STATUS_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instruction at 0x%08lx referenced memory at 0x%08lx. The memory could not be %s. (code=0xC0000005).
        /// </summary>
        internal static string STATUS_ACCESS_VIOLATION {
            get {
                return ResourceManager.GetString("STATUS_ACCESS_VIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The referenced account is currently disabled and cannot be logged on to. (code=0xC0000072).
        /// </summary>
        internal static string STATUS_ACCOUNT_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_ACCOUNT_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user account has expired. (code=0xC0000193).
        /// </summary>
        internal static string STATUS_ACCOUNT_EXPIRED {
            get {
                return ResourceManager.GetString("STATUS_ACCOUNT_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user account has been automatically locked because too many invalid logon attempts or password change attempts have been requested. (code=0xC0000234).
        /// </summary>
        internal static string STATUS_ACCOUNT_LOCKED_OUT {
            get {
                return ResourceManager.GetString("STATUS_ACCOUNT_LOCKED_OUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates a referenced user name and authentication information are valid, but some user account restriction has prevented successful authentication (such as time-of-day restrictions). (code=0xC000006E).
        /// </summary>
        internal static string STATUS_ACCOUNT_RESTRICTION {
            get {
                return ResourceManager.GetString("STATUS_ACCOUNT_RESTRICTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The global system lock could not be acquired. (code=0xC0140012).
        /// </summary>
        internal static string STATUS_ACPI_ACQUIRE_GLOBAL_LOCK {
            get {
                return ResourceManager.GetString("STATUS_ACPI_ACQUIRE_GLOBAL_LOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An address failed to translate. (code=0xC014000C).
        /// </summary>
        internal static string STATUS_ACPI_ADDRESS_NOT_MAPPED {
            get {
                return ResourceManager.GetString("STATUS_ACPI_ADDRESS_NOT_MAPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to reinitialize the ACPI subsystem. (code=0xC0140013).
        /// </summary>
        internal static string STATUS_ACPI_ALREADY_INITIALIZED {
            get {
                return ResourceManager.GetString("STATUS_ACPI_ALREADY_INITIALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An inconsistent state has occurred. (code=0xC0140003).
        /// </summary>
        internal static string STATUS_ACPI_ASSERT_FAILED {
            get {
                return ResourceManager.GetString("STATUS_ACPI_ASSERT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A fatal error has occurred. (code=0xC0140006).
        /// </summary>
        internal static string STATUS_ACPI_FATAL {
            get {
                return ResourceManager.GetString("STATUS_ACPI_FATAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A handler for the target already exists. (code=0xC014000E).
        /// </summary>
        internal static string STATUS_ACPI_HANDLER_COLLISION {
            get {
                return ResourceManager.GetString("STATUS_ACPI_HANDLER_COLLISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incorrect number of arguments was specified. (code=0xC014000B).
        /// </summary>
        internal static string STATUS_ACPI_INCORRECT_ARGUMENT_COUNT {
            get {
                return ResourceManager.GetString("STATUS_ACPI_INCORRECT_ARGUMENT_COUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to access a field outside the defined range. (code=0xC0140011).
        /// </summary>
        internal static string STATUS_ACPI_INVALID_ACCESS_SIZE {
            get {
                return ResourceManager.GetString("STATUS_ACPI_INVALID_ACCESS_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An argument with an incorrect type was specified. (code=0xC0140008).
        /// </summary>
        internal static string STATUS_ACPI_INVALID_ARGTYPE {
            get {
                return ResourceManager.GetString("STATUS_ACPI_INVALID_ARGTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A required argument was not specified. (code=0xC0140005).
        /// </summary>
        internal static string STATUS_ACPI_INVALID_ARGUMENT {
            get {
                return ResourceManager.GetString("STATUS_ACPI_INVALID_ARGUMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid data for the target was specified. (code=0xC014000F).
        /// </summary>
        internal static string STATUS_ACPI_INVALID_DATA {
            get {
                return ResourceManager.GetString("STATUS_ACPI_INVALID_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incorrect event type was specified. (code=0xC014000D).
        /// </summary>
        internal static string STATUS_ACPI_INVALID_EVENTTYPE {
            get {
                return ResourceManager.GetString("STATUS_ACPI_INVALID_EVENTTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to access an array outside its bounds. (code=0xC0140004).
        /// </summary>
        internal static string STATUS_ACPI_INVALID_INDEX {
            get {
                return ResourceManager.GetString("STATUS_ACPI_INVALID_INDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incorrect mutex was specified. (code=0xC0140015).
        /// </summary>
        internal static string STATUS_ACPI_INVALID_MUTEX_LEVEL {
            get {
                return ResourceManager.GetString("STATUS_ACPI_INVALID_MUTEX_LEVEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object with an incorrect type was specified. (code=0xC0140009).
        /// </summary>
        internal static string STATUS_ACPI_INVALID_OBJTYPE {
            get {
                return ResourceManager.GetString("STATUS_ACPI_INVALID_OBJTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to run an invalid AML opcode. (code=0xC0140001).
        /// </summary>
        internal static string STATUS_ACPI_INVALID_OPCODE {
            get {
                return ResourceManager.GetString("STATUS_ACPI_INVALID_OPCODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid region for the target was specified. (code=0xC0140010).
        /// </summary>
        internal static string STATUS_ACPI_INVALID_REGION {
            get {
                return ResourceManager.GetString("STATUS_ACPI_INVALID_REGION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid SuperName was specified. (code=0xC0140007).
        /// </summary>
        internal static string STATUS_ACPI_INVALID_SUPERNAME {
            get {
                return ResourceManager.GetString("STATUS_ACPI_INVALID_SUPERNAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to use an incorrect table. (code=0xC0140019).
        /// </summary>
        internal static string STATUS_ACPI_INVALID_TABLE {
            get {
                return ResourceManager.GetString("STATUS_ACPI_INVALID_TABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A target with an incorrect type was specified. (code=0xC014000A).
        /// </summary>
        internal static string STATUS_ACPI_INVALID_TARGETTYPE {
            get {
                return ResourceManager.GetString("STATUS_ACPI_INVALID_TARGETTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mutex is not currently owned. (code=0xC0140016).
        /// </summary>
        internal static string STATUS_ACPI_MUTEX_NOT_OWNED {
            get {
                return ResourceManager.GetString("STATUS_ACPI_MUTEX_NOT_OWNED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to access the mutex by a process that was not the owner. (code=0xC0140017).
        /// </summary>
        internal static string STATUS_ACPI_MUTEX_NOT_OWNER {
            get {
                return ResourceManager.GetString("STATUS_ACPI_MUTEX_NOT_OWNER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ACPI subsystem has not been initialized. (code=0xC0140014).
        /// </summary>
        internal static string STATUS_ACPI_NOT_INITIALIZED {
            get {
                return ResourceManager.GetString("STATUS_ACPI_NOT_INITIALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An ACPI power object failed to transition state. (code=0xC0140021).
        /// </summary>
        internal static string STATUS_ACPI_POWER_REQUEST_FAILED {
            get {
                return ResourceManager.GetString("STATUS_ACPI_POWER_REQUEST_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The registration of an ACPI event failed. (code=0xC0140020).
        /// </summary>
        internal static string STATUS_ACPI_REG_HANDLER_FAILED {
            get {
                return ResourceManager.GetString("STATUS_ACPI_REG_HANDLER_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred during an access to region space. (code=0xC0140018).
        /// </summary>
        internal static string STATUS_ACPI_RS_ACCESS {
            get {
                return ResourceManager.GetString("STATUS_ACPI_RS_ACCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The AML interpreter stack has overflowed. (code=0xC0140002).
        /// </summary>
        internal static string STATUS_ACPI_STACK_OVERFLOW {
            get {
                return ResourceManager.GetString("STATUS_ACPI_STACK_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An I/O adapter hardware error has occurred. (code=0xC00000C2).
        /// </summary>
        internal static string STATUS_ADAPTER_HARDWARE_ERROR {
            get {
                return ResourceManager.GetString("STATUS_ADAPTER_HARDWARE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport endpoint already has an address associated with it. (code=0xC0000238).
        /// </summary>
        internal static string STATUS_ADDRESS_ALREADY_ASSOCIATED {
            get {
                return ResourceManager.GetString("STATUS_ADDRESS_ALREADY_ASSOCIATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport address could not be opened because it already exists. (code=0xC000020A).
        /// </summary>
        internal static string STATUS_ADDRESS_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_ADDRESS_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport address is now closed. (code=0xC000020B).
        /// </summary>
        internal static string STATUS_ADDRESS_CLOSED {
            get {
                return ResourceManager.GetString("STATUS_ADDRESS_CLOSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An address has not yet been associated with the transport endpoint. (code=0xC0000239).
        /// </summary>
        internal static string STATUS_ADDRESS_NOT_ASSOCIATED {
            get {
                return ResourceManager.GetString("STATUS_ADDRESS_NOT_ASSOCIATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An advanced installer failed during setup or servicing. (code=0xC0150020).
        /// </summary>
        internal static string STATUS_ADVANCED_INSTALLER_FAILED {
            get {
                return ResourceManager.GetString("STATUS_ADVANCED_INSTALLER_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No more authority agent values are available for the particular identifier authority value. (code=0xC0000085).
        /// </summary>
        internal static string STATUS_AGENTS_EXHAUSTED {
            get {
                return ResourceManager.GetString("STATUS_AGENTS_EXHAUSTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The delay completed because the thread was alerted. (code=0x00000101).
        /// </summary>
        internal static string STATUS_ALERTED {
            get {
                return ResourceManager.GetString("STATUS_ALERTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified local group already exists. (code=0xC0000154).
        /// </summary>
        internal static string STATUS_ALIAS_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_ALIAS_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SID filtering operation removed all SIDs. (code=0xC000035E).
        /// </summary>
        internal static string STATUS_ALL_SIDS_FILTERED {
            get {
                return ResourceManager.GetString("STATUS_ALL_SIDS_FILTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The total delegated trust creation quota has been exceeded. (code=0xC0000402).
        /// </summary>
        internal static string STATUS_ALL_USER_TRUST_QUOTA_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_ALL_USER_TRUST_QUOTA_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bucket array must be grown. Retry the transaction after doing so. (code=0xC000022F).
        /// </summary>
        internal static string STATUS_ALLOCATE_BUCKET {
            get {
                return ResourceManager.GetString("STATUS_ALLOCATE_BUCKET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When a block of memory is allotted for future updates, such as the memory allocated to hold discretionary access control and primary group information, successive updates might exceed the amount of memory originally allotted. Because a quota might already have been charged to several processes that have handles to the object, it is not reasonable to alter the size of the allocated memory. Instead, a request that requires more memory than has been allotted must fail and the STATUS_ALLOTTED_SPACE_EXCEEDED err [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string STATUS_ALLOTTED_SPACE_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_ALLOTTED_SPACE_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The receive operation was successful. Check the ALPC completion list for the received message. (code=0x40000030).
        /// </summary>
        internal static string STATUS_ALPC_CHECK_COMPLETION_LIST {
            get {
                return ResourceManager.GetString("STATUS_ALPC_CHECK_COMPLETION_LIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Already Committed} The specified address range is already committed. (code=0xC0000021).
        /// </summary>
        internal static string STATUS_ALREADY_COMMITTED {
            get {
                return ResourceManager.GetString("STATUS_ALREADY_COMMITTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified connection has already been disconnected. (code=0x80000025).
        /// </summary>
        internal static string STATUS_ALREADY_DISCONNECTED {
            get {
                return ResourceManager.GetString("STATUS_ALREADY_DISCONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided callback is already registered. (code=0xC0000718).
        /// </summary>
        internal static string STATUS_ALREADY_REGISTERED {
            get {
                return ResourceManager.GetString("STATUS_ALREADY_REGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Win32 process already exists. (code=0x4000001B).
        /// </summary>
        internal static string STATUS_ALREADY_WIN32 {
            get {
                return ResourceManager.GetString("STATUS_ALREADY_WIN32", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested system device cannot be identified due to multiple indistinguishable devices potentially matching the identification criteria. (code=0xC0000451).
        /// </summary>
        internal static string STATUS_AMBIGUOUS_SYSTEM_DEVICE {
            get {
                return ResourceManager.GetString("STATUS_AMBIGUOUS_SYSTEM_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A thread pool worker thread is impersonating a client, after executing an APC. This is unexpected, indicating that the APC is missing a call to revert the impersonation. (code=0xC0000711).
        /// </summary>
        internal static string STATUS_APC_RETURNED_WHILE_IMPERSONATING {
            get {
                return ResourceManager.GetString("STATUS_APC_RETURNED_WHILE_IMPERSONATING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Application Error} The application failed to initialize properly (0x%lx). Click OK to terminate the application. (code=0xC0000145).
        /// </summary>
        internal static string STATUS_APP_INIT_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_APP_INIT_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The AppHelp dialog box canceled; thus preventing the application from starting. (code=0xC000035D).
        /// </summary>
        internal static string STATUS_APPHELP_BLOCK {
            get {
                return ResourceManager.GetString("STATUS_APPHELP_BLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The arbiter has deferred arbitration of these resources to its parent. (code=0x40000026).
        /// </summary>
        internal static string STATUS_ARBITRATION_UNHANDLED {
            get {
                return ResourceManager.GetString("STATUS_ARBITRATION_UNHANDLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Array bounds exceeded. (code=0xC000008C).
        /// </summary>
        internal static string STATUS_ARRAY_BOUNDS_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_ARRAY_BOUNDS_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There has been an assertion failure. (code=0xC0000420).
        /// </summary>
        internal static string STATUS_ASSERTION_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_ASSERTION_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Audit Failed} An attempt to generate a security audit failed. (code=0xC0000244).
        /// </summary>
        internal static string STATUS_AUDIT_FAILED {
            get {
                return ResourceManager.GetString("STATUS_AUDIT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified event is currently not being audited. (code=0xC0000356).
        /// </summary>
        internal static string STATUS_AUDITING_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_AUDITING_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The computed authentication tag did not match the input authentication tag. (code=0xC000A002).
        /// </summary>
        internal static string STATUS_AUTH_TAG_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_AUTH_TAG_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logon Failure: The machine you are logging onto is protected by an authentication firewall. The specified account is not allowed to authenticate to the machine. (code=0xC0000413).
        /// </summary>
        internal static string STATUS_AUTHENTICATION_FIREWALL_FAILED {
            get {
                return ResourceManager.GetString("STATUS_AUTHENTICATION_FIREWALL_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This indicates that there was an AuthIP failure when attempting to connect to the remote host. (code=0xC000A086).
        /// </summary>
        internal static string STATUS_AUTHIP_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_AUTHIP_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is only allowed for the primary domain controller of the domain. (code=0xC0000187).
        /// </summary>
        internal static string STATUS_BACKUP_CONTROLLER {
            get {
                return ResourceManager.GetString("STATUS_BACKUP_CONTROLLER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client&apos;s supplied SSPI channel bindings were incorrect. (code=0xC000035B).
        /// </summary>
        internal static string STATUS_BAD_BINDINGS {
            get {
                return ResourceManager.GetString("STATUS_BAD_BINDINGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be completed due to bad clusters on disk. (code=0xC0000805).
        /// </summary>
        internal static string STATUS_BAD_CLUSTERS {
            get {
                return ResourceManager.GetString("STATUS_BAD_CLUSTERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified buffer contains ill-formed data. (code=0xC0000242).
        /// </summary>
        internal static string STATUS_BAD_COMPRESSION_BUFFER {
            get {
                return ResourceManager.GetString("STATUS_BAD_COMPRESSION_BUFFER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Invalid Current Directory} The process cannot switch to the startup current directory %hs. Select OK to set the current directory to %hs, or select CANCEL to exit. (code=0x40000007).
        /// </summary>
        internal static string STATUS_BAD_CURRENT_DIRECTORY {
            get {
                return ResourceManager.GetString("STATUS_BAD_CURRENT_DIRECTORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad data. (code=0xC000090B).
        /// </summary>
        internal static string STATUS_BAD_DATA {
            get {
                return ResourceManager.GetString("STATUS_BAD_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates a security descriptor is not in the necessary format (absolute or self-relative). (code=0xC00000E7).
        /// </summary>
        internal static string STATUS_BAD_DESCRIPTOR_FORMAT {
            get {
                return ResourceManager.GetString("STATUS_BAD_DESCRIPTOR_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Incorrect Network Resource Type} The specified device type (LPT, for example) conflicts with the actual device type on the remote resource. (code=0xC00000CB).
        /// </summary>
        internal static string STATUS_BAD_DEVICE_TYPE {
            get {
                return ResourceManager.GetString("STATUS_BAD_DEVICE_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Invalid DLL Entrypoint} The dynamic link library %hs is not written correctly. The stack pointer has been left in an inconsistent state. The entry point should be declared as WINAPI or STDCALL. Select YES to fail the DLL load. Select NO to continue execution. Selecting NO might cause the application to operate incorrectly. (code=0xC0000251).
        /// </summary>
        internal static string STATUS_BAD_DLL_ENTRYPOINT {
            get {
                return ResourceManager.GetString("STATUS_BAD_DLL_ENTRYPOINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file type being saved or retrieved has been blocked. (code=0xC0000903).
        /// </summary>
        internal static string STATUS_BAD_FILE_TYPE {
            get {
                return ResourceManager.GetString("STATUS_BAD_FILE_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A malformed function table was encountered during an unwind operation. (code=0xC00000FF).
        /// </summary>
        internal static string STATUS_BAD_FUNCTION_TABLE {
            get {
                return ResourceManager.GetString("STATUS_BAD_FUNCTION_TABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A specified impersonation level is invalid. Also used to indicate that a required impersonation level was not provided. (code=0xC00000A5).
        /// </summary>
        internal static string STATUS_BAD_IMPERSONATION_LEVEL {
            get {
                return ResourceManager.GetString("STATUS_BAD_IMPERSONATION_LEVEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that an attempt to build either an inherited ACL or ACE was not successful. This can be caused by a number of things. One of the more probable causes is the replacement of a CreatorId with a SID that did not fit into the ACE or ACL. (code=0xC000007D).
        /// </summary>
        internal static string STATUS_BAD_INHERITANCE_ACL {
            get {
                return ResourceManager.GetString("STATUS_BAD_INHERITANCE_ACL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid initial start address was specified in a call to NtCreateThread. (code=0xC000000A).
        /// </summary>
        internal static string STATUS_BAD_INITIAL_PC {
            get {
                return ResourceManager.GetString("STATUS_BAD_INITIAL_PC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid initial stack was specified in a call to NtCreateThread. (code=0xC0000009).
        /// </summary>
        internal static string STATUS_BAD_INITIAL_STACK {
            get {
                return ResourceManager.GetString("STATUS_BAD_INITIAL_STACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The logon session is not in a state that is consistent with the requested operation. (code=0xC0000104).
        /// </summary>
        internal static string STATUS_BAD_LOGON_SESSION_STATE {
            get {
                return ResourceManager.GetString("STATUS_BAD_LOGON_SESSION_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of a token object is inappropriate for its attempted use. (code=0xC00000A9).
        /// </summary>
        internal static string STATUS_BAD_MASTER_BOOT_RECORD {
            get {
                return ResourceManager.GetString("STATUS_BAD_MASTER_BOOT_RECORD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resources required for this device conflict with the MCFG table. (code=0xC0000908).
        /// </summary>
        internal static string STATUS_BAD_MCFG_TABLE {
            get {
                return ResourceManager.GetString("STATUS_BAD_MCFG_TABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Network Name Not Found} The specified share name cannot be found on the remote server. (code=0xC00000CC).
        /// </summary>
        internal static string STATUS_BAD_NETWORK_NAME {
            get {
                return ResourceManager.GetString("STATUS_BAD_NETWORK_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network path cannot be located. (code=0xC00000BE).
        /// </summary>
        internal static string STATUS_BAD_NETWORK_PATH {
            get {
                return ResourceManager.GetString("STATUS_BAD_NETWORK_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote adapter is not compatible. (code=0xC00000C5).
        /// </summary>
        internal static string STATUS_BAD_REMOTE_ADAPTER {
            get {
                return ResourceManager.GetString("STATUS_BAD_REMOTE_ADAPTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Invalid Service Callback Entrypoint} The %hs service is not written correctly. The stack pointer has been left in an inconsistent state. The callback entry point should be declared as WINAPI or STDCALL. Selecting OK will cause the service to continue operation. However, the service process might operate incorrectly. (code=0xC0000252).
        /// </summary>
        internal static string STATUS_BAD_SERVICE_ENTRYPOINT {
            get {
                return ResourceManager.GetString("STATUS_BAD_SERVICE_ENTRYPOINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid or unaligned stack was encountered during an unwind operation. (code=0xC0000028).
        /// </summary>
        internal static string STATUS_BAD_STACK {
            get {
                return ResourceManager.GetString("STATUS_BAD_STACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of a token object is inappropriate for its attempted use. (code=0xC00000A8).
        /// </summary>
        internal static string STATUS_BAD_TOKEN_TYPE {
            get {
                return ResourceManager.GetString("STATUS_BAD_TOKEN_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The validation information class requested was invalid. (code=0xC00000A7).
        /// </summary>
        internal static string STATUS_BAD_VALIDATION_CLASS {
            get {
                return ResourceManager.GetString("STATUS_BAD_VALIDATION_CLASS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to set the working set limit to an invalid value (for example, the minimum greater than maximum). (code=0xC000004C).
        /// </summary>
        internal static string STATUS_BAD_WORKING_SET_LIMIT {
            get {
                return ResourceManager.GetString("STATUS_BAD_WORKING_SET_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The beginning of a tape or partition has been detected. (code=0x8000001F).
        /// </summary>
        internal static string STATUS_BEGINNING_OF_MEDIA {
            get {
                return ResourceManager.GetString("STATUS_BEGINNING_OF_MEDIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation was attempted beyond the valid data length of the file. (code=0xC0000432).
        /// </summary>
        internal static string STATUS_BEYOND_VDL {
            get {
                return ResourceManager.GetString("STATUS_BEYOND_VDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The basic input/output system (BIOS) failed to connect a system interrupt to the device or bus for which the device is connected. (code=0xC000016E).
        /// </summary>
        internal static string STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT {
            get {
                return ResourceManager.GetString("STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Business rule scripts are disabled for the calling application. (code=0x40000034).
        /// </summary>
        internal static string STATUS_BIZRULES_NOT_ENABLED {
            get {
                return ResourceManager.GetString("STATUS_BIZRULES_NOT_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Breakpoint A breakpoint has been reached. (code=0x80000003).
        /// </summary>
        internal static string STATUS_BREAKPOINT {
            get {
                return ResourceManager.GetString("STATUS_BREAKPOINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified buffer contains all zeros. (code=0x00000117).
        /// </summary>
        internal static string STATUS_BUFFER_ALL_ZEROS {
            get {
                return ResourceManager.GetString("STATUS_BUFFER_ALL_ZEROS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Buffer Overflow} The data was too large to fit into the specified buffer. (code=0x80000005).
        /// </summary>
        internal static string STATUS_BUFFER_OVERFLOW {
            get {
                return ResourceManager.GetString("STATUS_BUFFER_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Buffer Too Small} The buffer is too small to contain the entry. No information has been written to the buffer. (code=0xC0000023).
        /// </summary>
        internal static string STATUS_BUFFER_TOO_SMALL {
            get {
                return ResourceManager.GetString("STATUS_BUFFER_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {I/O Bus Reset} An I/O bus reset was detected. (code=0x8000001D).
        /// </summary>
        internal static string STATUS_BUS_RESET {
            get {
                return ResourceManager.GetString("STATUS_BUS_RESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cached page was locked during operation. (code=0x00000115).
        /// </summary>
        internal static string STATUS_CACHE_PAGE_LOCKED {
            get {
                return ResourceManager.GetString("STATUS_CACHE_PAGE_LOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A callback has requested to bypass native code. (code=0xC0000503).
        /// </summary>
        internal static string STATUS_CALLBACK_BYPASS {
            get {
                return ResourceManager.GetString("STATUS_CALLBACK_BYPASS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A user mode unwind is in progress. (code=0xC0000423).
        /// </summary>
        internal static string STATUS_CALLBACK_POP_STACK {
            get {
                return ResourceManager.GetString("STATUS_CALLBACK_POP_STACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A threadpool worker thread entered a callback, which left with preferred languages set. (code=0xC000071F).
        /// </summary>
        internal static string STATUS_CALLBACK_RETURNED_LANG {
            get {
                return ResourceManager.GetString("STATUS_CALLBACK_RETURNED_LANG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A threadpool worker thread entered a callback, which left the loader lock held. (code=0xC000071E).
        /// </summary>
        internal static string STATUS_CALLBACK_RETURNED_LDR_LOCK {
            get {
                return ResourceManager.GetString("STATUS_CALLBACK_RETURNED_LDR_LOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A threadpool worker thread entered a callback, which left with background priorities set. (code=0xC0000720).
        /// </summary>
        internal static string STATUS_CALLBACK_RETURNED_PRI_BACK {
            get {
                return ResourceManager.GetString("STATUS_CALLBACK_RETURNED_PRI_BACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A threadpool worker thread entered a callback at thread affinity %p and exited at affinity %p. (code=0xC0000721).
        /// </summary>
        internal static string STATUS_CALLBACK_RETURNED_THREAD_AFFINITY {
            get {
                return ResourceManager.GetString("STATUS_CALLBACK_RETURNED_THREAD_AFFINITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A threadpool worker thread entered a callback at thread base priority 0x%x and exited at priority 0x%x. (code=0xC000071B).
        /// </summary>
        internal static string STATUS_CALLBACK_RETURNED_THREAD_PRIORITY {
            get {
                return ResourceManager.GetString("STATUS_CALLBACK_RETURNED_THREAD_PRIORITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A threadpool worker thread entered a callback, which left transaction state. (code=0xC000071D).
        /// </summary>
        internal static string STATUS_CALLBACK_RETURNED_TRANSACTION {
            get {
                return ResourceManager.GetString("STATUS_CALLBACK_RETURNED_TRANSACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A thread pool worker thread is impersonating a client, after a callback to 0x%p(0x%p). This is unexpected, indicating that the callback is missing a call to revert the impersonation. (code=0xC0000710).
        /// </summary>
        internal static string STATUS_CALLBACK_RETURNED_WHILE_IMPERSONATING {
            get {
                return ResourceManager.GetString("STATUS_CALLBACK_RETURNED_WHILE_IMPERSONATING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The I/O request was canceled. (code=0xC0000120).
        /// </summary>
        internal static string STATUS_CANCELLED {
            get {
                return ResourceManager.GetString("STATUS_CANCELLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transactional resource manager had too many transactions outstanding that could not be aborted. The transactional resource manager has been shut down. (code=0xC019004D).
        /// </summary>
        internal static string STATUS_CANNOT_ABORT_TRANSACTIONS {
            get {
                return ResourceManager.GetString("STATUS_CANNOT_ABORT_TRANSACTIONS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transactional resource manager cannot currently accept transacted work due to a transient condition, such as low resources. (code=0xC019004C).
        /// </summary>
        internal static string STATUS_CANNOT_ACCEPT_TRANSACTED_WORK {
            get {
                return ResourceManager.GetString("STATUS_CANNOT_ACCEPT_TRANSACTED_WORK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation did not complete successfully because it would cause an oplock to be broken. The caller has requested that existing oplocks not be broken. (code=0xC0000909).
        /// </summary>
        internal static string STATUS_CANNOT_BREAK_OPLOCK {
            get {
                return ResourceManager.GetString("STATUS_CANNOT_BREAK_OPLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt has been made to remove a file or directory that cannot be deleted. (code=0xC0000121).
        /// </summary>
        internal static string STATUS_CANNOT_DELETE {
            get {
                return ResourceManager.GetString("STATUS_CANNOT_DELETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file is open for modification in an unresolved transaction and can be opened for execute only by a transacted reader. (code=0xC0190044).
        /// </summary>
        internal static string STATUS_CANNOT_EXECUTE_FILE_IN_TRANSACTION {
            get {
                return ResourceManager.GetString("STATUS_CANNOT_EXECUTE_FILE_IN_TRANSACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that an attempt has been made to impersonate via a named pipe that has not yet been read from. (code=0xC000010D).
        /// </summary>
        internal static string STATUS_CANNOT_IMPERSONATE {
            get {
                return ResourceManager.GetString("STATUS_CANNOT_IMPERSONATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Registry File Failure} The registry cannot load the hive (file): %hs or its log or alternate. It is corrupt, absent, or not writable. (code=0xC0000218).
        /// </summary>
        internal static string STATUS_CANNOT_LOAD_REGISTRY_FILE {
            get {
                return ResourceManager.GetString("STATUS_CANNOT_LOAD_REGISTRY_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory or file cannot be created. (code=0xC00002EA).
        /// </summary>
        internal static string STATUS_CANNOT_MAKE {
            get {
                return ResourceManager.GetString("STATUS_CANNOT_MAKE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration information could not be read from the domain controller, either because the machine is unavailable or access has been denied. (code=0xC00000DA).
        /// </summary>
        internal static string STATUS_CANT_ACCESS_DOMAIN_INFO {
            get {
                return ResourceManager.GetString("STATUS_CANT_ACCESS_DOMAIN_INFO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be performed because another transaction is depending on this property not changing. (code=0xC0190037).
        /// </summary>
        internal static string STATUS_CANT_BREAK_TRANSACTIONAL_DEPENDENCY {
            get {
                return ResourceManager.GetString("STATUS_CANT_BREAK_TRANSACTIONAL_DEPENDENCY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to create any more miniversions for this stream. (code=0xC0190026).
        /// </summary>
        internal static string STATUS_CANT_CREATE_MORE_STREAM_MINIVERSIONS {
            get {
                return ResourceManager.GetString("STATUS_CANT_CREATE_MORE_STREAM_MINIVERSIONS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation would involve a single file with two transactional resource managers and is, therefore, not allowed. (code=0xC0190038).
        /// </summary>
        internal static string STATUS_CANT_CROSS_RM_BOUNDARY {
            get {
                return ResourceManager.GetString("STATUS_CANT_CROSS_RM_BOUNDARY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A mandatory group cannot be disabled. (code=0xC000005D).
        /// </summary>
        internal static string STATUS_CANT_DISABLE_MANDATORY {
            get {
                return ResourceManager.GetString("STATUS_CANT_DISABLE_MANDATORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A group marked &quot;&quot;use for deny only&quot;&quot; cannot be enabled. (code=0xC00002B3).
        /// </summary>
        internal static string STATUS_CANT_ENABLE_DENY_ONLY {
            get {
                return ResourceManager.GetString("STATUS_CANT_ENABLE_DENY_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to open an anonymous-level token. Anonymous tokens cannot be opened. (code=0xC00000A6).
        /// </summary>
        internal static string STATUS_CANT_OPEN_ANONYMOUS {
            get {
                return ResourceManager.GetString("STATUS_CANT_OPEN_ANONYMOUS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to open a miniversion with modify access. (code=0xC0190025).
        /// </summary>
        internal static string STATUS_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT {
            get {
                return ResourceManager.GetString("STATUS_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file cannot be recovered because there is a handle still open on it. (code=0x80190031).
        /// </summary>
        internal static string STATUS_CANT_RECOVER_WITH_HANDLE_OPEN {
            get {
                return ResourceManager.GetString("STATUS_CANT_RECOVER_WITH_HANDLE_OPEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that a thread attempted to terminate itself by default (called NtTerminateThread with NULL) and it was the last thread in the current process. (code=0xC00000DB).
        /// </summary>
        internal static string STATUS_CANT_TERMINATE_SELF {
            get {
                return ResourceManager.GetString("STATUS_CANT_TERMINATE_SELF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used to indicate that an operation cannot continue without blocking for I/O. (code=0xC00000D8).
        /// </summary>
        internal static string STATUS_CANT_WAIT {
            get {
                return ResourceManager.GetString("STATUS_CANT_WAIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device has detected a CardBus card in its slot. (code=0x40000027).
        /// </summary>
        internal static string STATUS_CARDBUS_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_CARDBUS_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client certificate account mapping is not unique. (code=0xC0000714).
        /// </summary>
        internal static string STATUS_CERTIFICATE_MAPPING_NOT_UNIQUE {
            get {
                return ResourceManager.GetString("STATUS_CERTIFICATE_MAPPING_NOT_UNIQUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking file system on %wZ. (code=0x40000014).
        /// </summary>
        internal static string STATUS_CHECKING_FILE_SYSTEM {
            get {
                return ResourceManager.GetString("STATUS_CHECKING_FILE_SYSTEM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file must be checked out before saving changes. (code=0xC0000902).
        /// </summary>
        internal static string STATUS_CHECKOUT_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_CHECKOUT_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to create a stable subkey under a volatile parent key. (code=0xC0000181).
        /// </summary>
        internal static string STATUS_CHILD_MUST_BE_VOLATILE {
            get {
                return ResourceManager.GetString("STATUS_CHILD_MUST_BE_VOLATILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A cleaner cartridge is present in the tape library. (code=0x80000027).
        /// </summary>
        internal static string STATUS_CLEANER_CARTRIDGE_INSTALLED {
            get {
                return ResourceManager.GetString("STATUS_CLEANER_CARTRIDGE_INSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameters passed to the server in the client/server shared memory window were invalid. Too much data might have been put in the shared memory window. (code=0xC0000223).
        /// </summary>
        internal static string STATUS_CLIENT_SERVER_PARAMETERS_INVALID {
            get {
                return ResourceManager.GetString("STATUS_CLIENT_SERVER_PARAMETERS_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster network is not valid. (code=0xC0130010).
        /// </summary>
        internal static string STATUS_CLUSTER_INVALID_NETWORK {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_INVALID_NETWORK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster network provider is not valid. (code=0xC013000B).
        /// </summary>
        internal static string STATUS_CLUSTER_INVALID_NETWORK_PROVIDER {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_INVALID_NETWORK_PROVIDER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster node is not valid. (code=0xC0130001).
        /// </summary>
        internal static string STATUS_CLUSTER_INVALID_NODE {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_INVALID_NODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster request is not valid for this object. (code=0xC013000A).
        /// </summary>
        internal static string STATUS_CLUSTER_INVALID_REQUEST {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_INVALID_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A node is in the process of joining the cluster. (code=0xC0130003).
        /// </summary>
        internal static string STATUS_CLUSTER_JOIN_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_JOIN_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A cluster join operation is not in progress. (code=0xC013000F).
        /// </summary>
        internal static string STATUS_CLUSTER_JOIN_NOT_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_JOIN_NOT_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster local node information was not found. (code=0xC0130005).
        /// </summary>
        internal static string STATUS_CLUSTER_LOCAL_NODE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_LOCAL_NODE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster network interface already exists. (code=0xC0130008).
        /// </summary>
        internal static string STATUS_CLUSTER_NETINTERFACE_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NETINTERFACE_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster network interface was not found. (code=0xC0130009).
        /// </summary>
        internal static string STATUS_CLUSTER_NETINTERFACE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NETINTERFACE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster network is already offline. (code=0x80130004).
        /// </summary>
        internal static string STATUS_CLUSTER_NETWORK_ALREADY_OFFLINE {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NETWORK_ALREADY_OFFLINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster network is already online. (code=0x80130003).
        /// </summary>
        internal static string STATUS_CLUSTER_NETWORK_ALREADY_ONLINE {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NETWORK_ALREADY_ONLINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster network already exists. (code=0xC0130006).
        /// </summary>
        internal static string STATUS_CLUSTER_NETWORK_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NETWORK_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster network was not found. (code=0xC0130007).
        /// </summary>
        internal static string STATUS_CLUSTER_NETWORK_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NETWORK_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster network is not configured for internal cluster communication. (code=0xC0130016).
        /// </summary>
        internal static string STATUS_CLUSTER_NETWORK_NOT_INTERNAL {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NETWORK_NOT_INTERNAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No network adapters are available. (code=0xC0130011).
        /// </summary>
        internal static string STATUS_CLUSTER_NO_NET_ADAPTERS {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NO_NET_ADAPTERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No cluster security context is available. (code=0xC0130015).
        /// </summary>
        internal static string STATUS_CLUSTER_NO_SECURITY_CONTEXT {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NO_SECURITY_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster node is already down. (code=0x80130002).
        /// </summary>
        internal static string STATUS_CLUSTER_NODE_ALREADY_DOWN {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NODE_ALREADY_DOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster node is already a member of the cluster. (code=0x80130005).
        /// </summary>
        internal static string STATUS_CLUSTER_NODE_ALREADY_MEMBER {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NODE_ALREADY_MEMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster node is already up. (code=0x80130001).
        /// </summary>
        internal static string STATUS_CLUSTER_NODE_ALREADY_UP {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NODE_ALREADY_UP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster node is down. (code=0xC013000C).
        /// </summary>
        internal static string STATUS_CLUSTER_NODE_DOWN {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NODE_DOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster node already exists. (code=0xC0130002).
        /// </summary>
        internal static string STATUS_CLUSTER_NODE_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NODE_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster node was not found. (code=0xC0130004).
        /// </summary>
        internal static string STATUS_CLUSTER_NODE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NODE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster node is not a member of the cluster. (code=0xC013000E).
        /// </summary>
        internal static string STATUS_CLUSTER_NODE_NOT_MEMBER {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NODE_NOT_MEMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster node is not paused. (code=0xC0130014).
        /// </summary>
        internal static string STATUS_CLUSTER_NODE_NOT_PAUSED {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NODE_NOT_PAUSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster node is paused. (code=0xC0130013).
        /// </summary>
        internal static string STATUS_CLUSTER_NODE_PAUSED {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NODE_PAUSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster node is not reachable. (code=0xC013000D).
        /// </summary>
        internal static string STATUS_CLUSTER_NODE_UNREACHABLE {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NODE_UNREACHABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster node is up. (code=0xC0130012).
        /// </summary>
        internal static string STATUS_CLUSTER_NODE_UP {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_NODE_UP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cluster node has been poisoned. (code=0xC0130017).
        /// </summary>
        internal static string STATUS_CLUSTER_POISONED {
            get {
                return ResourceManager.GetString("STATUS_CLUSTER_POISONED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Out of Virtual Memory} Your system is low on virtual memory. To ensure that Windows runs correctly, increase the size of your virtual memory paging file. For more information, see Help. (code=0xC000012D).
        /// </summary>
        internal static string STATUS_COMMITMENT_LIMIT {
            get {
                return ResourceManager.GetString("STATUS_COMMITMENT_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Virtual Memory Minimum Too Low} Your system is low on virtual memory. Windows is increasing the size of your virtual memory paging file. During this process, memory requests for some applications might be denied. For more information, see Help. (code=0xC00002C8).
        /// </summary>
        internal static string STATUS_COMMITMENT_MINIMUM {
            get {
                return ResourceManager.GetString("STATUS_COMMITMENT_MINIMUM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compression is disabled for this volume. (code=0xC0000426).
        /// </summary>
        internal static string STATUS_COMPRESSION_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_COMPRESSION_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The compression operation could not be completed because a transaction is active on the file. (code=0xC0190056).
        /// </summary>
        internal static string STATUS_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION {
            get {
                return ResourceManager.GetString("STATUS_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Conflicting Address Range} The specified address range conflicts with the address space. (code=0xC0000018).
        /// </summary>
        internal static string STATUS_CONFLICTING_ADDRESSES {
            get {
                return ResourceManager.GetString("STATUS_CONFLICTING_ADDRESSES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport connection was aborted by the local system. (code=0xC0000241).
        /// </summary>
        internal static string STATUS_CONNECTION_ABORTED {
            get {
                return ResourceManager.GetString("STATUS_CONNECTION_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid operation was attempted on an active transport connection. (code=0xC000023B).
        /// </summary>
        internal static string STATUS_CONNECTION_ACTIVE {
            get {
                return ResourceManager.GetString("STATUS_CONNECTION_ACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A connection to the server could not be made because the limit on the number of concurrent connections for this account has been reached. (code=0xC0000246).
        /// </summary>
        internal static string STATUS_CONNECTION_COUNT_LIMIT {
            get {
                return ResourceManager.GetString("STATUS_CONNECTION_COUNT_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport connection is now disconnected. (code=0xC000020C).
        /// </summary>
        internal static string STATUS_CONNECTION_DISCONNECTED {
            get {
                return ResourceManager.GetString("STATUS_CONNECTION_DISCONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user attempted to force close the files on a redirected drive, but there were opened directories on the drive, and the user did not specify a sufficient level of force. (code=0xC0000108).
        /// </summary>
        internal static string STATUS_CONNECTION_IN_USE {
            get {
                return ResourceManager.GetString("STATUS_CONNECTION_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation was attempted on a nonexistent transport connection. (code=0xC000023A).
        /// </summary>
        internal static string STATUS_CONNECTION_INVALID {
            get {
                return ResourceManager.GetString("STATUS_CONNECTION_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport-connection attempt was refused by the remote system. (code=0xC0000236).
        /// </summary>
        internal static string STATUS_CONNECTION_REFUSED {
            get {
                return ResourceManager.GetString("STATUS_CONNECTION_REFUSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport connection has been reset. (code=0xC000020D).
        /// </summary>
        internal static string STATUS_CONNECTION_RESET {
            get {
                return ResourceManager.GetString("STATUS_CONNECTION_RESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation failed because the content was blocked. (code=0xC0000804).
        /// </summary>
        internal static string STATUS_CONTENT_BLOCKED {
            get {
                return ResourceManager.GetString("STATUS_CONTENT_BLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided context did not match the target. (code=0xC0000719).
        /// </summary>
        internal static string STATUS_CONTEXT_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_CONTEXT_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Application Exit by CTRL+C} The application terminated as a result of a CTRL+C. (code=0xC000013A).
        /// </summary>
        internal static string STATUS_CONTROL_C_EXIT {
            get {
                return ResourceManager.GetString("STATUS_CONTROL_C_EXIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal OFS status codes indicating how an allocation operation is handled. Either it is retried after the containing oNode is moved or the extent stream is converted to a large stream. (code=0xC000022C).
        /// </summary>
        internal static string STATUS_CONVERT_TO_LARGE {
            get {
                return ResourceManager.GetString("STATUS_CONVERT_TO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy protection failure. (code=0xC0000305).
        /// </summary>
        internal static string STATUS_COPY_PROTECTION_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_COPY_PROTECTION_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system file %1 has become corrupt and has been replaced. (code=0xC00002C4).
        /// </summary>
        internal static string STATUS_CORRUPT_SYSTEM_FILE {
            get {
                return ResourceManager.GetString("STATUS_CORRUPT_SYSTEM_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The passed ACL did not contain the minimum required information. (code=0xC00000B9).
        /// </summary>
        internal static string STATUS_COULD_NOT_INTERPRET {
            get {
                return ResourceManager.GetString("STATUS_COULD_NOT_INTERPRET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log could not be set to the requested size. (code=0x80190009).
        /// </summary>
        internal static string STATUS_COULD_NOT_RESIZE_LOG {
            get {
                return ResourceManager.GetString("STATUS_COULD_NOT_RESIZE_LOG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The crash dump exists in a paging file. (code=0x00000116).
        /// </summary>
        internal static string STATUS_CRASH_DUMP {
            get {
                return ResourceManager.GetString("STATUS_CRASH_DUMP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Bad CRC} A cyclic redundancy check (CRC) checksum error occurred. (code=0xC000003F).
        /// </summary>
        internal static string STATUS_CRC_ERROR {
            get {
                return ResourceManager.GetString("STATUS_CRC_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested credential requires confirmation. (code=0xC0000440).
        /// </summary>
        internal static string STATUS_CRED_REQUIRES_CONFIRMATION {
            get {
                return ResourceManager.GetString("STATUS_CRED_REQUIRES_CONFIRMATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource manager tried to register a protocol that already exists. (code=0xC019000F).
        /// </summary>
        internal static string STATUS_CRM_PROTOCOL_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_CRM_PROTOCOL_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested propagation protocol was not registered as a CRM. (code=0xC0190011).
        /// </summary>
        internal static string STATUS_CRM_PROTOCOL_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_CRM_PROTOCOL_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made by this server to make a Kerberos constrained delegation request for a target that is outside the server realm. This action is not supported and the resulting error indicates a misconfiguration on the allowed-to-delegate-to list for this server. Contact your administrator. (code=0xC000040B).
        /// </summary>
        internal static string STATUS_CROSSREALM_DELEGATION_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_CROSSREALM_DELEGATION_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The crypto system or checksum function is invalid because a required function is unavailable. (code=0xC00002F3).
        /// </summary>
        internal static string STATUS_CRYPTO_SYSTEM_INVALID {
            get {
                return ResourceManager.GetString("STATUS_CRYPTO_SYSTEM_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File is encrypted and should be opened in Client Side Encryption mode. (code=0xC0000443).
        /// </summary>
        internal static string STATUS_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE {
            get {
                return ResourceManager.GetString("STATUS_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SMB client requested a CSE FSCTL on a non-CSE file. (code=0xC0000445).
        /// </summary>
        internal static string STATUS_CS_ENCRYPTION_FILE_NOT_CSE {
            get {
                return ResourceManager.GetString("STATUS_CS_ENCRYPTION_FILE_NOT_CSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote server sent an invalid response for a file being opened with Client Side Encryption. (code=0xC0000441).
        /// </summary>
        internal static string STATUS_CS_ENCRYPTION_INVALID_SERVER_RESPONSE {
            get {
                return ResourceManager.GetString("STATUS_CS_ENCRYPTION_INVALID_SERVER_RESPONSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new encrypted file is being created and a $EFS needs to be provided. (code=0xC0000444).
        /// </summary>
        internal static string STATUS_CS_ENCRYPTION_NEW_ENCRYPTED_FILE {
            get {
                return ResourceManager.GetString("STATUS_CS_ENCRYPTION_NEW_ENCRYPTED_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Client Side Encryption is not supported by the remote server even though it claims to support it. (code=0xC0000442).
        /// </summary>
        internal static string STATUS_CS_ENCRYPTION_UNSUPPORTED_SERVER {
            get {
                return ResourceManager.GetString("STATUS_CS_ENCRYPTION_UNSUPPORTED_SERVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy protection error—DVD CSS Authentication failed. (code=0xC0000306).
        /// </summary>
        internal static string STATUS_CSS_AUTHENTICATION_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_CSS_AUTHENTICATION_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy protection error—DVD session key not established. (code=0xC0000308).
        /// </summary>
        internal static string STATUS_CSS_KEY_NOT_ESTABLISHED {
            get {
                return ResourceManager.GetString("STATUS_CSS_KEY_NOT_ESTABLISHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy protection error—The specified sector does not contain a valid key. (code=0xC0000307).
        /// </summary>
        internal static string STATUS_CSS_KEY_NOT_PRESENT {
            get {
                return ResourceManager.GetString("STATUS_CSS_KEY_NOT_PRESENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy protection error—The region of the specified DVD does not correspond to the region setting of the drive. (code=0xC000030A).
        /// </summary>
        internal static string STATUS_CSS_REGION_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_CSS_REGION_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy protection error—The region setting of the drive might be permanent. (code=0xC000030B).
        /// </summary>
        internal static string STATUS_CSS_RESETS_EXHAUSTED {
            get {
                return ResourceManager.GetString("STATUS_CSS_RESETS_EXHAUSTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy protection error—The read failed because the sector is encrypted. (code=0xC0000309).
        /// </summary>
        internal static string STATUS_CSS_SCRAMBLED_SECTOR {
            get {
                return ResourceManager.GetString("STATUS_CSS_SCRAMBLED_SECTOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to set the control attribute on a file. This attribute is not supported in the destination file system. (code=0xC0000057).
        /// </summary>
        internal static string STATUS_CTL_FILE_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_CTL_FILE_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt has been made to connect to a session whose video mode is not supported by the current client. (code=0xC00A0018).
        /// </summary>
        internal static string STATUS_CTX_BAD_VIDEO_MODE {
            get {
                return ResourceManager.GetString("STATUS_CTX_BAD_VIDEO_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Client Drive Mapping Service has connected on Terminal Connection. (code=0x400A0004).
        /// </summary>
        internal static string STATUS_CTX_CDM_CONNECT {
            get {
                return ResourceManager.GetString("STATUS_CTX_CDM_CONNECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Client Drive Mapping Service has disconnected on Terminal Connection. (code=0x400A0005).
        /// </summary>
        internal static string STATUS_CTX_CDM_DISCONNECT {
            get {
                return ResourceManager.GetString("STATUS_CTX_CDM_DISCONNECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your request to connect to this terminal server has been rejected. Your terminal server client license number is currently being used by another user. Contact your system administrator to obtain a new copy of the terminal server client with a valid, unique license number. Click OK to continue. (code=0xC00A0034).
        /// </summary>
        internal static string STATUS_CTX_CLIENT_LICENSE_IN_USE {
            get {
                return ResourceManager.GetString("STATUS_CTX_CLIENT_LICENSE_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your request to connect to this terminal server has been rejected. Your terminal server client license number has not been entered for this copy of the terminal client. Contact your system administrator for help in entering a valid, unique license number for this terminal server client. Click OK to continue. (code=0xC00A0033).
        /// </summary>
        internal static string STATUS_CTX_CLIENT_LICENSE_NOT_SET {
            get {
                return ResourceManager.GetString("STATUS_CTX_CLIENT_LICENSE_NOT_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client failed to respond to the server connect message. (code=0xC00A0026).
        /// </summary>
        internal static string STATUS_CTX_CLIENT_QUERY_TIMEOUT {
            get {
                return ResourceManager.GetString("STATUS_CTX_CLIENT_QUERY_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A close operation is pending on the terminal connection. (code=0xC00A0006).
        /// </summary>
        internal static string STATUS_CTX_CLOSE_PENDING {
            get {
                return ResourceManager.GetString("STATUS_CTX_CLOSE_PENDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reconnecting a disconnected session to the console is not supported. (code=0xC00A0028).
        /// </summary>
        internal static string STATUS_CTX_CONSOLE_CONNECT {
            get {
                return ResourceManager.GetString("STATUS_CTX_CONSOLE_CONNECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disconnecting the console session is not supported. (code=0xC00A0027).
        /// </summary>
        internal static string STATUS_CTX_CONSOLE_DISCONNECT {
            get {
                return ResourceManager.GetString("STATUS_CTX_CONSOLE_DISCONNECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The application attempted to enable DOS graphics mode. DOS graphics mode is not supported. (code=0xC00A0022).
        /// </summary>
        internal static string STATUS_CTX_GRAPHICS_INVALID {
            get {
                return ResourceManager.GetString("STATUS_CTX_GRAPHICS_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The modem (%1) was not found in the MODEM.INF file. (code=0xC00A0009).
        /// </summary>
        internal static string STATUS_CTX_INVALID_MODEMNAME {
            get {
                return ResourceManager.GetString("STATUS_CTX_INVALID_MODEMNAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protocol driver %1 is invalid. (code=0xC00A0002).
        /// </summary>
        internal static string STATUS_CTX_INVALID_PD {
            get {
                return ResourceManager.GetString("STATUS_CTX_INVALID_PD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The terminal connection driver %1 is invalid. (code=0xC00A002E).
        /// </summary>
        internal static string STATUS_CTX_INVALID_WD {
            get {
                return ResourceManager.GetString("STATUS_CTX_INVALID_WD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client you are using is not licensed to use this system. Your logon request is denied. (code=0xC00A0012).
        /// </summary>
        internal static string STATUS_CTX_LICENSE_CLIENT_INVALID {
            get {
                return ResourceManager.GetString("STATUS_CTX_LICENSE_CLIENT_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system license has expired. Your logon request is denied. (code=0xC00A0014).
        /// </summary>
        internal static string STATUS_CTX_LICENSE_EXPIRED {
            get {
                return ResourceManager.GetString("STATUS_CTX_LICENSE_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system has reached its licensed logon limit. Try again later. (code=0xC00A0013).
        /// </summary>
        internal static string STATUS_CTX_LICENSE_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("STATUS_CTX_LICENSE_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your interactive logon privilege has been disabled. Contact your system administrator. (code=0xC00A0037).
        /// </summary>
        internal static string STATUS_CTX_LOGON_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_CTX_LOGON_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MODEM.INF file was not found. (code=0xC00A0008).
        /// </summary>
        internal static string STATUS_CTX_MODEM_INF_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_CTX_MODEM_INF_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A busy signal was detected at a remote site on callback. (code=0xC00A000E).
        /// </summary>
        internal static string STATUS_CTX_MODEM_RESPONSE_BUSY {
            get {
                return ResourceManager.GetString("STATUS_CTX_MODEM_RESPONSE_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Carrier detection has failed or the carrier has been dropped due to disconnection. (code=0xC00A000C).
        /// </summary>
        internal static string STATUS_CTX_MODEM_RESPONSE_NO_CARRIER {
            get {
                return ResourceManager.GetString("STATUS_CTX_MODEM_RESPONSE_NO_CARRIER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A dial tone was not detected within the required time. Verify that the phone cable is properly attached and functional. (code=0xC00A000D).
        /// </summary>
        internal static string STATUS_CTX_MODEM_RESPONSE_NO_DIALTONE {
            get {
                return ResourceManager.GetString("STATUS_CTX_MODEM_RESPONSE_NO_DIALTONE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The modem did not respond to the command sent to it. Verify that the modem cable is properly attached and the modem is turned on. (code=0xC00A000B).
        /// </summary>
        internal static string STATUS_CTX_MODEM_RESPONSE_TIMEOUT {
            get {
                return ResourceManager.GetString("STATUS_CTX_MODEM_RESPONSE_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A voice was detected at a remote site on callback. (code=0xC00A000F).
        /// </summary>
        internal static string STATUS_CTX_MODEM_RESPONSE_VOICE {
            get {
                return ResourceManager.GetString("STATUS_CTX_MODEM_RESPONSE_VOICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No free output buffers are available. (code=0xC00A0007).
        /// </summary>
        internal static string STATUS_CTX_NO_OUTBUF {
            get {
                return ResourceManager.GetString("STATUS_CTX_NO_OUTBUF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation can be performed only on the system console. This is most often the result of a driver or system DLL requiring direct console access. (code=0xC00A0024).
        /// </summary>
        internal static string STATUS_CTX_NOT_CONSOLE {
            get {
                return ResourceManager.GetString("STATUS_CTX_NOT_CONSOLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protocol driver %1 was not found in the system path. (code=0xC00A0003).
        /// </summary>
        internal static string STATUS_CTX_PD_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_CTX_PD_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The modem did not accept the command sent to it. Verify that the configured modem name matches the attached modem. (code=0xC00A000A).
        /// </summary>
        internal static string STATUS_CTX_RESPONSE_ERROR {
            get {
                return ResourceManager.GetString("STATUS_CTX_RESPONSE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The terminal server security layer detected an error in the protocol stream and has disconnected the client. (code=0xC00A0038).
        /// </summary>
        internal static string STATUS_CTX_SECURITY_LAYER_ERROR {
            get {
                return ResourceManager.GetString("STATUS_CTX_SECURITY_LAYER_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request to control another session remotely was denied. (code=0xC00A002A).
        /// </summary>
        internal static string STATUS_CTX_SHADOW_DENIED {
            get {
                return ResourceManager.GetString("STATUS_CTX_SHADOW_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested session is not configured to allow remote control. (code=0xC00A0031).
        /// </summary>
        internal static string STATUS_CTX_SHADOW_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_CTX_SHADOW_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote control of the console was terminated because the display mode was changed. Changing the display mode in a remote control session is not supported. (code=0xC00A0035).
        /// </summary>
        internal static string STATUS_CTX_SHADOW_ENDED_BY_MODE_CHANGE {
            get {
                return ResourceManager.GetString("STATUS_CTX_SHADOW_ENDED_BY_MODE_CHANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested session cannot be controlled remotely. You cannot control your own session, a session that is trying to control your session, a session that has no user logged on, or other sessions from the console. (code=0xC00A0030).
        /// </summary>
        internal static string STATUS_CTX_SHADOW_INVALID {
            get {
                return ResourceManager.GetString("STATUS_CTX_SHADOW_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remote control could not be terminated because the specified session is not currently being remotely controlled. (code=0xC00A0036).
        /// </summary>
        internal static string STATUS_CTX_SHADOW_NOT_RUNNING {
            get {
                return ResourceManager.GetString("STATUS_CTX_SHADOW_NOT_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transport driver error. (code=0xC00A0010).
        /// </summary>
        internal static string STATUS_CTX_TD_ERROR {
            get {
                return ResourceManager.GetString("STATUS_CTX_TD_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The terminal connection driver %1 was not found in the system path. (code=0xC00A002F).
        /// </summary>
        internal static string STATUS_CTX_WD_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_CTX_WD_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A process has requested access to a session, but has not been granted those access rights. (code=0xC00A002B).
        /// </summary>
        internal static string STATUS_CTX_WINSTATION_ACCESS_DENIED {
            get {
                return ResourceManager.GetString("STATUS_CTX_WINSTATION_ACCESS_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation cannot be completed because the terminal connection is currently processing a connect, disconnect, reset, or delete operation. (code=0xC00A0017).
        /// </summary>
        internal static string STATUS_CTX_WINSTATION_BUSY {
            get {
                return ResourceManager.GetString("STATUS_CTX_WINSTATION_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified session name is already in use. (code=0xC00A0016).
        /// </summary>
        internal static string STATUS_CTX_WINSTATION_NAME_COLLISION {
            get {
                return ResourceManager.GetString("STATUS_CTX_WINSTATION_NAME_COLLISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Session name %1 is invalid. (code=0xC00A0001).
        /// </summary>
        internal static string STATUS_CTX_WINSTATION_NAME_INVALID {
            get {
                return ResourceManager.GetString("STATUS_CTX_WINSTATION_NAME_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified session cannot be found. (code=0xC00A0015).
        /// </summary>
        internal static string STATUS_CTX_WINSTATION_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_CTX_WINSTATION_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed on the current domain. (code=0xC00002E9).
        /// </summary>
        internal static string STATUS_CURRENT_DOMAIN_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("STATUS_CURRENT_DOMAIN_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current transaction context associated with the thread is not a valid handle to a transaction object. (code=0xC0190018).
        /// </summary>
        internal static string STATUS_CURRENT_TRANSACTION_NOT_VALID {
            get {
                return ResourceManager.GetString("STATUS_CURRENT_TRANSACTION_NOT_VALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Data Error} An error occurred in reading or writing data. (code=0xC000003E).
        /// </summary>
        internal static string STATUS_DATA_ERROR {
            get {
                return ResourceManager.GetString("STATUS_DATA_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Data Late} A data late error occurred. (code=0xC000003D).
        /// </summary>
        internal static string STATUS_DATA_LATE_ERROR {
            get {
                return ResourceManager.GetString("STATUS_DATA_LATE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows discovered a corruption in the file %hs. This file has now been repaired. Check if any data in the file was lost because of the corruption. (code=0x80000803).
        /// </summary>
        internal static string STATUS_DATA_LOST_REPAIR {
            get {
                return ResourceManager.GetString("STATUS_DATA_LOST_REPAIR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Data Not Accepted} The TDI client could not handle the data received during an indication. (code=0xC000021B).
        /// </summary>
        internal static string STATUS_DATA_NOT_ACCEPTED {
            get {
                return ResourceManager.GetString("STATUS_DATA_NOT_ACCEPTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Data Overrun} A data overrun error occurred. (code=0xC000003C).
        /// </summary>
        internal static string STATUS_DATA_OVERRUN {
            get {
                return ResourceManager.GetString("STATUS_DATA_OVERRUN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Alignment Fault A data type misalignment was detected in a load or store instruction. (code=0x80000002).
        /// </summary>
        internal static string STATUS_DATATYPE_MISALIGNMENT {
            get {
                return ResourceManager.GetString("STATUS_DATATYPE_MISALIGNMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Alignment Error A data type misalignment error was detected in a load or store instruction. (code=0xC00002C5).
        /// </summary>
        internal static string STATUS_DATATYPE_MISALIGNMENT_ERROR {
            get {
                return ResourceManager.GetString("STATUS_DATATYPE_MISALIGNMENT_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Unexpected Failure in DebugActiveProcess} An unexpected failure occurred while processing a DebugActiveProcess API request. Choosing OK will terminate the process, and choosing Cancel will ignore the error. (code=0xC0000219).
        /// </summary>
        internal static string STATUS_DEBUG_ATTACH_FAILED {
            get {
                return ResourceManager.GetString("STATUS_DEBUG_ATTACH_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to do an operation on a debug port failed because the port is in the process of being deleted. (code=0xC0000354).
        /// </summary>
        internal static string STATUS_DEBUGGER_INACTIVE {
            get {
                return ResourceManager.GetString("STATUS_DEBUGGER_INACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file decryption attempt failed. (code=0xC000028B).
        /// </summary>
        internal static string STATUS_DECRYPTION_FAILED {
            get {
                return ResourceManager.GetString("STATUS_DECRYPTION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to delay-load a .dll or get a function address in a delay-loaded .dll failed. (code=0xC0000412).
        /// </summary>
        internal static string STATUS_DELAY_LOAD_FAILED {
            get {
                return ResourceManager.GetString("STATUS_DELAY_LOAD_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A non-close operation has been requested of a file object that has a delete pending. (code=0xC0000056).
        /// </summary>
        internal static string STATUS_DELETE_PENDING {
            get {
                return ResourceManager.GetString("STATUS_DELETE_PENDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified medium changer destination element already contains media. (code=0xC0000284).
        /// </summary>
        internal static string STATUS_DESTINATION_ELEMENT_FULL {
            get {
                return ResourceManager.GetString("STATUS_DESTINATION_ELEMENT_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to attach to a device that was already attached to another device. (code=0xC0000038).
        /// </summary>
        internal static string STATUS_DEVICE_ALREADY_ATTACHED {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_ALREADY_ATTACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Device Busy} The device is currently busy. (code=0x80000011).
        /// </summary>
        internal static string STATUS_DEVICE_BUSY {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The I/O device is configured incorrectly or the configuration parameters to the driver are incorrect. (code=0xC0000182).
        /// </summary>
        internal static string STATUS_DEVICE_CONFIGURATION_ERROR {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_CONFIGURATION_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are bad blocks (sectors) on the hard disk. (code=0xC000009C).
        /// </summary>
        internal static string STATUS_DEVICE_DATA_ERROR {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_DATA_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This device does not exist. (code=0xC00000C0).
        /// </summary>
        internal static string STATUS_DEVICE_DOES_NOT_EXIST {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_DOES_NOT_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device has indicated that its door is open. Further operations require it closed and secured. (code=0x80000289).
        /// </summary>
        internal static string STATUS_DEVICE_DOOR_OPEN {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_DOOR_OPEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device encountered an error while applying power or reading the device configuration. This might be caused by a failure of your hardware or by a poor connection. (code=0xC0000366).
        /// </summary>
        internal static string STATUS_DEVICE_ENUMERATION_ERROR {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_ENUMERATION_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The storage device does not support Offload Write. (code=0xC0000463).
        /// </summary>
        internal static string STATUS_DEVICE_FEATURE_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_FEATURE_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is bad cabling, non-termination, or the controller is not able to obtain access to the hard disk. (code=0xC000009D).
        /// </summary>
        internal static string STATUS_DEVICE_NOT_CONNECTED {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_NOT_CONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tape partition information could not be found when loading a tape. (code=0xC0000174).
        /// </summary>
        internal static string STATUS_DEVICE_NOT_PARTITIONED {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_NOT_PARTITIONED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Drive Not Ready} The drive is not ready for use; its door might be open. Check drive %hs and make sure that a disk is inserted and that the drive door is closed. (code=0xC00000A3).
        /// </summary>
        internal static string STATUS_DEVICE_NOT_READY {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Device Offline} The printer has been taken offline. (code=0x80000010).
        /// </summary>
        internal static string STATUS_DEVICE_OFF_LINE {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_OFF_LINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Out of Paper} The printer is out of paper. (code=0x8000000E).
        /// </summary>
        internal static string STATUS_DEVICE_PAPER_EMPTY {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_PAPER_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Device Power Is Off} The printer power has been turned off. (code=0x8000000F).
        /// </summary>
        internal static string STATUS_DEVICE_POWERED_OFF {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_POWERED_OFF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A protocol error was detected between the driver and the device. (code=0xC0000186).
        /// </summary>
        internal static string STATUS_DEVICE_PROTOCOL_ERROR {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_PROTOCOL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device has been removed. (code=0xC00002B6).
        /// </summary>
        internal static string STATUS_DEVICE_REMOVED {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_REMOVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device has indicated that cleaning is necessary. (code=0x80000288).
        /// </summary>
        internal static string STATUS_DEVICE_REQUIRES_CLEANING {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_REQUIRES_CLEANING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data cannot be moved because the source device cannot communicate with the destination device. (code=0xC0000464).
        /// </summary>
        internal static string STATUS_DEVICE_UNREACHABLE {
            get {
                return ResourceManager.GetString("STATUS_DEVICE_UNREACHABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt has been made to open a DFS exit path control file. (code=0xC000009B).
        /// </summary>
        internal static string STATUS_DFS_EXIT_PATH_FOUND {
            get {
                return ResourceManager.GetString("STATUS_DFS_EXIT_PATH_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DFS is unavailable on the contacted server. (code=0xC000026D).
        /// </summary>
        internal static string STATUS_DFS_UNAVAILABLE {
            get {
                return ResourceManager.GetString("STATUS_DFS_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NTFS directory is a reparse point. (code=0xC0000281).
        /// </summary>
        internal static string STATUS_DIRECTORY_IS_A_REPARSE_POINT {
            get {
                return ResourceManager.GetString("STATUS_DIRECTORY_IS_A_REPARSE_POINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that the directory trying to be deleted is not empty. (code=0xC0000101).
        /// </summary>
        internal static string STATUS_DIRECTORY_NOT_EMPTY {
            get {
                return ResourceManager.GetString("STATUS_DIRECTORY_NOT_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified directory does not contain a file system resource manager. (code=0xC0190008).
        /// </summary>
        internal static string STATUS_DIRECTORY_NOT_RM {
            get {
                return ResourceManager.GetString("STATUS_DIRECTORY_NOT_RM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation requires a directory service, and none was available. (code=0xC00002B1).
        /// </summary>
        internal static string STATUS_DIRECTORY_SERVICE_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_DIRECTORY_SERVICE_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Corrupt Disk} The file system structure on the disk is corrupt and unusable. Run the Chkdsk utility on the volume %hs. (code=0xC0000032).
        /// </summary>
        internal static string STATUS_DISK_CORRUPT_ERROR {
            get {
                return ResourceManager.GetString("STATUS_DISK_CORRUPT_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation failed because the disk was full. (code=0xC000007F).
        /// </summary>
        internal static string STATUS_DISK_FULL {
            get {
                return ResourceManager.GetString("STATUS_DISK_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Hard Disk Error} While accessing the hard disk, a disk operation failed even after retries. (code=0xC000016A).
        /// </summary>
        internal static string STATUS_DISK_OPERATION_FAILED {
            get {
                return ResourceManager.GetString("STATUS_DISK_OPERATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation failed because the storage quota was exceeded. (code=0xC0000802).
        /// </summary>
        internal static string STATUS_DISK_QUOTA_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_DISK_QUOTA_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Hard Disk Error} While accessing the hard disk, a recalibrate operation failed, even after retries. (code=0xC0000169).
        /// </summary>
        internal static string STATUS_DISK_RECALIBRATE_FAILED {
            get {
                return ResourceManager.GetString("STATUS_DISK_RECALIBRATE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempted operation required self healing to be enabled. (code=0xC0000800).
        /// </summary>
        internal static string STATUS_DISK_REPAIR_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_DISK_REPAIR_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Hard Disk Error} While accessing the hard disk, a disk controller reset was needed, but even that failed. (code=0xC000016B).
        /// </summary>
        internal static string STATUS_DISK_RESET_FAILED {
            get {
                return ResourceManager.GetString("STATUS_DISK_RESET_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {DLL Initialization Failed} Initialization of the dynamic link library %hs failed. The process is terminating abnormally. (code=0xC0000142).
        /// </summary>
        internal static string STATUS_DLL_INIT_FAILED {
            get {
                return ResourceManager.GetString("STATUS_DLL_INIT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {DLL Initialization Failed} The application failed to initialize because the window station is shutting down. (code=0xC000026B).
        /// </summary>
        internal static string STATUS_DLL_INIT_FAILED_LOGOFF {
            get {
                return ResourceManager.GetString("STATUS_DLL_INIT_FAILED_LOGOFF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The application is loading executable code from the module %hs. This is secure but might be incompatible with previous releases of the operating system. An alternative, %hs, is available. Should the application use the secure module %hs? (code=0x8000002C).
        /// </summary>
        internal static string STATUS_DLL_MIGHT_BE_INCOMPATIBLE {
            get {
                return ResourceManager.GetString("STATUS_DLL_MIGHT_BE_INCOMPATIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The application is attempting to run executable code from the module %hs. This might be insecure. An alternative, %hs, is available. Should the application use the secure module %hs? (code=0x8000002B).
        /// </summary>
        internal static string STATUS_DLL_MIGHT_BE_INSECURE {
            get {
                return ResourceManager.GetString("STATUS_DLL_MIGHT_BE_INSECURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Unable To Locate Component} This application has failed to start because %hs was not found. Reinstalling the application might fix this problem. (code=0xC0000135).
        /// </summary>
        internal static string STATUS_DLL_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_DLL_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A domain controller for this domain was not found. (code=0xC0000233).
        /// </summary>
        internal static string STATUS_DOMAIN_CONTROLLER_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_DOMAIN_CONTROLLER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A domain server has an incorrect configuration. (code=0xC000015E).
        /// </summary>
        internal static string STATUS_DOMAIN_CTRLR_CONFIG_ERROR {
            get {
                return ResourceManager.GetString("STATUS_DOMAIN_CTRLR_CONFIG_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified domain already exists. (code=0xC00000E0).
        /// </summary>
        internal static string STATUS_DOMAIN_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_DOMAIN_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to exceed the limit on the number of domains per server for this release. (code=0xC00000E1).
        /// </summary>
        internal static string STATUS_DOMAIN_LIMIT_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_DOMAIN_LIMIT_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name or SID of the specified domain is inconsistent with the trust information for that domain. (code=0xC000019B).
        /// </summary>
        internal static string STATUS_DOMAIN_TRUST_INCONSISTENT {
            get {
                return ResourceManager.GetString("STATUS_DOMAIN_TRUST_INCONSISTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system detected a possible attempt to compromise security. Ensure that you can contact the server that authenticated you. (code=0xC0000388).
        /// </summary>
        internal static string STATUS_DOWNGRADE_DETECTED {
            get {
                return ResourceManager.GetString("STATUS_DOWNGRADE_DETECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Driver %2 has been blocked from loading. (code=0xC000036C).
        /// </summary>
        internal static string STATUS_DRIVER_BLOCKED {
            get {
                return ResourceManager.GetString("STATUS_DRIVER_BLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Driver %2 has been blocked from loading. (code=0xC000036B).
        /// </summary>
        internal static string STATUS_DRIVER_BLOCKED_CRITICAL {
            get {
                return ResourceManager.GetString("STATUS_DRIVER_BLOCKED_CRITICAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Cancel Timeout} The driver %hs failed to complete a canceled I/O request in the allotted time. (code=0xC000021E).
        /// </summary>
        internal static string STATUS_DRIVER_CANCEL_TIMEOUT {
            get {
                return ResourceManager.GetString("STATUS_DRIVER_CANCEL_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was error [%2] processing the driver database. (code=0xC000036D).
        /// </summary>
        internal static string STATUS_DRIVER_DATABASE_ERROR {
            get {
                return ResourceManager.GetString("STATUS_DRIVER_DATABASE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Driver Entry Point Not Found} The %hs device driver could not locate the entry point %hs in driver %hs. (code=0xC0000263).
        /// </summary>
        internal static string STATUS_DRIVER_ENTRYPOINT_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_DRIVER_ENTRYPOINT_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver could not be loaded because a previous version of the driver is still in memory. (code=0xC000038E).
        /// </summary>
        internal static string STATUS_DRIVER_FAILED_PRIOR_UNLOAD {
            get {
                return ResourceManager.GetString("STATUS_DRIVER_FAILED_PRIOR_UNLOAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {System Standby Failed} The driver %hs does not support standby mode. Updating this driver allows the system to go to standby mode. (code=0xC00002C2).
        /// </summary>
        internal static string STATUS_DRIVER_FAILED_SLEEP {
            get {
                return ResourceManager.GetString("STATUS_DRIVER_FAILED_SLEEP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error was detected between two drivers or within an I/O driver. (code=0xC0000183).
        /// </summary>
        internal static string STATUS_DRIVER_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("STATUS_DRIVER_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Driver Entry Point Not Found} The %hs device driver could not locate the ordinal %ld in driver %hs. (code=0xC0000262).
        /// </summary>
        internal static string STATUS_DRIVER_ORDINAL_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_DRIVER_ORDINAL_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The process hosting the driver for this device has terminated. (code=0xC0000450).
        /// </summary>
        internal static string STATUS_DRIVER_PROCESS_TERMINATED {
            get {
                return ResourceManager.GetString("STATUS_DRIVER_PROCESS_TERMINATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Unable to Load Device Driver} %hs device driver could not be loaded. Error Status was 0x%x. (code=0xC000026C).
        /// </summary>
        internal static string STATUS_DRIVER_UNABLE_TO_LOAD {
            get {
                return ResourceManager.GetString("STATUS_DRIVER_UNABLE_TO_LOAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A device driver is leaking locked I/O pages and is causing system degradation. The system has automatically enabled the tracking code to try and catch the culprit. (code=0x4000002D).
        /// </summary>
        internal static string STATUS_DRIVERS_LEAKING_LOCKED_PAGES {
            get {
                return ResourceManager.GetString("STATUS_DRIVERS_LEAKING_LOCKED_PAGES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A directory service resource limit has been exceeded. (code=0xC00002C1).
        /// </summary>
        internal static string STATUS_DS_ADMIN_LIMIT_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_DS_ADMIN_LIMIT_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An account group cannot have a universal group as a member. (code=0xC0000358).
        /// </summary>
        internal static string STATUS_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER {
            get {
                return ResourceManager.GetString("STATUS_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified directory service attribute or value already exists. (code=0xC00002A4).
        /// </summary>
        internal static string STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attribute type specified to the directory service is not defined. (code=0xC00002A3).
        /// </summary>
        internal static string STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED {
            get {
                return ResourceManager.GetString("STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory service is busy. (code=0xC00002A5).
        /// </summary>
        internal static string STATUS_DS_BUSY {
            get {
                return ResourceManager.GetString("STATUS_DS_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory service detected an attempt to modify the object class of an object. (code=0xC00002AE).
        /// </summary>
        internal static string STATUS_DS_CANT_MOD_OBJ_CLASS {
            get {
                return ResourceManager.GetString("STATUS_DS_CANT_MOD_OBJ_CLASS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot change the primary group ID of a domain controller account. (code=0xC00002D0).
        /// </summary>
        internal static string STATUS_DS_CANT_MOD_PRIMARYGROUPID {
            get {
                return ResourceManager.GetString("STATUS_DS_CANT_MOD_PRIMARYGROUPID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory service can perform the requested operation only on a leaf object. (code=0xC00002AC).
        /// </summary>
        internal static string STATUS_DS_CANT_ON_NON_LEAF {
            get {
                return ResourceManager.GetString("STATUS_DS_CANT_ON_NON_LEAF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory service cannot perform the requested operation on the Relatively Defined Name (RDN) attribute of an object. (code=0xC00002AD).
        /// </summary>
        internal static string STATUS_DS_CANT_ON_RDN {
            get {
                return ResourceManager.GetString("STATUS_DS_CANT_ON_RDN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory service cannot start. (code=0xC00002E1).
        /// </summary>
        internal static string STATUS_DS_CANT_START {
            get {
                return ResourceManager.GetString("STATUS_DS_CANT_START", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while performing a cross domain move operation. (code=0xC00002AF).
        /// </summary>
        internal static string STATUS_DS_CROSS_DOM_MOVE_FAILED {
            get {
                return ResourceManager.GetString("STATUS_DS_CROSS_DOM_MOVE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The domain name of the trusted domain already exists in the forest. (code=0xC000041A).
        /// </summary>
        internal static string STATUS_DS_DOMAIN_NAME_EXISTS_IN_FOREST {
            get {
                return ResourceManager.GetString("STATUS_DS_DOMAIN_NAME_EXISTS_IN_FOREST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory service cannot perform the requested operation because a domain rename operation is in progress. (code=0xC0000801).
        /// </summary>
        internal static string STATUS_DS_DOMAIN_RENAME_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_DS_DOMAIN_RENAME_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested object has a non-unique identifier and cannot be retrieved. (code=0xC0000405).
        /// </summary>
        internal static string STATUS_DS_DUPLICATE_ID_FOUND {
            get {
                return ResourceManager.GetString("STATUS_DS_DUPLICATE_ID_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The flat name of the trusted domain already exists in the forest. (code=0xC000041B).
        /// </summary>
        internal static string STATUS_DS_FLAT_NAME_EXISTS_IN_FOREST {
            get {
                return ResourceManager.GetString("STATUS_DS_FLAT_NAME_EXISTS_IN_FOREST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to contact the global catalog server. (code=0xC00002B0).
        /// </summary>
        internal static string STATUS_DS_GC_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("STATUS_DS_GC_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation can be performed only on a global catalog server. (code=0xC00002E4).
        /// </summary>
        internal static string STATUS_DS_GC_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_DS_GC_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A global group cannot have a cross-domain member. (code=0xC00002DA).
        /// </summary>
        internal static string STATUS_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER {
            get {
                return ResourceManager.GetString("STATUS_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A global group cannot have a local group as a member. (code=0xC00002D7).
        /// </summary>
        internal static string STATUS_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER {
            get {
                return ResourceManager.GetString("STATUS_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A global group cannot have a universal group as a member. (code=0xC00002D8).
        /// </summary>
        internal static string STATUS_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER {
            get {
                return ResourceManager.GetString("STATUS_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The group cannot be converted due to attribute restrictions on the requested group type. (code=0xC0000406).
        /// </summary>
        internal static string STATUS_DS_GROUP_CONVERSION_ERROR {
            get {
                return ResourceManager.GetString("STATUS_DS_GROUP_CONVERSION_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot change to a security-disabled group because primary members are in this group. (code=0xC00002DC).
        /// </summary>
        internal static string STATUS_DS_HAVE_PRIMARY_MEMBERS {
            get {
                return ResourceManager.GetString("STATUS_DS_HAVE_PRIMARY_MEMBERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation could not be performed because the directory service is not the master for that type of operation. (code=0xC00002A9).
        /// </summary>
        internal static string STATUS_DS_INCORRECT_ROLE_OWNER {
            get {
                return ResourceManager.GetString("STATUS_DS_INCORRECT_ROLE_OWNER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory service could not start because of the following error: %hs Error Status: 0x%x. Click OK to shut down this system and restart in Directory Services Restore Mode. Check the event log for more detailed information. (code=0xC00002E2).
        /// </summary>
        internal static string STATUS_DS_INIT_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_DS_INIT_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Directory Services could not start because of the following error: %hs Error Status: 0x%x. Click OK to shut down the system. You can use the recovery console to diagnose the system further. (code=0xC00002EC).
        /// </summary>
        internal static string STATUS_DS_INIT_FAILURE_CONSOLE {
            get {
                return ResourceManager.GetString("STATUS_DS_INIT_FAILURE_CONSOLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attribute syntax specified to the directory service is invalid. (code=0xC00002A2).
        /// </summary>
        internal static string STATUS_DS_INVALID_ATTRIBUTE_SYNTAX {
            get {
                return ResourceManager.GetString("STATUS_DS_INVALID_ATTRIBUTE_SYNTAX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified group type is invalid. (code=0xC00002D4).
        /// </summary>
        internal static string STATUS_DS_INVALID_GROUP_TYPE {
            get {
                return ResourceManager.GetString("STATUS_DS_INVALID_GROUP_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A local group cannot have another cross-domain local group as a member. (code=0xC00002DB).
        /// </summary>
        internal static string STATUS_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER {
            get {
                return ResourceManager.GetString("STATUS_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A local group can only be a member of other local groups in the same domain. (code=0xC00002E5).
        /// </summary>
        internal static string STATUS_DS_LOCAL_MEMBER_OF_LOCAL_ONLY {
            get {
                return ResourceManager.GetString("STATUS_DS_LOCAL_MEMBER_OF_LOCAL_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your computer could not be joined to the domain. You have exceeded the maximum number of computer accounts you are allowed to create in this domain. Contact your system administrator to have this limit reset or increased. (code=0xC00002E7).
        /// </summary>
        internal static string STATUS_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory service evaluated group memberships locally, because it was unable to contact a global catalog server. (code=0x00000121).
        /// </summary>
        internal static string STATUS_DS_MEMBERSHIP_EVALUATED_LOCALLY {
            get {
                return ResourceManager.GetString("STATUS_DS_MEMBERSHIP_EVALUATED_LOCALLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested name already exists as a unique identifier. (code=0xC0000404).
        /// </summary>
        internal static string STATUS_DS_NAME_NOT_UNIQUE {
            get {
                return ResourceManager.GetString("STATUS_DS_NAME_NOT_UNIQUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified directory service attribute or value does not exist. (code=0xC00002A1).
        /// </summary>
        internal static string STATUS_DS_NO_ATTRIBUTE_OR_VALUE {
            get {
                return ResourceManager.GetString("STATUS_DS_NO_ATTRIBUTE_OR_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Foreign security principals cannot be members of universal groups. (code=0xC00002E6).
        /// </summary>
        internal static string STATUS_DS_NO_FPO_IN_UNIVERSAL_GROUPS {
            get {
                return ResourceManager.GetString("STATUS_DS_NO_FPO_IN_UNIVERSAL_GROUPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory service has exhausted the pool of relative identifiers. (code=0xC00002A8).
        /// </summary>
        internal static string STATUS_DS_NO_MORE_RIDS {
            get {
                return ResourceManager.GetString("STATUS_DS_NO_MORE_RIDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In a mixed domain, no nesting of a global group if the group is security enabled. (code=0xC00002D5).
        /// </summary>
        internal static string STATUS_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN {
            get {
                return ResourceManager.GetString("STATUS_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In a mixed domain, cannot nest local groups with other local groups, if the group is security enabled. (code=0xC00002D6).
        /// </summary>
        internal static string STATUS_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN {
            get {
                return ResourceManager.GetString("STATUS_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory service was unable to allocate a relative identifier. (code=0xC00002A7).
        /// </summary>
        internal static string STATUS_DS_NO_RIDS_ALLOCATED {
            get {
                return ResourceManager.GetString("STATUS_DS_NO_RIDS_ALLOCATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation did not satisfy one or more constraints that are associated with the class of the object. (code=0xC00002AB).
        /// </summary>
        internal static string STATUS_DS_OBJ_CLASS_VIOLATION {
            get {
                return ResourceManager.GetString("STATUS_DS_OBJ_CLASS_VIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OID mapped groups cannot have members. (code=0xC000A087).
        /// </summary>
        internal static string STATUS_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS {
            get {
                return ResourceManager.GetString("STATUS_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified OID cannot be found. (code=0xC000A088).
        /// </summary>
        internal static string STATUS_DS_OID_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_DS_OID_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory service was unable to initialize the subsystem that allocates relative identifiers. (code=0xC00002AA).
        /// </summary>
        internal static string STATUS_DS_RIDMGR_INIT_ERROR {
            get {
                return ResourceManager.GetString("STATUS_DS_RIDMGR_INIT_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security Accounts Manager initialization failed because of the following error: %hs Error Status: 0x%x. Click OK to shut down this system and restart in Directory Services Restore Mode. Check the event log for more detailed information. (code=0xC00002CB).
        /// </summary>
        internal static string STATUS_DS_SAM_INIT_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_DS_SAM_INIT_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security Accounts Manager initialization failed because of the following error: %hs Error Status: 0x%x. Click OK to shut down the system. You can use the recovery console to diagnose the system further. (code=0xC00002ED).
        /// </summary>
        internal static string STATUS_DS_SAM_INIT_FAILURE_CONSOLE {
            get {
                return ResourceManager.GetString("STATUS_DS_SAM_INIT_FAILURE_CONSOLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only an administrator can modify the membership list of an administrative group. (code=0xC00002CD).
        /// </summary>
        internal static string STATUS_DS_SENSITIVE_GROUP_VIOLATION {
            get {
                return ResourceManager.GetString("STATUS_DS_SENSITIVE_GROUP_VIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory service is shutting down. (code=0x40000370).
        /// </summary>
        internal static string STATUS_DS_SHUTTING_DOWN {
            get {
                return ResourceManager.GetString("STATUS_DS_SHUTTING_DOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source object&apos;s SID already exists in destination forest. (code=0xC0000419).
        /// </summary>
        internal static string STATUS_DS_SRC_SID_EXISTS_IN_FOREST {
            get {
                return ResourceManager.GetString("STATUS_DS_SRC_SID_EXISTS_IN_FOREST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory service is unavailable. (code=0xC00002A6).
        /// </summary>
        internal static string STATUS_DS_UNAVAILABLE {
            get {
                return ResourceManager.GetString("STATUS_DS_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A universal group cannot have a local group as a member. (code=0xC00002D9).
        /// </summary>
        internal static string STATUS_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER {
            get {
                return ResourceManager.GetString("STATUS_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This version of Windows is not compatible with the behavior version of the directory forest, domain, or domain controller. (code=0xC0000355).
        /// </summary>
        internal static string STATUS_DS_VERSION_CHECK_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_DS_VERSION_CHECK_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A duplicate name exists on the network. (code=0xC00000BD).
        /// </summary>
        internal static string STATUS_DUPLICATE_NAME {
            get {
                return ResourceManager.GetString("STATUS_DUPLICATE_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to insert the ID in the index failed because the ID is already in the index. (code=0xC000022A).
        /// </summary>
        internal static string STATUS_DUPLICATE_OBJECTID {
            get {
                return ResourceManager.GetString("STATUS_DUPLICATE_OBJECTID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EA is corrupt and cannot be read. (code=0xC0000053).
        /// </summary>
        internal static string STATUS_EA_CORRUPT_ERROR {
            get {
                return ResourceManager.GetString("STATUS_EA_CORRUPT_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Inconsistent EA List} The extended attribute (EA) list is inconsistent. (code=0x80000014).
        /// </summary>
        internal static string STATUS_EA_LIST_INCONSISTENT {
            get {
                return ResourceManager.GetString("STATUS_EA_LIST_INCONSISTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An EA operation failed because the EA set is too large. (code=0xC0000050).
        /// </summary>
        internal static string STATUS_EA_TOO_LARGE {
            get {
                return ResourceManager.GetString("STATUS_EA_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation involving EAs failed because the file system does not support EAs. (code=0xC000004F).
        /// </summary>
        internal static string STATUS_EAS_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_EAS_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The encryption algorithm that is used on the source file needs a bigger key buffer than the one that is used on the destination file. (code=0xC0000352).
        /// </summary>
        internal static string STATUS_EFS_ALG_BLOB_TOO_BIG {
            get {
                return ResourceManager.GetString("STATUS_EFS_ALG_BLOB_TOO_BIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The encryption operation could not be completed because a transaction is active. (code=0xC019003E).
        /// </summary>
        internal static string STATUS_EFS_NOT_ALLOWED_IN_TRANSACTION {
            get {
                return ResourceManager.GetString("STATUS_EFS_NOT_ALLOWED_IN_TRANSACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation requires elevation. (code=0xC000042C).
        /// </summary>
        internal static string STATUS_ELEVATION_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_ELEVATION_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempted write operation encountered a write already in progress for some portion of the range. (code=0xC0000433).
        /// </summary>
        internal static string STATUS_ENCOUNTERED_WRITE_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_ENCOUNTERED_WRITE_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file encryption attempt failed. (code=0xC000028A).
        /// </summary>
        internal static string STATUS_ENCRYPTION_FAILED {
            get {
                return ResourceManager.GetString("STATUS_ENCRYPTION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The end-of-file marker has been reached. There is no valid data in the file beyond this marker. (code=0xC0000011).
        /// </summary>
        internal static string STATUS_END_OF_FILE {
            get {
                return ResourceManager.GetString("STATUS_END_OF_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {End of Media} The end of the media was encountered. (code=0x8000001E).
        /// </summary>
        internal static string STATUS_END_OF_MEDIA {
            get {
                return ResourceManager.GetString("STATUS_END_OF_MEDIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified enlistment was unable to be opened because it was not found. (code=0xC0190050).
        /// </summary>
        internal static string STATUS_ENLISTMENT_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_ENLISTMENT_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request was rejected because the enlistment in question is not a superior enlistment. (code=0xC0190033).
        /// </summary>
        internal static string STATUS_ENLISTMENT_NOT_SUPERIOR {
            get {
                return ResourceManager.GetString("STATUS_ENLISTMENT_NOT_SUPERIOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Entry Point Not Found} The procedure entry point %hs could not be located in the dynamic link library %hs. (code=0xC0000139).
        /// </summary>
        internal static string STATUS_ENTRYPOINT_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_ENTRYPOINT_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The physical end of tape was detected. (code=0xC0000177).
        /// </summary>
        internal static string STATUS_EOM_OVERFLOW {
            get {
                return ResourceManager.GetString("STATUS_EOM_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Windows Evaluation Notification} The evaluation period for this installation of Windows has expired. This system will shutdown in 1 hour. To restore access to this installation of Windows, upgrade this installation by using a licensed distribution of this product. (code=0xC0000268).
        /// </summary>
        internal static string STATUS_EVALUATION_EXPIRATION {
            get {
                return ResourceManager.GetString("STATUS_EVALUATION_EXPIRATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {TDI Event Done} The TDI indication has completed successfully. (code=0x40000012).
        /// </summary>
        internal static string STATUS_EVENT_DONE {
            get {
                return ResourceManager.GetString("STATUS_EVENT_DONE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {TDI Event Pending} The TDI indication has entered the pending state. (code=0x40000013).
        /// </summary>
        internal static string STATUS_EVENT_PENDING {
            get {
                return ResourceManager.GetString("STATUS_EVENT_PENDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Eventlog log file could be opened. The Eventlog service did not start. (code=0xC000018F).
        /// </summary>
        internal static string STATUS_EVENTLOG_CANT_START {
            get {
                return ResourceManager.GetString("STATUS_EVENTLOG_CANT_START", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log file has changed between reads. (code=0xC0000197).
        /// </summary>
        internal static string STATUS_EVENTLOG_FILE_CHANGED {
            get {
                return ResourceManager.GetString("STATUS_EVENTLOG_FILE_CHANGED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Eventlog log file is corrupt. (code=0xC000018E).
        /// </summary>
        internal static string STATUS_EVENTLOG_FILE_CORRUPT {
            get {
                return ResourceManager.GetString("STATUS_EVENTLOG_FILE_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The handle is no longer properly associated with its transaction.  It might have been opened in a transactional resource manager that was subsequently forced to restart.  Please close the handle and open a new one. (code=0xC0190060).
        /// </summary>
        internal static string STATUS_EXPIRED_HANDLE {
            get {
                return ResourceManager.GetString("STATUS_EXPIRED_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Too Much Information} The specified access control list (ACL) contained more information than was expected. (code=0x80000017).
        /// </summary>
        internal static string STATUS_EXTRANEOUS_INFORMATION {
            get {
                return ResourceManager.GetString("STATUS_EXTRANEOUS_INFORMATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A consistency check failed. (code=0xC0000229).
        /// </summary>
        internal static string STATUS_FAIL_CHECK {
            get {
                return ResourceManager.GetString("STATUS_FAIL_CHECK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A fail fast exception occurred. Exception handlers will not be invoked and the process will be terminated immediately. (code=0xC0000602).
        /// </summary>
        internal static string STATUS_FAIL_FAST_EXCEPTION {
            get {
                return ResourceManager.GetString("STATUS_FAIL_FAST_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver was not loaded because it failed its initialization call. (code=0xC0000365).
        /// </summary>
        internal static string STATUS_FAILED_DRIVER_ENTRY {
            get {
                return ResourceManager.GetString("STATUS_FAILED_DRIVER_ENTRY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system was not able to allocate enough memory to perform a stack switch. (code=0xC0000373).
        /// </summary>
        internal static string STATUS_FAILED_STACK_SWITCH {
            get {
                return ResourceManager.GetString("STATUS_FAILED_STACK_SWITCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Fatal Application Exit} %hs (code=0x40000015).
        /// </summary>
        internal static string STATUS_FATAL_APP_EXIT {
            get {
                return ResourceManager.GetString("STATUS_FATAL_APP_EXIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file is checked out or locked for editing by another user. (code=0xC0000901).
        /// </summary>
        internal static string STATUS_FILE_CHECKED_OUT {
            get {
                return ResourceManager.GetString("STATUS_FILE_CHECKED_OUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An I/O request other than close and several other special case operations was attempted using a file object that had already been closed. (code=0xC0000128).
        /// </summary>
        internal static string STATUS_FILE_CLOSED {
            get {
                return ResourceManager.GetString("STATUS_FILE_CLOSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Corrupt File} The file or directory %hs is corrupt and unreadable. Run the Chkdsk utility. (code=0xC0000102).
        /// </summary>
        internal static string STATUS_FILE_CORRUPT_ERROR {
            get {
                return ResourceManager.GetString("STATUS_FILE_CORRUPT_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An I/O request other than close was performed on a file after it was deleted, which can only happen to a request that did not complete before the last handle was closed via NtClose. (code=0xC0000123).
        /// </summary>
        internal static string STATUS_FILE_DELETED {
            get {
                return ResourceManager.GetString("STATUS_FILE_DELETED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file is encrypted and the user does not have the ability to decrypt it. (code=0xC0000293).
        /// </summary>
        internal static string STATUS_FILE_ENCRYPTED {
            get {
                return ResourceManager.GetString("STATUS_FILE_ENCRYPTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file has been closed by another process. (code=0xC00000B6).
        /// </summary>
        internal static string STATUS_FILE_FORCED_CLOSED {
            get {
                return ResourceManager.GetString("STATUS_FILE_FORCED_CLOSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file cannot be opened in a transaction because its identity depends on the outcome of an unresolved transaction. (code=0xC0190036).
        /// </summary>
        internal static string STATUS_FILE_IDENTITY_NOT_PERSISTENT {
            get {
                return ResourceManager.GetString("STATUS_FILE_IDENTITY_NOT_PERSISTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The volume for a file has been externally altered such that the opened file is no longer valid. (code=0xC0000098).
        /// </summary>
        internal static string STATUS_FILE_INVALID {
            get {
                return ResourceManager.GetString("STATUS_FILE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file that was specified as a target is a directory, and the caller specified that it could be anything but a directory. (code=0xC00000BA).
        /// </summary>
        internal static string STATUS_FILE_IS_A_DIRECTORY {
            get {
                return ResourceManager.GetString("STATUS_FILE_IS_A_DIRECTORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file has been relocated to offline storage. (code=0xC0000267).
        /// </summary>
        internal static string STATUS_FILE_IS_OFFLINE {
            get {
                return ResourceManager.GetString("STATUS_FILE_IS_OFFLINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A requested read/write cannot be granted due to a conflicting file lock. (code=0xC0000054).
        /// </summary>
        internal static string STATUS_FILE_LOCK_CONFLICT {
            get {
                return ResourceManager.GetString("STATUS_FILE_LOCK_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file was locked and all users of the file can only read. (code=0x0000012A).
        /// </summary>
        internal static string STATUS_FILE_LOCKED_WITH_ONLY_READERS {
            get {
                return ResourceManager.GetString("STATUS_FILE_LOCKED_WITH_ONLY_READERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file was locked and at least one user of the file can write. (code=0x0000012B).
        /// </summary>
        internal static string STATUS_FILE_LOCKED_WITH_WRITERS {
            get {
                return ResourceManager.GetString("STATUS_FILE_LOCKED_WITH_WRITERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file is temporarily unavailable. (code=0xC0000467).
        /// </summary>
        internal static string STATUS_FILE_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("STATUS_FILE_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file is not encrypted. (code=0xC0000291).
        /// </summary>
        internal static string STATUS_FILE_NOT_ENCRYPTED {
            get {
                return ResourceManager.GetString("STATUS_FILE_NOT_ENCRYPTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file has been renamed and thus cannot be modified. (code=0xC00000D5).
        /// </summary>
        internal static string STATUS_FILE_RENAMED {
            get {
                return ResourceManager.GetString("STATUS_FILE_RENAMED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation could not be completed due to a file system limitation. (code=0xC0000427).
        /// </summary>
        internal static string STATUS_FILE_SYSTEM_LIMITATION {
            get {
                return ResourceManager.GetString("STATUS_FILE_SYSTEM_LIMITATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file size exceeds the limit allowed and cannot be saved. (code=0xC0000904).
        /// </summary>
        internal static string STATUS_FILE_TOO_LARGE {
            get {
                return ResourceManager.GetString("STATUS_FILE_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Filemark Found} A filemark was detected. (code=0x8000001B).
        /// </summary>
        internal static string STATUS_FILEMARK_DETECTED {
            get {
                return ResourceManager.GetString("STATUS_FILEMARK_DETECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user attempted to force close the files on a redirected drive, but there were opened files on the drive, and the user did not specify a sufficient level of force. (code=0xC0000107).
        /// </summary>
        internal static string STATUS_FILES_OPEN {
            get {
                return ResourceManager.GetString("STATUS_FILES_OPEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows has detected that the system firmware (BIOS) was updated [previous firmware date = %2, current firmware date %3]. (code=0x4000002C).
        /// </summary>
        internal static string STATUS_FIRMWARE_UPDATED {
            get {
                return ResourceManager.GetString("STATUS_FIRMWARE_UPDATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Floating-point denormal operand. (code=0xC000008D).
        /// </summary>
        internal static string STATUS_FLOAT_DENORMAL_OPERAND {
            get {
                return ResourceManager.GetString("STATUS_FLOAT_DENORMAL_OPERAND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Floating-point division by zero. (code=0xC000008E).
        /// </summary>
        internal static string STATUS_FLOAT_DIVIDE_BY_ZERO {
            get {
                return ResourceManager.GetString("STATUS_FLOAT_DIVIDE_BY_ZERO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Floating-point inexact result. (code=0xC000008F).
        /// </summary>
        internal static string STATUS_FLOAT_INEXACT_RESULT {
            get {
                return ResourceManager.GetString("STATUS_FLOAT_INEXACT_RESULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Floating-point invalid operation. (code=0xC0000090).
        /// </summary>
        internal static string STATUS_FLOAT_INVALID_OPERATION {
            get {
                return ResourceManager.GetString("STATUS_FLOAT_INVALID_OPERATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Multiple floating-point faults. (code=0xC00002B4).
        /// </summary>
        internal static string STATUS_FLOAT_MULTIPLE_FAULTS {
            get {
                return ResourceManager.GetString("STATUS_FLOAT_MULTIPLE_FAULTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Multiple floating-point traps. (code=0xC00002B5).
        /// </summary>
        internal static string STATUS_FLOAT_MULTIPLE_TRAPS {
            get {
                return ResourceManager.GetString("STATUS_FLOAT_MULTIPLE_TRAPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Floating-point overflow. (code=0xC0000091).
        /// </summary>
        internal static string STATUS_FLOAT_OVERFLOW {
            get {
                return ResourceManager.GetString("STATUS_FLOAT_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Floating-point stack check. (code=0xC0000092).
        /// </summary>
        internal static string STATUS_FLOAT_STACK_CHECK {
            get {
                return ResourceManager.GetString("STATUS_FLOAT_STACK_CHECK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Floating-point underflow. (code=0xC0000093).
        /// </summary>
        internal static string STATUS_FLOAT_UNDERFLOW {
            get {
                return ResourceManager.GetString("STATUS_FLOAT_UNDERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I/O was attempted on a section object that has been floated as a result of a transaction ending. There is no valid data. (code=0xC019004B).
        /// </summary>
        internal static string STATUS_FLOATED_SECTION {
            get {
                return ResourceManager.GetString("STATUS_FLOATED_SECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Floppy Disk Error} While accessing a floppy-disk, the controller returned inconsistent results via its registers. (code=0xC0000168).
        /// </summary>
        internal static string STATUS_FLOPPY_BAD_REGISTERS {
            get {
                return ResourceManager.GetString("STATUS_FLOPPY_BAD_REGISTERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Floppy Disk Error} While accessing a floppy disk, an ID address mark was not found. (code=0xC0000165).
        /// </summary>
        internal static string STATUS_FLOPPY_ID_MARK_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_FLOPPY_ID_MARK_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Floppy Disk Error} The floppy disk controller reported an error that is not recognized by the floppy disk driver. (code=0xC0000167).
        /// </summary>
        internal static string STATUS_FLOPPY_UNKNOWN_ERROR {
            get {
                return ResourceManager.GetString("STATUS_FLOPPY_UNKNOWN_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The paging file cannot be created on a floppy disk. (code=0xC0000164).
        /// </summary>
        internal static string STATUS_FLOPPY_VOLUME {
            get {
                return ResourceManager.GetString("STATUS_FLOPPY_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Floppy Disk Error} While accessing a floppy disk, the track address from the sector ID field was found to be different from the track address that is maintained by the controller. (code=0xC0000166).
        /// </summary>
        internal static string STATUS_FLOPPY_WRONG_CYLINDER {
            get {
                return ResourceManager.GetString("STATUS_FLOPPY_WRONG_CYLINDER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified transaction context is already enlisted in a transaction. (code=0xC01C001B).
        /// </summary>
        internal static string STATUS_FLT_ALREADY_ENLISTED {
            get {
                return ResourceManager.GetString("STATUS_FLT_ALREADY_ENLISTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Buffer too small} The buffer is too small to contain the entry. No information has been written to the buffer. (code=0x801C0001).
        /// </summary>
        internal static string STATUS_FLT_BUFFER_TOO_SMALL {
            get {
                return ResourceManager.GetString("STATUS_FLT_BUFFER_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callback data queue has been disabled. (code=0xC01C000E).
        /// </summary>
        internal static string STATUS_FLT_CBDQ_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_FLT_CBDQ_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No registered context allocation definition was found for the given request. (code=0xC01C0016).
        /// </summary>
        internal static string STATUS_FLT_CONTEXT_ALLOCATION_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_FLT_CONTEXT_ALLOCATION_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A context is already defined for this object. (code=0xC01C0002).
        /// </summary>
        internal static string STATUS_FLT_CONTEXT_ALREADY_DEFINED {
            get {
                return ResourceManager.GetString("STATUS_FLT_CONTEXT_ALREADY_DEFINED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified context is already attached to another object. (code=0xC01C001C).
        /// </summary>
        internal static string STATUS_FLT_CONTEXT_ALREADY_LINKED {
            get {
                return ResourceManager.GetString("STATUS_FLT_CONTEXT_ALREADY_LINKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object specified for this action is in the process of being deleted; therefore, the action requested cannot be completed at this time. (code=0xC01C000B).
        /// </summary>
        internal static string STATUS_FLT_DELETING_OBJECT {
            get {
                return ResourceManager.GetString("STATUS_FLT_DELETING_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is an internal error code used by the filter manager to determine if a fast I/O operation should be forced down the input/output request packet (IRP) path. Minifilters should never return this value. (code=0xC01C0004).
        /// </summary>
        internal static string STATUS_FLT_DISALLOW_FAST_IO {
            get {
                return ResourceManager.GetString("STATUS_FLT_DISALLOW_FAST_IO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not attach the filter to the volume at this time. (code=0xC01C000F).
        /// </summary>
        internal static string STATUS_FLT_DO_NOT_ATTACH {
            get {
                return ResourceManager.GetString("STATUS_FLT_DO_NOT_ATTACH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not detach the filter from the volume at this time. (code=0xC01C0010).
        /// </summary>
        internal static string STATUS_FLT_DO_NOT_DETACH {
            get {
                return ResourceManager.GetString("STATUS_FLT_DO_NOT_DETACH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A duplicate handler definition has been provided for an operation. (code=0xC01C000D).
        /// </summary>
        internal static string STATUS_FLT_DUPLICATE_ENTRY {
            get {
                return ResourceManager.GetString("STATUS_FLT_DUPLICATE_ENTRY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system could not find the filter specified. (code=0xC01C0013).
        /// </summary>
        internal static string STATUS_FLT_FILTER_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_FLT_FILTER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filter is not ready for attachment to volumes because it has not finished initializing (FltStartFiltering has not been called). (code=0xC01C0008).
        /// </summary>
        internal static string STATUS_FLT_FILTER_NOT_READY {
            get {
                return ResourceManager.GetString("STATUS_FLT_FILTER_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An instance already exists at this altitude on the volume specified. (code=0xC01C0011).
        /// </summary>
        internal static string STATUS_FLT_INSTANCE_ALTITUDE_COLLISION {
            get {
                return ResourceManager.GetString("STATUS_FLT_INSTANCE_ALTITUDE_COLLISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An instance already exists with this name on the volume specified. (code=0xC01C0012).
        /// </summary>
        internal static string STATUS_FLT_INSTANCE_NAME_COLLISION {
            get {
                return ResourceManager.GetString("STATUS_FLT_INSTANCE_NAME_COLLISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system could not find the instance specified. (code=0xC01C0015).
        /// </summary>
        internal static string STATUS_FLT_INSTANCE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_FLT_INSTANCE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Filter Manager had an internal error from which it cannot recover; therefore, the operation has failed. This is usually the result of a filter returning an invalid value from a pre-operation callback. (code=0xC01C000A).
        /// </summary>
        internal static string STATUS_FLT_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("STATUS_FLT_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asynchronous requests are not valid for this operation. (code=0xC01C0003).
        /// </summary>
        internal static string STATUS_FLT_INVALID_ASYNCHRONOUS_REQUEST {
            get {
                return ResourceManager.GetString("STATUS_FLT_INVALID_ASYNCHRONOUS_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was specified during context registration. (code=0xC01C0017).
        /// </summary>
        internal static string STATUS_FLT_INVALID_CONTEXT_REGISTRATION {
            get {
                return ResourceManager.GetString("STATUS_FLT_INVALID_CONTEXT_REGISTRATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid name request was made. The name requested cannot be retrieved at this time. (code=0xC01C0005).
        /// </summary>
        internal static string STATUS_FLT_INVALID_NAME_REQUEST {
            get {
                return ResourceManager.GetString("STATUS_FLT_INVALID_NAME_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IO was completed by a filter. (code=0x001C0001).
        /// </summary>
        internal static string STATUS_FLT_IO_COMPLETE {
            get {
                return ResourceManager.GetString("STATUS_FLT_IO_COMPLETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A nonpaged pool must be used for this type of context. (code=0xC01C000C).
        /// </summary>
        internal static string STATUS_FLT_MUST_BE_NONPAGED_POOL {
            get {
                return ResourceManager.GetString("STATUS_FLT_MUST_BE_NONPAGED_POOL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name requested was not found in the Filter Manager name cache and could not be retrieved from the file system. (code=0xC01C0018).
        /// </summary>
        internal static string STATUS_FLT_NAME_CACHE_MISS {
            get {
                return ResourceManager.GetString("STATUS_FLT_NAME_CACHE_MISS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested device object does not exist for the given volume. (code=0xC01C0019).
        /// </summary>
        internal static string STATUS_FLT_NO_DEVICE_OBJECT {
            get {
                return ResourceManager.GetString("STATUS_FLT_NO_DEVICE_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A handler was not defined by the filter for this operation. (code=0xC01C0001).
        /// </summary>
        internal static string STATUS_FLT_NO_HANDLER_DEFINED {
            get {
                return ResourceManager.GetString("STATUS_FLT_NO_HANDLER_DEFINED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No waiter is present for the filter&apos;s reply to this message. (code=0xC01C0020).
        /// </summary>
        internal static string STATUS_FLT_NO_WAITER_FOR_REPLY {
            get {
                return ResourceManager.GetString("STATUS_FLT_NO_WAITER_FOR_REPLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Filter Manager was not initialized when a filter tried to register. Make sure that the Filter Manager is loaded as a driver. (code=0xC01C0007).
        /// </summary>
        internal static string STATUS_FLT_NOT_INITIALIZED {
            get {
                return ResourceManager.GetString("STATUS_FLT_NOT_INITIALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Posting this operation to a worker thread for further processing is not safe at this time because it could lead to a system deadlock. (code=0xC01C0006).
        /// </summary>
        internal static string STATUS_FLT_NOT_SAFE_TO_POST_OPERATION {
            get {
                return ResourceManager.GetString("STATUS_FLT_NOT_SAFE_TO_POST_OPERATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filter must clean up any operation-specific context at this time because it is being removed from the system before the operation is completed by the lower drivers. (code=0xC01C0009).
        /// </summary>
        internal static string STATUS_FLT_POST_OPERATION_CLEANUP {
            get {
                return ResourceManager.GetString("STATUS_FLT_POST_OPERATION_CLEANUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified volume is already mounted. (code=0xC01C001A).
        /// </summary>
        internal static string STATUS_FLT_VOLUME_ALREADY_MOUNTED {
            get {
                return ResourceManager.GetString("STATUS_FLT_VOLUME_ALREADY_MOUNTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system could not find the volume specified. (code=0xC01C0014).
        /// </summary>
        internal static string STATUS_FLT_VOLUME_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_FLT_VOLUME_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access Denied. Before opening files in this location, you must first browse to the e.g. site and select the option to log on automatically. (code=0xC0000905).
        /// </summary>
        internal static string STATUS_FORMS_AUTH_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_FORMS_AUTH_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to find the object found an object on the volume that matches by ID; however, it is out of the scope of the handle that is used for the operation. (code=0xC000022E).
        /// </summary>
        internal static string STATUS_FOUND_OUT_OF_SCOPE {
            get {
                return ResourceManager.GetString("STATUS_FOUND_OUT_OF_SCOPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Virtual memory cannot be freed because the base address is not the base of the region and a region size of zero was specified. (code=0xC000009F).
        /// </summary>
        internal static string STATUS_FREE_VM_NOT_AT_BASE {
            get {
                return ResourceManager.GetString("STATUS_FREE_VM_NOT_AT_BASE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A volume has been accessed for which a file system driver is required that has not yet been loaded. (code=0xC000019C).
        /// </summary>
        internal static string STATUS_FS_DRIVER_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_FS_DRIVER_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A file system or file system filter driver has successfully completed an FsFilter operation. (code=0x00000126).
        /// </summary>
        internal static string STATUS_FSFILTER_OP_COMPLETED_SUCCESSFULLY {
            get {
                return ResourceManager.GetString("STATUS_FSFILTER_OP_COMPLETED_SUCCESSFULLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to explicitly access the secondary copy of information via a device control to the fault tolerance driver and the secondary copy is not present in the system. (code=0xC000015F).
        /// </summary>
        internal static string STATUS_FT_MISSING_MEMBER {
            get {
                return ResourceManager.GetString("STATUS_FT_MISSING_MEMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {FT Orphaning} A disk that is part of a fault-tolerant volume can no longer be accessed. (code=0xC000016D).
        /// </summary>
        internal static string STATUS_FT_ORPHANING {
            get {
                return ResourceManager.GetString("STATUS_FT_ORPHANING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Redundant Read} To satisfy a read request, the Windows NT operating system fault-tolerant file system successfully read the requested data from a redundant copy. This was done because the file system encountered a failure on a member of the fault-tolerant volume but was unable to reassign the failing area of the device. (code=0x4000000A).
        /// </summary>
        internal static string STATUS_FT_READ_RECOVERY_FROM_BACKUP {
            get {
                return ResourceManager.GetString("STATUS_FT_READ_RECOVERY_FROM_BACKUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Redundant Write} To satisfy a write request, the Windows NT fault-tolerant file system successfully wrote a redundant copy of the information. This was done because the file system encountered a failure on a member of the fault-tolerant volume but was unable to reassign the failing area of the device. (code=0x4000000B).
        /// </summary>
        internal static string STATUS_FT_WRITE_RECOVERY {
            get {
                return ResourceManager.GetString("STATUS_FT_WRITE_RECOVERY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation cannot be performed in full-screen mode. (code=0xC0000159).
        /// </summary>
        internal static string STATUS_FULLSCREEN_MODE {
            get {
                return ResourceManager.GetString("STATUS_FULLSCREEN_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested action was denied by the FVE control engine. (code=0xC0210009).
        /// </summary>
        internal static string STATUS_FVE_ACTION_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("STATUS_FVE_ACTION_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A boot application hash does not match the hash computed when BitLocker was turned on. (code=0xC021001B).
        /// </summary>
        internal static string STATUS_FVE_AUTH_INVALID_APPLICATION {
            get {
                return ResourceManager.GetString("STATUS_FVE_AUTH_INVALID_APPLICATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Boot Configuration Data (BCD) settings are not supported or have changed because BitLocker was enabled. (code=0xC021001C).
        /// </summary>
        internal static string STATUS_FVE_AUTH_INVALID_CONFIG {
            get {
                return ResourceManager.GetString("STATUS_FVE_AUTH_INVALID_CONFIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data supplied is malformed. (code=0xC021000A).
        /// </summary>
        internal static string STATUS_FVE_BAD_DATA {
            get {
                return ResourceManager.GetString("STATUS_FVE_BAD_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The control block for the encrypted volume is not valid. (code=0xC0210002).
        /// </summary>
        internal static string STATUS_FVE_BAD_INFORMATION {
            get {
                return ResourceManager.GetString("STATUS_FVE_BAD_INFORMATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The metadata disk region pointer is incorrect. (code=0xC021001F).
        /// </summary>
        internal static string STATUS_FVE_BAD_METADATA_POINTER {
            get {
                return ResourceManager.GetString("STATUS_FVE_BAD_METADATA_POINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A read operation failed while converting the volume. (code=0xC021000D).
        /// </summary>
        internal static string STATUS_FVE_CONV_READ_ERROR {
            get {
                return ResourceManager.GetString("STATUS_FVE_CONV_READ_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bitlocker Drive Encryption failed to recover from aborted conversion. This could be due to either all conversion logs being corrupted or the media being write-protected. (code=0xC0210028).
        /// </summary>
        internal static string STATUS_FVE_CONV_RECOVERY_FAILED {
            get {
                return ResourceManager.GetString("STATUS_FVE_CONV_RECOVERY_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A write operation failed while converting the volume. (code=0xC021000E).
        /// </summary>
        internal static string STATUS_FVE_CONV_WRITE_ERROR {
            get {
                return ResourceManager.GetString("STATUS_FVE_CONV_WRITE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boot debugging is enabled. Run Windows Boot Configuration Data Store Editor (bcdedit.exe) to turn it off. (code=0xC021001D).
        /// </summary>
        internal static string STATUS_FVE_DEBUGGER_ENABLED {
            get {
                return ResourceManager.GetString("STATUS_FVE_DEBUGGER_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BitLocker encryption key could not be obtained. (code=0xC021001E).
        /// </summary>
        internal static string STATUS_FVE_DRY_RUN_FAILED {
            get {
                return ResourceManager.GetString("STATUS_FVE_DRY_RUN_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BitLocker recovery authentication failed. (code=0xC0210011).
        /// </summary>
        internal static string STATUS_FVE_FAILED_AUTHENTICATION {
            get {
                return ResourceManager.GetString("STATUS_FVE_FAILED_AUTHENTICATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file system is inconsistent. Run the Check Disk utility. (code=0xC0210005).
        /// </summary>
        internal static string STATUS_FVE_FAILED_BAD_FS {
            get {
                return ResourceManager.GetString("STATUS_FVE_FAILED_BAD_FS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The volume encryption algorithm cannot be used on this sector size. (code=0xC0210010).
        /// </summary>
        internal static string STATUS_FVE_FAILED_SECTOR_SIZE {
            get {
                return ResourceManager.GetString("STATUS_FVE_FAILED_SECTOR_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The partition cannot be encrypted because the file system is not supported. (code=0xC0210004).
        /// </summary>
        internal static string STATUS_FVE_FAILED_WRONG_FS {
            get {
                return ResourceManager.GetString("STATUS_FVE_FAILED_WRONG_FS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed while a file system is mounted on the volume. (code=0xC0210007).
        /// </summary>
        internal static string STATUS_FVE_FS_MOUNTED {
            get {
                return ResourceManager.GetString("STATUS_FVE_FS_MOUNTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file system does not extend to the end of the volume. (code=0xC0210006).
        /// </summary>
        internal static string STATUS_FVE_FS_NOT_EXTENDED {
            get {
                return ResourceManager.GetString("STATUS_FVE_FS_NOT_EXTENDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BitLocker startup key or recovery password file is corrupt or invalid. (code=0xC0210014).
        /// </summary>
        internal static string STATUS_FVE_KEYFILE_INVALID {
            get {
                return ResourceManager.GetString("STATUS_FVE_KEYFILE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BitLocker encryption key could not be obtained from the startup key or the recovery password. (code=0xC0210015).
        /// </summary>
        internal static string STATUS_FVE_KEYFILE_NO_VMK {
            get {
                return ResourceManager.GetString("STATUS_FVE_KEYFILE_NO_VMK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BitLocker startup key or recovery password could not be read from external media. (code=0xC0210013).
        /// </summary>
        internal static string STATUS_FVE_KEYFILE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_FVE_KEYFILE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The volume must be unlocked before it can be used. (code=0xC0210000).
        /// </summary>
        internal static string STATUS_FVE_LOCKED_VOLUME {
            get {
                return ResourceManager.GetString("STATUS_FVE_LOCKED_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This feature of BitLocker Drive Encryption is not included with this version of Windows. (code=0xC0210026).
        /// </summary>
        internal static string STATUS_FVE_NO_FEATURE_LICENSE {
            get {
                return ResourceManager.GetString("STATUS_FVE_NO_FEATURE_LICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BitLocker Drive Encryption is not included with this version of Windows. (code=0xC0210008).
        /// </summary>
        internal static string STATUS_FVE_NO_LICENSE {
            get {
                return ResourceManager.GetString("STATUS_FVE_NO_LICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The volume specified is not a data volume. (code=0xC021000C).
        /// </summary>
        internal static string STATUS_FVE_NOT_DATA_VOLUME {
            get {
                return ResourceManager.GetString("STATUS_FVE_NOT_DATA_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The volume is fully decrypted and no key is available. (code=0xC0210001).
        /// </summary>
        internal static string STATUS_FVE_NOT_ENCRYPTED {
            get {
                return ResourceManager.GetString("STATUS_FVE_NOT_ENCRYPTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The volume specified is not the boot operating system volume. (code=0xC0210012).
        /// </summary>
        internal static string STATUS_FVE_NOT_OS_VOLUME {
            get {
                return ResourceManager.GetString("STATUS_FVE_NOT_OS_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The backup copy of the metadata is out of date. (code=0xC0210020).
        /// </summary>
        internal static string STATUS_FVE_OLD_METADATA_COPY {
            get {
                return ResourceManager.GetString("STATUS_FVE_OLD_METADATA_COPY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The control block for the encrypted volume was updated by another thread. Try again. (code=0xC021000F).
        /// </summary>
        internal static string STATUS_FVE_OVERLAPPED_UPDATE {
            get {
                return ResourceManager.GetString("STATUS_FVE_OVERLAPPED_UPDATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Volume metadata read or write is incomplete. (code=0x80210001).
        /// </summary>
        internal static string STATUS_FVE_PARTIAL_METADATA {
            get {
                return ResourceManager.GetString("STATUS_FVE_PARTIAL_METADATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BitLocker encryption key could not be obtained from the TPM and PIN. (code=0xC021001A).
        /// </summary>
        internal static string STATUS_FVE_PIN_INVALID {
            get {
                return ResourceManager.GetString("STATUS_FVE_PIN_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Group policy does not permit turning off BitLocker Drive Encryption on roaming data volumes. (code=0xC0210027).
        /// </summary>
        internal static string STATUS_FVE_POLICY_USER_DISABLE_RDV_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("STATUS_FVE_POLICY_USER_DISABLE_RDV_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No action was taken because BitLocker Drive Encryption is in RAW access mode. (code=0xC0210022).
        /// </summary>
        internal static string STATUS_FVE_RAW_ACCESS {
            get {
                return ResourceManager.GetString("STATUS_FVE_RAW_ACCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BitLocker Drive Encryption cannot enter RAW access mode for this volume. (code=0xC0210023).
        /// </summary>
        internal static string STATUS_FVE_RAW_BLOCKED {
            get {
                return ResourceManager.GetString("STATUS_FVE_RAW_BLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No action was taken because a system restart is required. (code=0xC0210021).
        /// </summary>
        internal static string STATUS_FVE_REBOOT_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_FVE_REBOOT_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough free space remains on the volume to allow encryption. (code=0xC0210003).
        /// </summary>
        internal static string STATUS_FVE_TOO_SMALL {
            get {
                return ResourceManager.GetString("STATUS_FVE_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TPM is disabled. (code=0xC0210016).
        /// </summary>
        internal static string STATUS_FVE_TPM_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_FVE_TPM_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system boot information changed or the TPM locked out access to BitLocker encryption keys until the computer is restarted. (code=0xC0210018).
        /// </summary>
        internal static string STATUS_FVE_TPM_INVALID_PCR {
            get {
                return ResourceManager.GetString("STATUS_FVE_TPM_INVALID_PCR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BitLocker encryption key could not be obtained from the TPM. (code=0xC0210019).
        /// </summary>
        internal static string STATUS_FVE_TPM_NO_VMK {
            get {
                return ResourceManager.GetString("STATUS_FVE_TPM_NO_VMK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authorization data for the SRK of the TPM is not zero. (code=0xC0210017).
        /// </summary>
        internal static string STATUS_FVE_TPM_SRK_AUTH_NOT_ZERO {
            get {
                return ResourceManager.GetString("STATUS_FVE_TPM_SRK_AUTH_NOT_ZERO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BitLocker encryption keys were ignored because the volume was in a transient state. (code=0x80210002).
        /// </summary>
        internal static string STATUS_FVE_TRANSIENT_STATE {
            get {
                return ResourceManager.GetString("STATUS_FVE_TRANSIENT_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested virtualization size is too big. (code=0xC0210029).
        /// </summary>
        internal static string STATUS_FVE_VIRTUALIZED_SPACE_TOO_BIG {
            get {
                return ResourceManager.GetString("STATUS_FVE_VIRTUALIZED_SPACE_TOO_BIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The volume is not bound to the system. (code=0xC021000B).
        /// </summary>
        internal static string STATUS_FVE_VOLUME_NOT_BOUND {
            get {
                return ResourceManager.GetString("STATUS_FVE_VOLUME_NOT_BOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The drive is too small to be protected using BitLocker Drive Encryption. (code=0xC0210030).
        /// </summary>
        internal static string STATUS_FVE_VOLUME_TOO_SMALL {
            get {
                return ResourceManager.GetString("STATUS_FVE_VOLUME_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The action type is not compatible with the layer. (code=0xC022002C).
        /// </summary>
        internal static string STATUS_FWP_ACTION_INCOMPATIBLE_WITH_LAYER {
            get {
                return ResourceManager.GetString("STATUS_FWP_ACTION_INCOMPATIBLE_WITH_LAYER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The action type is not compatible with the sublayer. (code=0xC022002D).
        /// </summary>
        internal static string STATUS_FWP_ACTION_INCOMPATIBLE_WITH_SUBLAYER {
            get {
                return ResourceManager.GetString("STATUS_FWP_ACTION_INCOMPATIBLE_WITH_SUBLAYER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object with that GUID or LUID already exists. (code=0xC0220009).
        /// </summary>
        internal static string STATUS_FWP_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_FWP_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object is built-in and cannot be deleted. (code=0xC0220017).
        /// </summary>
        internal static string STATUS_FWP_BUILTIN_OBJECT {
            get {
                return ResourceManager.GetString("STATUS_FWP_BUILTIN_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The callout does not exist. (code=0xC0220001).
        /// </summary>
        internal static string STATUS_FWP_CALLOUT_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_FWP_CALLOUT_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The notification function for a callout returned an error. (code=0xC0220037).
        /// </summary>
        internal static string STATUS_FWP_CALLOUT_NOTIFICATION_FAILED {
            get {
                return ResourceManager.GetString("STATUS_FWP_CALLOUT_NOTIFICATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The classify cannot be pended. (code=0xC0220103).
        /// </summary>
        internal static string STATUS_FWP_CANNOT_PEND {
            get {
                return ResourceManager.GetString("STATUS_FWP_CANNOT_PEND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filter condition does not exist. (code=0xC0220002).
        /// </summary>
        internal static string STATUS_FWP_CONDITION_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_FWP_CONDITION_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The raw context or the provider context is not compatible with the callout. (code=0xC022002F).
        /// </summary>
        internal static string STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_CALLOUT {
            get {
                return ResourceManager.GetString("STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_CALLOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The raw context or the provider context is not compatible with the layer. (code=0xC022002E).
        /// </summary>
        internal static string STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_LAYER {
            get {
                return ResourceManager.GetString("STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_LAYER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A policy cannot contain the same auth method more than once. (code=0xC022003C).
        /// </summary>
        internal static string STATUS_FWP_DUPLICATE_AUTH_METHOD {
            get {
                return ResourceManager.GetString("STATUS_FWP_DUPLICATE_AUTH_METHOD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A filter cannot contain multiple conditions operating on a single field. (code=0xC022002A).
        /// </summary>
        internal static string STATUS_FWP_DUPLICATE_CONDITION {
            get {
                return ResourceManager.GetString("STATUS_FWP_DUPLICATE_CONDITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A policy cannot contain the same keying module more than once. (code=0xC022002B).
        /// </summary>
        internal static string STATUS_FWP_DUPLICATE_KEYMOD {
            get {
                return ResourceManager.GetString("STATUS_FWP_DUPLICATE_KEYMOD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call is not allowed from within a dynamic session. (code=0xC022000B).
        /// </summary>
        internal static string STATUS_FWP_DYNAMIC_SESSION_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_FWP_DYNAMIC_SESSION_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An IKE policy cannot contain an Extended Mode policy. (code=0xC0220032).
        /// </summary>
        internal static string STATUS_FWP_EM_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_FWP_EM_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filter does not exist. (code=0xC0220003).
        /// </summary>
        internal static string STATUS_FWP_FILTER_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_FWP_FILTER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object is referenced by other objects and cannot be deleted. (code=0xC022000A).
        /// </summary>
        internal static string STATUS_FWP_IN_USE {
            get {
                return ResourceManager.GetString("STATUS_FWP_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IPsec authentication configuration is not compatible with the authentication type. (code=0xC0220038).
        /// </summary>
        internal static string STATUS_FWP_INCOMPATIBLE_AUTH_CONFIG {
            get {
                return ResourceManager.GetString("STATUS_FWP_INCOMPATIBLE_AUTH_CONFIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authentication method is not compatible with the policy type. (code=0xC0220030).
        /// </summary>
        internal static string STATUS_FWP_INCOMPATIBLE_AUTH_METHOD {
            get {
                return ResourceManager.GetString("STATUS_FWP_INCOMPATIBLE_AUTH_METHOD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IPsec cipher configuration is not compatible with the cipher type. (code=0xC0220039).
        /// </summary>
        internal static string STATUS_FWP_INCOMPATIBLE_CIPHER_CONFIG {
            get {
                return ResourceManager.GetString("STATUS_FWP_INCOMPATIBLE_CIPHER_CONFIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Diffie-Hellman group is not compatible with the policy type. (code=0xC0220031).
        /// </summary>
        internal static string STATUS_FWP_INCOMPATIBLE_DH_GROUP {
            get {
                return ResourceManager.GetString("STATUS_FWP_INCOMPATIBLE_DH_GROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is not supported by the specified layer. (code=0xC0220014).
        /// </summary>
        internal static string STATUS_FWP_INCOMPATIBLE_LAYER {
            get {
                return ResourceManager.GetString("STATUS_FWP_INCOMPATIBLE_LAYER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call is not allowed for the current security association state. (code=0xC022001B).
        /// </summary>
        internal static string STATUS_FWP_INCOMPATIBLE_SA_STATE {
            get {
                return ResourceManager.GetString("STATUS_FWP_INCOMPATIBLE_SA_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call is not allowed from within a read-only transaction. (code=0xC0220011).
        /// </summary>
        internal static string STATUS_FWP_INCOMPATIBLE_TXN {
            get {
                return ResourceManager.GetString("STATUS_FWP_INCOMPATIBLE_TXN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The injection handle is being closed by another thread. (code=0xC0220101).
        /// </summary>
        internal static string STATUS_FWP_INJECT_HANDLE_CLOSING {
            get {
                return ResourceManager.GetString("STATUS_FWP_INJECT_HANDLE_CLOSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The injection handle is stale. (code=0xC0220102).
        /// </summary>
        internal static string STATUS_FWP_INJECT_HANDLE_STALE {
            get {
                return ResourceManager.GetString("STATUS_FWP_INJECT_HANDLE_STALE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The action type is not one of the allowed action types for a filter. (code=0xC0220024).
        /// </summary>
        internal static string STATUS_FWP_INVALID_ACTION_TYPE {
            get {
                return ResourceManager.GetString("STATUS_FWP_INVALID_ACTION_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An enumerator is not valid. (code=0xC022001D).
        /// </summary>
        internal static string STATUS_FWP_INVALID_ENUMERATOR {
            get {
                return ResourceManager.GetString("STATUS_FWP_INVALID_ENUMERATOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The flags field contains an invalid value. (code=0xC022001E).
        /// </summary>
        internal static string STATUS_FWP_INVALID_FLAGS {
            get {
                return ResourceManager.GetString("STATUS_FWP_INVALID_FLAGS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The time interval is not valid. (code=0xC0220021).
        /// </summary>
        internal static string STATUS_FWP_INVALID_INTERVAL {
            get {
                return ResourceManager.GetString("STATUS_FWP_INVALID_INTERVAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A network mask is not valid. (code=0xC022001F).
        /// </summary>
        internal static string STATUS_FWP_INVALID_NET_MASK {
            get {
                return ResourceManager.GetString("STATUS_FWP_INVALID_NET_MASK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter is incorrect. (code=0xC0220035).
        /// </summary>
        internal static string STATUS_FWP_INVALID_PARAMETER {
            get {
                return ResourceManager.GetString("STATUS_FWP_INVALID_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An FWP_RANGE is not valid. (code=0xC0220020).
        /// </summary>
        internal static string STATUS_FWP_INVALID_RANGE {
            get {
                return ResourceManager.GetString("STATUS_FWP_INVALID_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filter weight is not valid. (code=0xC0220025).
        /// </summary>
        internal static string STATUS_FWP_INVALID_WEIGHT {
            get {
                return ResourceManager.GetString("STATUS_FWP_INVALID_WEIGHT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call is allowed for kernel-mode callers only. (code=0xC0220015).
        /// </summary>
        internal static string STATUS_FWP_KM_CLIENTS_ONLY {
            get {
                return ResourceManager.GetString("STATUS_FWP_KM_CLIENTS_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The layer does not exist. (code=0xC0220004).
        /// </summary>
        internal static string STATUS_FWP_LAYER_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_FWP_LAYER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call tried to associate two objects with incompatible lifetimes. (code=0xC0220016).
        /// </summary>
        internal static string STATUS_FWP_LIFETIME_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_FWP_LIFETIME_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A filter condition contains a match type that is not compatible with the operands. (code=0xC0220026).
        /// </summary>
        internal static string STATUS_FWP_MATCH_TYPE_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_FWP_MATCH_TYPE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection of network diagnostic events is disabled. (code=0xC0220013).
        /// </summary>
        internal static string STATUS_FWP_NET_EVENTS_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_FWP_NET_EVENTS_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The enumeration template or subscription will never match any objects. (code=0xC0220033).
        /// </summary>
        internal static string STATUS_FWP_NEVER_MATCH {
            get {
                return ResourceManager.GetString("STATUS_FWP_NEVER_MATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call must be made from within an explicit transaction. (code=0xC022000D).
        /// </summary>
        internal static string STATUS_FWP_NO_TXN_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_FWP_NO_TXN_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object does not exist. (code=0xC0220008).
        /// </summary>
        internal static string STATUS_FWP_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_FWP_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A notification could not be delivered because a message queue has reached maximum capacity. (code=0xC0220019).
        /// </summary>
        internal static string STATUS_FWP_NOTIFICATION_DROPPED {
            get {
                return ResourceManager.GetString("STATUS_FWP_NOTIFICATION_DROPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The displayData.name field cannot be null. (code=0xC0220023).
        /// </summary>
        internal static string STATUS_FWP_NULL_DISPLAY_NAME {
            get {
                return ResourceManager.GetString("STATUS_FWP_NULL_DISPLAY_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A required pointer is null. (code=0xC022001C).
        /// </summary>
        internal static string STATUS_FWP_NULL_POINTER {
            get {
                return ResourceManager.GetString("STATUS_FWP_NULL_POINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An integer value is outside the allowed range. (code=0xC0220028).
        /// </summary>
        internal static string STATUS_FWP_OUT_OF_BOUNDS {
            get {
                return ResourceManager.GetString("STATUS_FWP_OUT_OF_BOUNDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provider context is of the wrong type. (code=0xC0220034).
        /// </summary>
        internal static string STATUS_FWP_PROVIDER_CONTEXT_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_FWP_PROVIDER_CONTEXT_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provider context does not exist. (code=0xC0220006).
        /// </summary>
        internal static string STATUS_FWP_PROVIDER_CONTEXT_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_FWP_PROVIDER_CONTEXT_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provider does not exist. (code=0xC0220005).
        /// </summary>
        internal static string STATUS_FWP_PROVIDER_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_FWP_PROVIDER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reserved field is nonzero. (code=0xC0220029).
        /// </summary>
        internal static string STATUS_FWP_RESERVED {
            get {
                return ResourceManager.GetString("STATUS_FWP_RESERVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The session has been canceled. (code=0xC0220010).
        /// </summary>
        internal static string STATUS_FWP_SESSION_ABORTED {
            get {
                return ResourceManager.GetString("STATUS_FWP_SESSION_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sublayer does not exist. (code=0xC0220007).
        /// </summary>
        internal static string STATUS_FWP_SUBLAYER_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_FWP_SUBLAYER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TCP/IP stack is not ready. (code=0xC0220100).
        /// </summary>
        internal static string STATUS_FWP_TCPIP_NOT_READY {
            get {
                return ResourceManager.GetString("STATUS_FWP_TCPIP_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call timed out while waiting to acquire the transaction lock. (code=0xC0220012).
        /// </summary>
        internal static string STATUS_FWP_TIMEOUT {
            get {
                return ResourceManager.GetString("STATUS_FWP_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of boot-time filters has been reached. (code=0xC0220018).
        /// </summary>
        internal static string STATUS_FWP_TOO_MANY_BOOTTIME_FILTERS {
            get {
                return ResourceManager.GetString("STATUS_FWP_TOO_MANY_BOOTTIME_FILTERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of callouts has been reached. (code=0xC0220018).
        /// </summary>
        internal static string STATUS_FWP_TOO_MANY_CALLOUTS {
            get {
                return ResourceManager.GetString("STATUS_FWP_TOO_MANY_CALLOUTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of sublayers has been reached. (code=0xC0220036).
        /// </summary>
        internal static string STATUS_FWP_TOO_MANY_SUBLAYERS {
            get {
                return ResourceManager.GetString("STATUS_FWP_TOO_MANY_SUBLAYERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The traffic parameters do not match those for the security association context. (code=0xC022001A).
        /// </summary>
        internal static string STATUS_FWP_TRAFFIC_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_FWP_TRAFFIC_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The explicit transaction has been forcibly canceled. (code=0xC022000F).
        /// </summary>
        internal static string STATUS_FWP_TXN_ABORTED {
            get {
                return ResourceManager.GetString("STATUS_FWP_TXN_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call is not allowed from within an explicit transaction. (code=0xC022000E).
        /// </summary>
        internal static string STATUS_FWP_TXN_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_FWP_TXN_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An FWP_VALUE or FWPM_CONDITION_VALUE is of the wrong type. (code=0xC0220027).
        /// </summary>
        internal static string STATUS_FWP_TYPE_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_FWP_TYPE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call was made from the wrong session and cannot be completed. (code=0xC022000C).
        /// </summary>
        internal static string STATUS_FWP_WRONG_SESSION {
            get {
                return ResourceManager.GetString("STATUS_FWP_WRONG_SESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An array that must contain at least one element has a zero length. (code=0xC0220022).
        /// </summary>
        internal static string STATUS_FWP_ZERO_LENGTH_ARRAY {
            get {
                return ResourceManager.GetString("STATUS_FWP_ZERO_LENGTH_ARRAY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A generic command executable returned a result that indicates failure. (code=0xC0150026).
        /// </summary>
        internal static string STATUS_GENERIC_COMMAND_FAILED {
            get {
                return ResourceManager.GetString("STATUS_GENERIC_COMMAND_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates generic access types were contained in an access mask which should already be mapped to non-generic access types. (code=0xC00000E6).
        /// </summary>
        internal static string STATUS_GENERIC_NOT_MAPPED {
            get {
                return ResourceManager.GetString("STATUS_GENERIC_NOT_MAPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport connection was gracefully closed. (code=0xC0000237).
        /// </summary>
        internal static string STATUS_GRACEFUL_DISCONNECT {
            get {
                return ResourceManager.GetString("STATUS_GRACEFUL_DISCONNECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation is being attempted that requires the display adapter to be in a quiescent state. (code=0xC01E043B).
        /// </summary>
        internal static string STATUS_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The chain of linked adapters is not ready to start because of an unknown failure. (code=0xC01E0433).
        /// </summary>
        internal static string STATUS_GRAPHICS_ADAPTER_CHAIN_NOT_READY {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_ADAPTER_CHAIN_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The display adapter must have at least one video present source. (code=0xC01E0328).
        /// </summary>
        internal static string STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The display adapter must have at least one video present target. (code=0xC01E0329).
        /// </summary>
        internal static string STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified display adapter and all of its state have been reset. (code=0xC01E0003).
        /// </summary>
        internal static string STATUS_GRAPHICS_ADAPTER_WAS_RESET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_ADAPTER_WAS_RESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The allocation is currently busy. (code=0xC01E0102).
        /// </summary>
        internal static string STATUS_GRAPHICS_ALLOCATION_BUSY {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_ALLOCATION_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The allocation being referenced has been closed permanently. (code=0xC01E0112).
        /// </summary>
        internal static string STATUS_GRAPHICS_ALLOCATION_CLOSED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_ALLOCATION_CLOSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified allocation lost its content. (code=0xC01E0116).
        /// </summary>
        internal static string STATUS_GRAPHICS_ALLOCATION_CONTENT_LOST {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_ALLOCATION_CONTENT_LOST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The allocation is invalid. (code=0xC01E0106).
        /// </summary>
        internal static string STATUS_GRAPHICS_ALLOCATION_INVALID {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_ALLOCATION_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The miniport requested that augmentation be canceled for the specified source of the specified VidPN&apos;s topology. (code=0xC01E035A).
        /// </summary>
        internal static string STATUS_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not able to present with color conversion. (code=0xC01E0008).
        /// </summary>
        internal static string STATUS_GRAPHICS_CANNOTCOLORCONVERT {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_CANNOTCOLORCONVERT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN is active and cannot be accessed. (code=0xC01E0343).
        /// </summary>
        internal static string STATUS_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request failed because a pinned allocation cannot be evicted. (code=0xC01E0109).
        /// </summary>
        internal static string STATUS_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not probe and lock the underlying memory of an allocation. (code=0xC01E0101).
        /// </summary>
        internal static string STATUS_GRAPHICS_CANT_LOCK_MEMORY {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_CANT_LOCK_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A locked allocation cannot be used in the current command buffer. (code=0xC01E0111).
        /// </summary>
        internal static string STATUS_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some chain adapters in a linked configuration have not yet been enumerated. (code=0xC01E0432).
        /// </summary>
        internal static string STATUS_GRAPHICS_CHAINLINKS_NOT_ENUMERATED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_CHAINLINKS_NOT_ENUMERATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to turn on a lead link display adapter when the chain links were turned off. (code=0xC01E0435).
        /// </summary>
        internal static string STATUS_GRAPHICS_CHAINLINKS_NOT_POWERED_ON {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_CHAINLINKS_NOT_POWERED_ON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to start a lead link display adapter when the chain links had not yet started. (code=0xC01E0434).
        /// </summary>
        internal static string STATUS_GRAPHICS_CHAINLINKS_NOT_STARTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_CHAINLINKS_NOT_STARTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The display adapter child device does not support reporting a descriptor. (code=0xC01E0401).
        /// </summary>
        internal static string STATUS_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client VidPN is not set on this adapter (for example, no user mode-initiated mode changes have taken place on this adapter). (code=0xC01E035C).
        /// </summary>
        internal static string STATUS_GRAPHICS_CLIENTVIDPN_NOT_SET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_CLIENTVIDPN_NOT_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver does not support COPP. (code=0xC01E0501).
        /// </summary>
        internal static string STATUS_GRAPHICS_COPP_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_COPP_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified dataset (for example, mode set, frequency range set, descriptor set, or topology) is empty. (code=0x401E034B).
        /// </summary>
        internal static string STATUS_GRAPHICS_DATASET_IS_EMPTY {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_DATASET_IS_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A monitor returned a DDC/CI capabilities string that did not comply with the ACCESS.bus 3.0, DDC/CI 1.1, or MCCS 2 Revision 1 specification. (code=0xC01E0587).
        /// </summary>
        internal static string STATUS_GRAPHICS_DDCCI_INVALID_CAPABILITIES_STRING {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_DDCCI_INVALID_CAPABILITIES_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data received from the monitor is invalid. (code=0xC01E0585).
        /// </summary>
        internal static string STATUS_GRAPHICS_DDCCI_INVALID_DATA {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_DDCCI_INVALID_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This error occurred because the value in a DDC/CI message&apos;s checksum field did not match the message&apos;s computed checksum value. This error implies that the data was corrupted while it was being transmitted from a monitor to a computer. (code=0xC01E058B).
        /// </summary>
        internal static string STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation failed because a DDC/CI message had an invalid value in its command field. (code=0xC01E0589).
        /// </summary>
        internal static string STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This error occurred because a DDC/CI message had an invalid value in its length field. (code=0xC01E058A).
        /// </summary>
        internal static string STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A function call failed because a monitor returned an invalid timing status byte when the operating system used the DDC/CI get timing report and timing message command to get a timing report from a monitor. (code=0xC01E0586).
        /// </summary>
        internal static string STATUS_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The monitor does not support the specified VCP code. (code=0xC01E0584).
        /// </summary>
        internal static string STATUS_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function failed because the specified GDI display device was not attached to the Windows desktop. (code=0xC01E05E2).
        /// </summary>
        internal static string STATUS_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The kernel driver detected a version mismatch between it and the user mode driver. (code=0x401E0117).
        /// </summary>
        internal static string STATUS_GRAPHICS_DRIVER_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_DRIVER_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system failed to determine a mode that is supported by both the display adapter and the monitor connected to it. (code=0xC01E0325).
        /// </summary>
        internal static string STATUS_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified frequency range is already in the specified monitor frequency range set. (code=0xC01E031F).
        /// </summary>
        internal static string STATUS_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified frequency range is not in the specified monitor frequency range set. (code=0xC01E031D).
        /// </summary>
        internal static string STATUS_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified gamma ramp is not supported on the respective VidPN present path. (code=0xC01E0348).
        /// </summary>
        internal static string STATUS_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A GPU exception was detected on the given device. The device cannot be scheduled. (code=0xC01E0200).
        /// </summary>
        internal static string STATUS_GRAPHICS_GPU_EXCEPTION_ON_DEVICE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_GPU_EXCEPTION_ON_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No device on the I2C bus has the specified address. (code=0xC01E0581).
        /// </summary>
        internal static string STATUS_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while receiving data from the device on the I2C bus. (code=0xC01E0583).
        /// </summary>
        internal static string STATUS_GRAPHICS_I2C_ERROR_RECEIVING_DATA {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_I2C_ERROR_RECEIVING_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while transmitting data to the device on the I2C bus. (code=0xC01E0582).
        /// </summary>
        internal static string STATUS_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The monitor connected to the specified video output does not have an I2C bus. (code=0xC01E0580).
        /// </summary>
        internal static string STATUS_GRAPHICS_I2C_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_I2C_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified primary surface has a different private-format attribute than the current primary surface. (code=0xC01E0355).
        /// </summary>
        internal static string STATUS_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The adapter link was found in an inconsistent state. Not all adapters are in an expected PNP/power state. (code=0xC01E0436).
        /// </summary>
        internal static string STATUS_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver needs more DMA buffer space to complete the requested operation. (code=0xC01E0001).
        /// </summary>
        internal static string STATUS_GRAPHICS_INSUFFICIENT_DMA_BUFFER {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INSUFFICIENT_DMA_BUFFER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error caused an operation to fail. (code=0xC01E05E7).
        /// </summary>
        internal static string STATUS_GRAPHICS_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified video signal active region is invalid. (code=0xC01E030B).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_ACTIVE_REGION {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_ACTIVE_REGION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid allocation handle is being referenced. (code=0xC01E0114).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_ALLOCATION_HANDLE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_ALLOCATION_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid allocation instance is being referenced. (code=0xC01E0113).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_ALLOCATION_INSTANCE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_ALLOCATION_INSTANCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The allocation cannot be used from its current segment location for the specified operation. (code=0xC01E0110).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_ALLOCATION_USAGE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_ALLOCATION_USAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified client type was not recognized. (code=0xC01E035B).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_CLIENT_TYPE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_CLIENT_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified color basis is invalid. (code=0xC01E033E).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_COLORBASIS {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_COLORBASIS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN present path copy protection type is invalid. (code=0xC01E034F).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_COPYPROTECTION_TYPE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_COPYPROTECTION_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified display adapter handle is invalid. (code=0xC01E0002).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_DISPLAY_ADAPTER {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_DISPLAY_ADAPTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver stack does not match the expected driver model. (code=0xC01E0004).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_DRIVER_MODEL {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_DRIVER_MODEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified video signal frequency is invalid. (code=0xC01E030A).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_FREQUENCY {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_FREQUENCY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified gamma ramp is invalid. (code=0xC01E0347).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_GAMMA_RAMP {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_GAMMA_RAMP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified mode-pruning algorithm is invalid. (code=0xC01E0356).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified monitor-capability origin is invalid. (code=0xC01E0357).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified monitor frequency range is invalid. (code=0xC01E031C).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified monitor-frequency range constraint is invalid. (code=0xC01E0358).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified monitor frequency range set is invalid. (code=0xC01E031B).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified monitor source mode is invalid. (code=0xC01E0322).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_MONITOR_SOURCE_MODE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_MONITOR_SOURCE_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified monitor source mode set is invalid. (code=0xC01E0321).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_MONITOR_SOURCEMODESET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_MONITOR_SOURCEMODESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified monitor descriptor is invalid. (code=0xC01E032B).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_MONITORDESCRIPTOR {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_MONITORDESCRIPTOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified monitor descriptor set is invalid. (code=0xC01E032A).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_MONITORDESCRIPTORSET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_MONITORDESCRIPTORSET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN&apos;s present path content geometry transformation is invalid. (code=0xC01E0345).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN present path content type is invalid. (code=0xC01E034E).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_PATH_CONTENT_TYPE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_PATH_CONTENT_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN&apos;s present path importance ordinal is invalid. (code=0xC01E0344).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function failed because an invalid monitor handle was passed to it. (code=0xC01E058C).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified pixel format is invalid. (code=0xC01E033D).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_PIXELFORMAT {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_PIXELFORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified pixel value access mode is invalid. (code=0xC01E033F).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_PIXELVALUEACCESSMODE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_PIXELVALUEACCESSMODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function failed because an invalid pointer parameter was passed to it. A pointer parameter is invalid if it is null, is not correctly aligned, or points to an invalid address or to a kernel mode address. (code=0xC01E05E4).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_POINTER {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_POINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified primary surface size is invalid. (code=0xC01E033A).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified scan line ordering type is invalid. (code=0xC01E0352).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_SCANLINE_ORDERING {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_SCANLINE_ORDERING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified stride is invalid. (code=0xC01E033C).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_STRIDE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_STRIDE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified video signal total region is invalid. (code=0xC01E030C).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_TOTAL_REGION {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_TOTAL_REGION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified video present source is invalid. (code=0xC01E0304).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified video present source mode is invalid. (code=0xC01E0310).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified video present target is invalid. (code=0xC01E0305).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified video present target mode is invalid. (code=0xC01E0311).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified video present source set is invalid. (code=0xC01E0315).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified video present target set is invalid. (code=0xC01E0316).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN handle is invalid. (code=0xC01E0303).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_VIDPN {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_VIDPN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN present path is invalid. (code=0xC01E0319).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_VIDPN_PRESENT_PATH {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_VIDPN_PRESENT_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN source mode set is invalid. (code=0xC01E0308).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_VIDPN_SOURCEMODESET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_VIDPN_SOURCEMODESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified video present target subset type is invalid. (code=0xC01E032F).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN target mode set is invalid. (code=0xC01E0309).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_VIDPN_TARGETMODESET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_VIDPN_TARGETMODESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN topology is invalid. (code=0xC01E0300).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN topology recommendation reason is invalid. (code=0xC01E034D).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified visible region size is invalid. (code=0xC01E033B).
        /// </summary>
        internal static string STATUS_GRAPHICS_INVALID_VISIBLEREGION_SIZE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_INVALID_VISIBLEREGION_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The lead adapter in a linked configuration was not enumerated yet. (code=0xC01E0431).
        /// </summary>
        internal static string STATUS_GRAPHICS_LEADLINK_NOT_ENUMERATED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_LEADLINK_NOT_ENUMERATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting the lead adapter in a linked configuration has been temporarily deferred. (code=0x401E0437).
        /// </summary>
        internal static string STATUS_GRAPHICS_LEADLINK_START_DEFERRED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_LEADLINK_START_DEFERRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum supported number of present paths has been reached. (code=0xC01E0359).
        /// </summary>
        internal static string STATUS_GRAPHICS_MAX_NUM_PATHS_REACHED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_MAX_NUM_PATHS_REACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error caused an operation to fail. (code=0xC01E0588).
        /// </summary>
        internal static string STATUS_GRAPHICS_MCA_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_MCA_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function does not support GDI mirroring display devices because GDI mirroring display devices do not have any physical monitors associated with them. (code=0xC01E05E3).
        /// </summary>
        internal static string STATUS_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified mode is already in the mode set. (code=0xC01E0314).
        /// </summary>
        internal static string STATUS_GRAPHICS_MODE_ALREADY_IN_MODESET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_MODE_ALREADY_IN_MODESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ID of the specified mode is being used by another mode in the set. (code=0xC01E0324).
        /// </summary>
        internal static string STATUS_GRAPHICS_MODE_ID_MUST_BE_UNIQUE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_MODE_ID_MUST_BE_UNIQUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified mode is not in the specified mode set. (code=0xC01E034A).
        /// </summary>
        internal static string STATUS_GRAPHICS_MODE_NOT_IN_MODESET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_MODE_NOT_IN_MODESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No mode is pinned on the specified VidPN source/target. (code=0x401E0307).
        /// </summary>
        internal static string STATUS_GRAPHICS_MODE_NOT_PINNED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_MODE_NOT_PINNED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The newly arrived monitor could not be associated with a display adapter. (code=0xC01E0334).
        /// </summary>
        internal static string STATUS_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operating system asynchronously destroyed the monitor that corresponds to this handle because the operating system&apos;s state changed. This error typically occurs because the monitor PDO associated with this handle was removed or stopped, or a display mode change occurred. A display mode change occurs when Windows sends a WM_DISPLAYCHANGE message to applications. (code=0xC01E058D).
        /// </summary>
        internal static string STATUS_GRAPHICS_MONITOR_NO_LONGER_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_MONITOR_NO_LONGER_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No monitor is connected on the specified video present target. (code=0xC01E0338).
        /// </summary>
        internal static string STATUS_GRAPHICS_MONITOR_NOT_CONNECTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_MONITOR_NOT_CONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified descriptor is already in the specified monitor descriptor set. (code=0xC01E032D).
        /// </summary>
        internal static string STATUS_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ID of the specified monitor descriptor is being used by another descriptor in the set. (code=0xC01E032E).
        /// </summary>
        internal static string STATUS_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified descriptor is not in the specified monitor descriptor set. (code=0xC01E032C).
        /// </summary>
        internal static string STATUS_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multisampling is not supported on the respective VidPN present path. (code=0xC01E0349).
        /// </summary>
        internal static string STATUS_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VidPN manager of the particular display adapter does not have an active VidPN. (code=0xC01E0336).
        /// </summary>
        internal static string STATUS_GRAPHICS_NO_ACTIVE_VIDPN {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NO_ACTIVE_VIDPN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All available importance ordinals are being used in the specified topology. (code=0xC01E0354).
        /// </summary>
        internal static string STATUS_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN source cannot be used because there is no available VidPN target to connect it to. (code=0xC01E0333).
        /// </summary>
        internal static string STATUS_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function cannot find an actual GDI display device that corresponds to the specified GDI display device name. (code=0xC01E05E1).
        /// </summary>
        internal static string STATUS_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to acquire the display mode management interface. (code=0xC01E0341).
        /// </summary>
        internal static string STATUS_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function failed because the GDI device passed to it did not have a monitor associated with it. (code=0xC01E05E5).
        /// </summary>
        internal static string STATUS_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified dataset (for example, mode set, frequency range set, descriptor set, or topology) does not contain any more elements. (code=0x401E034C).
        /// </summary>
        internal static string STATUS_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified mode set does not specify a preference for one of its modes. (code=0x401E031E).
        /// </summary>
        internal static string STATUS_GRAPHICS_NO_PREFERRED_MODE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NO_PREFERRED_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The miniport does not have a recommendation regarding the request to provide a functional VidPN given the current display adapter configuration. (code=0xC01E0323).
        /// </summary>
        internal static string STATUS_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The miniport has no recommendation for augmenting the specified VidPN&apos;s topology. (code=0xC01E031A).
        /// </summary>
        internal static string STATUS_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough video memory is available to complete the operation. (code=0xC01E0100).
        /// </summary>
        internal static string STATUS_GRAPHICS_NO_VIDEO_MEMORY {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NO_VIDEO_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The particular display adapter does not have an associated VidPN manager. (code=0xC01E0335).
        /// </summary>
        internal static string STATUS_GRAPHICS_NO_VIDPNMGR {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NO_VIDPNMGR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The display adapter is not linked to any other adapters. (code=0xC01E0430).
        /// </summary>
        internal static string STATUS_GRAPHICS_NOT_A_LINKED_ADAPTER {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NOT_A_LINKED_ADAPTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exclusive mode ownership is needed to create an unmanaged primary allocation. (code=0xC01E0000).
        /// </summary>
        internal static string STATUS_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver trying to start is not the same as the driver for the posted display adapter. (code=0xC01E0438).
        /// </summary>
        internal static string STATUS_GRAPHICS_NOT_POST_DEVICE_DRIVER {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_NOT_POST_DEVICE_DRIVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function can be used only if a program is running in the local console session. It cannot be used if a program is running on a remote desktop session or on a terminal server session. (code=0xC01E05E0).
        /// </summary>
        internal static string STATUS_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DxgkDdiOPMConfigureProtectedOutput() cannot enable HDCP because other physical outputs are using the display adapter&apos;s HDCP hardware. (code=0xC01E0518).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function failed because an unexpected error occurred inside a display driver. (code=0xC01E051E).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DxgkDdiOPMGetInformation() cannot return the version of the SRM being used because the application never successfully passed an SRM to the protected output. (code=0xC01E0516).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_HDCP_SRM_NEVER_SET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_HDCP_SRM_NEVER_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error caused an operation to fail. (code=0xC01E050B).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DxgkDdiOPMConfigureProtectedOutput function returns this error code if the passed-in sequence number is not the expected sequence number or the passed-in OMAC value is invalid. (code=0xC01E0521).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified encrypted parameters are invalid. (code=0xC01E0503).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function failed because the caller passed in an invalid OPM user-mode handle. (code=0xC01E050C).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_INVALID_HANDLE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_INVALID_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DxgkDdiOPMGetInformation and DxgkDdiOPMGetCOPPCompatibleInformation functions return this error code if the passed-in sequence number is not the expected sequence number or the passed-in OMAC value is invalid. (code=0xC01E051D).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function failed because an invalid pointer parameter was passed to it. A pointer parameter is invalid if it is null, is not correctly aligned, or it points to an invalid address or a kernel mode address. (code=0xC01E050A).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_INVALID_POINTER {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_INVALID_POINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The HDCP SRM passed to this function did not comply with section 5 of the HDCP 1.1 specification. (code=0xC01E0512).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_INVALID_SRM {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_INVALID_SRM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The GDI display device passed to this function does not have any active protected outputs. (code=0xC01E0505).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_NO_PROTECTED_OUTPUTS_EXIST {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_NO_PROTECTED_OUTPUTS_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver does not support OPM. (code=0xC01E0500).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protected output cannot enable analog copy protection because it does not support it. (code=0xC01E0514).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protected output cannot enable the CGMS-A protection technology because it does not support it. (code=0xC01E0515).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protected output cannot enable the HDCP system because it does not support it. (code=0xC01E0513).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An array passed to a function cannot hold all of the data that the function wants to put in it. (code=0xC01E0504).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_PARAMETER_ARRAY_TOO_SMALL {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_PARAMETER_ARRAY_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DxgkDdiOPMGetCOPPCompatibleInformation, DxgkDdiOPMGetInformation, or DxgkDdiOPMConfigureProtectedOutput function failed. This error is returned only if a protected output has OPM semantics. (code=0xC01E051C).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DxgkDdiOPMGetCOPPCompatibleInformation, DxgkDdiOPMGetInformation, or DxgkDdiOPMConfigureProtectedOutput function failed. This error is returned only if a protected output has COPP semantics. (code=0xC01E051F).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operating system asynchronously destroyed this OPM-protected output because the operating system state changed. This error typically occurs because the monitor PDO associated with this protected output was removed or stopped, the protected output&apos;s session became a nonconsole session, or the protected output&apos;s desktop became inactive. (code=0xC01E051A).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_NO_LONGER_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_NO_LONGER_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DxgkDdiOPMConfigureProtectedOutput() cannot enable the specified output protection technology because the output&apos;s screen resolution is too high. (code=0xC01E0517).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_RESOLUTION_TOO_HIGH {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_RESOLUTION_TOO_HIGH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OPM functions cannot be called when a session is changing its type. Three types of sessions currently exist: console, disconnected, and remote (RDP or ICA). (code=0xC01E051B).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DxgkDdiOPMGetCOPPCompatibleInformation and DxgkDdiOPMConfigureProtectedOutput functions return this error if the display driver does not support the DXGKMDT_OPM_GET_ACP_AND_CGMSA_SIGNALING and DXGKMDT_OPM_SET_ACP_AND_CGMSA_SIGNALING GUIDs. (code=0xC01E0520).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DxgkDdiOpmCreateProtectedOutput() could not create a protected output because the video present yarget is in spanning mode. (code=0xC01E050F).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_SPANNING_MODE_ENABLED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_SPANNING_MODE_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DxgkDdiOpmCreateProtectedOutput() could not create a protected output because the video present target is in theater mode. (code=0xC01E0510).
        /// </summary>
        internal static string STATUS_GRAPHICS_OPM_THEATER_MODE_ENABLED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_OPM_THEATER_MODE_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An array passed to the function cannot hold all of the data that the function must copy into the array. (code=0xC01E05E6).
        /// </summary>
        internal static string STATUS_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified buffer is not big enough to contain the entire requested dataset. Partial data is populated up to the size of the buffer. (code=0x401E000A).
        /// </summary>
        internal static string STATUS_GRAPHICS_PARTIAL_DATA_POPULATED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PARTIAL_DATA_POPULATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified video present path is already in the VidPN&apos;s topology. (code=0xC01E0313).
        /// </summary>
        internal static string STATUS_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified content transformation is not pinned on the specified VidPN present path. (code=0x401E0351).
        /// </summary>
        internal static string STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified content geometry transformation is not supported on the respective VidPN present path. (code=0xC01E0346).
        /// </summary>
        internal static string STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified present path is not in the VidPN&apos;s topology. (code=0xC01E0327).
        /// </summary>
        internal static string STATUS_GRAPHICS_PATH_NOT_IN_TOPOLOGY {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PATH_NOT_IN_TOPOLOGY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pinned mode must remain in the set on the VidPN&apos;s co-functional modality enumeration. (code=0xC01E0312).
        /// </summary>
        internal static string STATUS_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The display adapter is being polled for children too frequently at the same polling level. (code=0x401E0439).
        /// </summary>
        internal static string STATUS_GRAPHICS_POLLING_TOO_FREQUENTLY {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_POLLING_TOO_FREQUENTLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not able to present due to denial of desktop access. (code=0xC01E0007).
        /// </summary>
        internal static string STATUS_GRAPHICS_PRESENT_DENIED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PRESENT_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Present happened but ended up into the changed desktop mode. (code=0xC01E0005).
        /// </summary>
        internal static string STATUS_GRAPHICS_PRESENT_MODE_CHANGED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PRESENT_MODE_CHANGED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nothing to present due to desktop occlusion. (code=0xC01E0006).
        /// </summary>
        internal static string STATUS_GRAPHICS_PRESENT_OCCLUDED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PRESENT_OCCLUDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Present redirection is disabled (desktop windowing management subsystem is off). (code=0xC01E000B).
        /// </summary>
        internal static string STATUS_GRAPHICS_PRESENT_REDIRECTION_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PRESENT_REDIRECTION_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Previous exclusive VidPn source owner has released its ownership (code=0xC01E000C).
        /// </summary>
        internal static string STATUS_GRAPHICS_PRESENT_UNOCCLUDED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PRESENT_UNOCCLUDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function failed because the GDI display device passed to it was not attached to the Windows desktop. (code=0xC01E0507).
        /// </summary>
        internal static string STATUS_GRAPHICS_PVP_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PVP_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function call failed because the display adapter&apos;s hardware functionality scan (HFS) failed to validate the graphics hardware. (code=0xC01E0511).
        /// </summary>
        internal static string STATUS_GRAPHICS_PVP_HFS_FAILED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PVP_HFS_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A certificate could not be returned because the certificate buffer passed to the function was too small. (code=0xC01E050E).
        /// </summary>
        internal static string STATUS_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PVP does not support mirroring display devices because they do not have any protected outputs. (code=0xC01E0508).
        /// </summary>
        internal static string STATUS_GRAPHICS_PVP_MIRRORING_DEVICES_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PVP_MIRRORING_DEVICES_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PVP cannot find an actual GDI display device that corresponds to the passed-in GDI display device name. (code=0xC01E0506).
        /// </summary>
        internal static string STATUS_GRAPHICS_PVP_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PVP_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function failed because the GDI device passed to it did not have any monitors associated with it. (code=0xC01E050D).
        /// </summary>
        internal static string STATUS_GRAPHICS_PVP_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_PVP_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two or more of the specified resources are not related to each other, as defined by the interface semantics. (code=0xC01E0330).
        /// </summary>
        internal static string STATUS_GRAPHICS_RESOURCES_NOT_RELATED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_RESOURCES_NOT_RELATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function failed because the current session is changing its type. This function cannot be called when the current session is changing its type. Three types of sessions currently exist: console, disconnected, and remote (RDP or ICA). (code=0xC01E05E8).
        /// </summary>
        internal static string STATUS_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified video present source is already in the video present source set. (code=0xC01E0317).
        /// </summary>
        internal static string STATUS_GRAPHICS_SOURCE_ALREADY_IN_SET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_SOURCE_ALREADY_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ID of the specified video present source is being used by another source in the set. (code=0xC01E0331).
        /// </summary>
        internal static string STATUS_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified source is not part of the specified VidPN&apos;s topology. (code=0xC01E0339).
        /// </summary>
        internal static string STATUS_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified display adapter child device already has an external device connected to it. (code=0xC01E0400).
        /// </summary>
        internal static string STATUS_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified mode set is stale. Reacquire the new mode set. (code=0xC01E0320).
        /// </summary>
        internal static string STATUS_GRAPHICS_STALE_MODESET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_STALE_MODESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN topology is stale; obtain the new topology. (code=0xC01E0337).
        /// </summary>
        internal static string STATUS_GRAPHICS_STALE_VIDPN_TOPOLOGY {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_STALE_VIDPN_TOPOLOGY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting the adapter has been temporarily deferred. (code=0x401E043A).
        /// </summary>
        internal static string STATUS_GRAPHICS_START_DEFERRED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_START_DEFERRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified video present target is already in the video present target set. (code=0xC01E0318).
        /// </summary>
        internal static string STATUS_GRAPHICS_TARGET_ALREADY_IN_SET {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_TARGET_ALREADY_IN_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ID of the specified video present target is being used by another target in the set. (code=0xC01E0332).
        /// </summary>
        internal static string STATUS_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified target is not part of the specified VidPN&apos;s topology. (code=0xC01E0340).
        /// </summary>
        internal static string STATUS_GRAPHICS_TARGET_NOT_IN_TOPOLOGY {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_TARGET_NOT_IN_TOPOLOGY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object being referenced has already reached the maximum reference count and cannot be referenced further. (code=0xC01E0103).
        /// </summary>
        internal static string STATUS_GRAPHICS_TOO_MANY_REFERENCES {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_TOO_MANY_REFERENCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The topology changes are not allowed for the specified VidPN. (code=0xC01E0353).
        /// </summary>
        internal static string STATUS_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem could not be solved due to an existing condition. Try again later. (code=0xC01E0104).
        /// </summary>
        internal static string STATUS_GRAPHICS_TRY_AGAIN_LATER {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_TRY_AGAIN_LATER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A problem could not be solved due to an existing condition. Try again now. (code=0xC01E0105).
        /// </summary>
        internal static string STATUS_GRAPHICS_TRY_AGAIN_NOW {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_TRY_AGAIN_NOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver does not support UAB. (code=0xC01E0502).
        /// </summary>
        internal static string STATUS_GRAPHICS_UAB_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_UAB_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one unassigned mode set can exist at any one time for a particular VidPN source or target. (code=0xC01E0350).
        /// </summary>
        internal static string STATUS_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The child device presence was not reliably detected. (code=0x401E042F).
        /// </summary>
        internal static string STATUS_GRAPHICS_UNKNOWN_CHILD_STATUS {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_UNKNOWN_CHILD_STATUS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No more unswizzling apertures are currently available. (code=0xC01E0107).
        /// </summary>
        internal static string STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current allocation cannot be unswizzled by an aperture. (code=0xC01E0108).
        /// </summary>
        internal static string STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of video present targets must be greater than or equal to the number of video present sources. (code=0xC01E0326).
        /// </summary>
        internal static string STATUS_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN modality is not supported (for example, at least two of the pinned modes are not co-functional). (code=0xC01E0306).
        /// </summary>
        internal static string STATUS_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN source is already owned by a DMM client and cannot be used until that client releases it. (code=0xC01E0342).
        /// </summary>
        internal static string STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN topology is valid but is not currently supported by the display adapter due to allocation of its resources. (code=0xC01E0302).
        /// </summary>
        internal static string STATUS_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VidPN topology is valid but is not supported by this model of the display adapter. (code=0xC01E0301).
        /// </summary>
        internal static string STATUS_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The allocation being referenced does not belong to the current device. (code=0xC01E0115).
        /// </summary>
        internal static string STATUS_GRAPHICS_WRONG_ALLOCATION_DEVICE {
            get {
                return ResourceManager.GetString("STATUS_GRAPHICS_WRONG_ALLOCATION_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified group already exists. (code=0xC0000065).
        /// </summary>
        internal static string STATUS_GROUP_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_GROUP_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Guard Page Exception A page of memory that marks the end of a data structure, such as a stack or an array, has been accessed. (code=0x80000001).
        /// </summary>
        internal static string STATUS_GUARD_PAGE_VIOLATION {
            get {
                return ResourceManager.GetString("STATUS_GUARD_PAGE_VIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {GUID Substitution} During the translation of a globally unique identifier (GUID) to a Windows security ID (SID), no administratively defined GUID prefix was found. A substitute prefix was used, which will not compromise system security. However, this might provide a more restrictive access than intended. (code=0x8000000C).
        /// </summary>
        internal static string STATUS_GUID_SUBSTITUTION_MADE {
            get {
                return ResourceManager.GetString("STATUS_GUID_SUBSTITUTION_MADE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The GUIDs could not be allocated because the Authority Agent was exhausted. (code=0xC0000083).
        /// </summary>
        internal static string STATUS_GUIDS_EXHAUSTED {
            get {
                return ResourceManager.GetString("STATUS_GUIDS_EXHAUSTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The handle has been invalidated by a transaction. The most likely cause is the presence of memory mapping on a file or an open handle when the transaction ended or rolled back to savepoint. (code=0xC0190028).
        /// </summary>
        internal static string STATUS_HANDLE_NO_LONGER_VALID {
            get {
                return ResourceManager.GetString("STATUS_HANDLE_NO_LONGER_VALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NtClose was called on a handle that was protected from close via NtSetInformationObject. (code=0xC0000235).
        /// </summary>
        internal static string STATUS_HANDLE_NOT_CLOSABLE {
            get {
                return ResourceManager.GetString("STATUS_HANDLE_NOT_CLOSABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Handles Closed} Handles to objects have been automatically closed because of the requested operation. (code=0x8000000A).
        /// </summary>
        internal static string STATUS_HANDLES_CLOSED {
            get {
                return ResourceManager.GetString("STATUS_HANDLES_CLOSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hardware has reported an uncorrectable memory error. (code=0xC0000709).
        /// </summary>
        internal static string STATUS_HARDWARE_MEMORY_ERROR {
            get {
                return ResourceManager.GetString("STATUS_HARDWARE_MEMORY_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hash requests is not present or not up to date with the current file contents. (code=0xC000A101).
        /// </summary>
        internal static string STATUS_HASH_NOT_PRESENT {
            get {
                return ResourceManager.GetString("STATUS_HASH_NOT_PRESENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hash generation for the specified version and hash type is not enabled on server. (code=0xC000A100).
        /// </summary>
        internal static string STATUS_HASH_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_HASH_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A heap has been corrupted. (code=0xC0000374).
        /// </summary>
        internal static string STATUS_HEAP_CORRUPTION {
            get {
                return ResourceManager.GetString("STATUS_HEAP_CORRUPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system was put into hibernation. (code=0x4000002A).
        /// </summary>
        internal static string STATUS_HIBERNATED {
            get {
                return ResourceManager.GetString("STATUS_HIBERNATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system has failed to hibernate (The error code is %hs). Hibernation will be disabled until the system is restarted. (code=0xC0000411).
        /// </summary>
        internal static string STATUS_HIBERNATION_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_HIBERNATION_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Illegal operation attempted on a registry key which has already been unloaded. (code=0xC0000425).
        /// </summary>
        internal static string STATUS_HIVE_UNLOADED {
            get {
                return ResourceManager.GetString("STATUS_HIVE_UNLOADED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cryptographic provider does not support HMAC. (code=0xC000A001).
        /// </summary>
        internal static string STATUS_HMAC_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_HMAC_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An Internet Control Message Protocol (ICMP) hop limit exceeded error was received. (code=0xC000A012).
        /// </summary>
        internal static string STATUS_HOPLIMIT_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_HOPLIMIT_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport determined that the remote system is down. (code=0xC0000350).
        /// </summary>
        internal static string STATUS_HOST_DOWN {
            get {
                return ResourceManager.GetString("STATUS_HOST_DOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote system is not reachable by the transport. (code=0xC000023D).
        /// </summary>
        internal static string STATUS_HOST_UNREACHABLE {
            get {
                return ResourceManager.GetString("STATUS_HOST_UNREACHABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Display Driver Stopped Responding} The %hs display driver has stopped working normally. Save your work and reboot the system to restore full display functionality. The next time you reboot the machine a dialog will be displayed giving you a chance to report this failure to Microsoft. (code=0xC0000415).
        /// </summary>
        internal static string STATUS_HUNG_DISPLAY_DRIVER_THREAD {
            get {
                return ResourceManager.GetString("STATUS_HUNG_DISPLAY_DRIVER_THREAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When trying to update a password, this return status indicates that the value provided for the new password contains values that are not allowed in passwords. (code=0xC000006B).
        /// </summary>
        internal static string STATUS_ILL_FORMED_PASSWORD {
            get {
                return ResourceManager.GetString("STATUS_ILL_FORMED_PASSWORD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A configuration registry node that represents a driver service entry was ill-formed and did not contain the required value entries. (code=0xC0000160).
        /// </summary>
        internal static string STATUS_ILL_FORMED_SERVICE_ENTRY {
            get {
                return ResourceManager.GetString("STATUS_ILL_FORMED_SERVICE_ENTRY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An illegal character was encountered. For a multibyte character set, this includes a lead byte without a succeeding trail byte. For the Unicode character set this includes the characters 0xFFFF and 0xFFFE. (code=0xC0000161).
        /// </summary>
        internal static string STATUS_ILLEGAL_CHARACTER {
            get {
                return ResourceManager.GetString("STATUS_ILLEGAL_CHARACTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Illegal System DLL Relocation} The system DLL %hs was relocated in memory. The application will not run properly. The relocation occurred because the DLL %hs occupied an address range that is reserved for Windows system DLLs. The vendor supplying the DLL should be contacted for a new DLL. (code=0xC0000269).
        /// </summary>
        internal static string STATUS_ILLEGAL_DLL_RELOCATION {
            get {
                return ResourceManager.GetString("STATUS_ILLEGAL_DLL_RELOCATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified medium changer element does not exist. (code=0xC0000285).
        /// </summary>
        internal static string STATUS_ILLEGAL_ELEMENT_ADDRESS {
            get {
                return ResourceManager.GetString("STATUS_ILLEGAL_ELEMENT_ADDRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} A real-mode application issued a floating-point instruction and floating-point hardware is not present. (code=0xC000014A).
        /// </summary>
        internal static string STATUS_ILLEGAL_FLOAT_CONTEXT {
            get {
                return ResourceManager.GetString("STATUS_ILLEGAL_FLOAT_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified handle is not open to the server end of the named pipe. (code=0xC00000AF).
        /// </summary>
        internal static string STATUS_ILLEGAL_FUNCTION {
            get {
                return ResourceManager.GetString("STATUS_ILLEGAL_FUNCTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Illegal Instruction An attempt was made to execute an illegal instruction. (code=0xC000001D).
        /// </summary>
        internal static string STATUS_ILLEGAL_INSTRUCTION {
            get {
                return ResourceManager.GetString("STATUS_ILLEGAL_INSTRUCTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that the specified image is already loaded. (code=0xC000010E).
        /// </summary>
        internal static string STATUS_IMAGE_ALREADY_LOADED {
            get {
                return ResourceManager.GetString("STATUS_IMAGE_ALREADY_LOADED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that the specified image is already loaded as a DLL. (code=0xC000019D).
        /// </summary>
        internal static string STATUS_IMAGE_ALREADY_LOADED_AS_DLL {
            get {
                return ResourceManager.GetString("STATUS_IMAGE_ALREADY_LOADED_AS_DLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows cannot verify the digital signature for this file. The signing certificate for this file has been revoked. (code=0xC0000603).
        /// </summary>
        internal static string STATUS_IMAGE_CERT_REVOKED {
            get {
                return ResourceManager.GetString("STATUS_IMAGE_CERT_REVOKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Bad Image Checksum} The image %hs is possibly corrupt. The header checksum does not match the computed checksum. (code=0xC0000221).
        /// </summary>
        internal static string STATUS_IMAGE_CHECKSUM_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_IMAGE_CHECKSUM_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Machine Type Mismatch} The image file %hs is valid but is for a machine type other than the current machine. Select OK to continue, or CANCEL to fail the DLL load. (code=0x4000000E).
        /// </summary>
        internal static string STATUS_IMAGE_MACHINE_TYPE_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_IMAGE_MACHINE_TYPE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Machine Type Mismatch} The image file %hs is valid but is for a machine type other than the current machine. (code=0x40000023).
        /// </summary>
        internal static string STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE {
            get {
                return ResourceManager.GetString("STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {UP/MP Image Mismatch} The image %hs has been modified for use on a uniprocessor system, but you are running it on a multiprocessor machine. Reinstall the image file. (code=0xC0000249).
        /// </summary>
        internal static string STATUS_IMAGE_MP_UP_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_IMAGE_MP_UP_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Image Relocated} An image file could not be mapped at the address that is specified in the image file. Local fixes must be performed on this image. (code=0x40000003).
        /// </summary>
        internal static string STATUS_IMAGE_NOT_AT_BASE {
            get {
                return ResourceManager.GetString("STATUS_IMAGE_NOT_AT_BASE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The subsystem needed to support the image type is not present. (code=0xC00001A3).
        /// </summary>
        internal static string STATUS_IMAGE_SUBSYSTEM_NOT_PRESENT {
            get {
                return ResourceManager.GetString("STATUS_IMAGE_SUBSYSTEM_NOT_PRESENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation attempted to exceed an implementation-defined limit. (code=0xC000042B).
        /// </summary>
        internal static string STATUS_IMPLEMENTATION_LIMIT {
            get {
                return ResourceManager.GetString("STATUS_IMPLEMENTATION_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instruction at 0x%08lx referenced memory at 0x%08lx. The required data was not placed into memory because of an I/O error status of 0x%08lx. (code=0xC0000006).
        /// </summary>
        internal static string STATUS_IN_PAGE_ERROR {
            get {
                return ResourceManager.GetString("STATUS_IN_PAGE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to %2 has been blocked from loading due to incompatibility with this system. Contact your software vendor for a compatible version of the driver. (code=0xC0000424).
        /// </summary>
        internal static string STATUS_INCOMPATIBLE_DRIVER_BLOCKED {
            get {
                return ResourceManager.GetString("STATUS_INCOMPATIBLE_DRIVER_BLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A section was created to map a file that is not compatible with an already existing section that maps the same file. (code=0xC000004D).
        /// </summary>
        internal static string STATUS_INCOMPATIBLE_FILE_MAP {
            get {
                return ResourceManager.GetString("STATUS_INCOMPATIBLE_FILE_MAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Short name settings cannot be changed on this volume due to the global registry setting. (code=0xC000019E).
        /// </summary>
        internal static string STATUS_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING {
            get {
                return ResourceManager.GetString("STATUS_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation would leave a transactional resource manager in an inconsistent state and is therefore not allowed. (code=0xC019003A).
        /// </summary>
        internal static string STATUS_INDOUBT_TRANSACTIONS_EXIST {
            get {
                return ResourceManager.GetString("STATUS_INDOUBT_TRANSACTIONS_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified information record length does not match the length that is required for the specified information class. (code=0xC0000004).
        /// </summary>
        internal static string STATUS_INFO_LENGTH_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_INFO_LENGTH_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum named pipe instance count has been reached. (code=0xC00000AB).
        /// </summary>
        internal static string STATUS_INSTANCE_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("STATUS_INSTANCE_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to execute an instruction at an unaligned address and the host system does not support unaligned instruction references. (code=0xC00000AA).
        /// </summary>
        internal static string STATUS_INSTRUCTION_MISALIGNMENT {
            get {
                return ResourceManager.GetString("STATUS_INSTRUCTION_MISALIGNMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient server resources exist to complete the request. (code=0xC0000205).
        /// </summary>
        internal static string STATUS_INSUFF_SERVER_RESOURCES {
            get {
                return ResourceManager.GetString("STATUS_INSUFF_SERVER_RESOURCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is insufficient account information to log you on. (code=0xC0000250).
        /// </summary>
        internal static string STATUS_INSUFFICIENT_LOGON_INFO {
            get {
                return ResourceManager.GetString("STATUS_INSUFFICIENT_LOGON_INFO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient NVRAM resources exist to complete the API.  A reboot might be required. (code=0xC0000454).
        /// </summary>
        internal static string STATUS_INSUFFICIENT_NVRAM_RESOURCES {
            get {
                return ResourceManager.GetString("STATUS_INSUFFICIENT_NVRAM_RESOURCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is not enough power to complete the requested operation. (code=0xC00002DE).
        /// </summary>
        internal static string STATUS_INSUFFICIENT_POWER {
            get {
                return ResourceManager.GetString("STATUS_INSUFFICIENT_POWER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Desktop heap encountered an error while allocating session memory. There is more information in the system event log. (code=0xC0000416).
        /// </summary>
        internal static string STATUS_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE {
            get {
                return ResourceManager.GetString("STATUS_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient system resources exist to complete the API. (code=0xC000009A).
        /// </summary>
        internal static string STATUS_INSUFFICIENT_RESOURCES {
            get {
                return ResourceManager.GetString("STATUS_INSUFFICIENT_RESOURCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Integer division by zero. (code=0xC0000094).
        /// </summary>
        internal static string STATUS_INTEGER_DIVIDE_BY_ZERO {
            get {
                return ResourceManager.GetString("STATUS_INTEGER_DIVIDE_BY_ZERO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Integer overflow. (code=0xC0000095).
        /// </summary>
        internal static string STATUS_INTEGER_OVERFLOW {
            get {
                return ResourceManager.GetString("STATUS_INTEGER_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This error indicates that the requested operation cannot be completed due to a catastrophic media failure or an on-disk data structure corruption. (code=0xC00000E4).
        /// </summary>
        internal static string STATUS_INTERNAL_DB_CORRUPTION {
            get {
                return ResourceManager.GetString("STATUS_INTERNAL_DB_CORRUPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The local security authority (LSA) database contains an internal inconsistency. (code=0xC0000158).
        /// </summary>
        internal static string STATUS_INTERNAL_DB_ERROR {
            get {
                return ResourceManager.GetString("STATUS_INTERNAL_DB_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error occurred. (code=0xC00000E5).
        /// </summary>
        internal static string STATUS_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("STATUS_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified interrupt vector is still connected. (code=0x00000128).
        /// </summary>
        internal static string STATUS_INTERRUPT_STILL_CONNECTED {
            get {
                return ResourceManager.GetString("STATUS_INTERRUPT_STILL_CONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified interrupt vector was already connected. (code=0x00000127).
        /// </summary>
        internal static string STATUS_INTERRUPT_VECTOR_ALREADY_CONNECTED {
            get {
                return ResourceManager.GetString("STATUS_INTERRUPT_VECTOR_ALREADY_CONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name provided is not a properly formed account name. (code=0xC0000062).
        /// </summary>
        internal static string STATUS_INVALID_ACCOUNT_NAME {
            get {
                return ResourceManager.GetString("STATUS_INVALID_ACCOUNT_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified access control entry (ACE) contains an invalid condition. (code=0xC00001A2).
        /// </summary>
        internal static string STATUS_INVALID_ACE_CONDITION {
            get {
                return ResourceManager.GetString("STATUS_INVALID_ACE_CONDITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the ACL structure is not valid. (code=0xC0000077).
        /// </summary>
        internal static string STATUS_INVALID_ACL {
            get {
                return ResourceManager.GetString("STATUS_INVALID_ACL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The address handle that was given to the transport was invalid. (code=0xC0000141).
        /// </summary>
        internal static string STATUS_INVALID_ADDRESS {
            get {
                return ResourceManager.GetString("STATUS_INVALID_ADDRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport rejected the specified network address as invalid. (code=0xC0000207).
        /// </summary>
        internal static string STATUS_INVALID_ADDRESS_COMPONENT {
            get {
                return ResourceManager.GetString("STATUS_INVALID_ADDRESS_COMPONENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport rejected the specified network address due to invalid use of a wildcard. (code=0xC0000208).
        /// </summary>
        internal static string STATUS_INVALID_ADDRESS_WILDCARD {
            get {
                return ResourceManager.GetString("STATUS_INVALID_ADDRESS_WILDCARD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When accessing a new tape of a multi-volume partition, the current blocksize is incorrect. (code=0xC0000173).
        /// </summary>
        internal static string STATUS_INVALID_BLOCK_LENGTH {
            get {
                return ResourceManager.GetString("STATUS_INVALID_BLOCK_LENGTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of the buffer is invalid for the specified operation. (code=0xC0000206).
        /// </summary>
        internal static string STATUS_INVALID_BUFFER_SIZE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_BUFFER_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid client ID was specified. (code=0xC000000B).
        /// </summary>
        internal static string STATUS_INVALID_CID {
            get {
                return ResourceManager.GetString("STATUS_INVALID_CID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates a name that was specified as a remote computer name is syntactically invalid. (code=0xC0000122).
        /// </summary>
        internal static string STATUS_INVALID_COMPUTER_NAME {
            get {
                return ResourceManager.GetString("STATUS_INVALID_COMPUTER_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The connection handle that was given to the transport was invalid. (code=0xC0000140).
        /// </summary>
        internal static string STATUS_INVALID_CONNECTION {
            get {
                return ResourceManager.GetString("STATUS_INVALID_CONNECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to a C runtime function. (code=0xC0000417).
        /// </summary>
        internal static string STATUS_INVALID_CRUNTIME_PARAMETER {
            get {
                return ResourceManager.GetString("STATUS_INVALID_CRUNTIME_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device object parameter is either not a valid device object or is not attached to the volume that is specified by the file name. (code=0xC0000369).
        /// </summary>
        internal static string STATUS_INVALID_DEVICE_OBJECT_PARAMETER {
            get {
                return ResourceManager.GetString("STATUS_INVALID_DEVICE_OBJECT_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified request is not a valid operation for the target device. (code=0xC0000010).
        /// </summary>
        internal static string STATUS_INVALID_DEVICE_REQUEST {
            get {
                return ResourceManager.GetString("STATUS_INVALID_DEVICE_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device is not in a valid state to perform this request. (code=0xC0000184).
        /// </summary>
        internal static string STATUS_INVALID_DEVICE_STATE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_DEVICE_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid exception disposition was returned by an exception handler. (code=0xC0000026).
        /// </summary>
        internal static string STATUS_INVALID_DISPOSITION {
            get {
                return ResourceManager.GetString("STATUS_INVALID_DISPOSITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is only allowed for the primary domain controller of the domain. (code=0xC00000DE).
        /// </summary>
        internal static string STATUS_INVALID_DOMAIN_ROLE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_DOMAIN_ROLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the domain was in the wrong state to perform the desired operation. (code=0xC00000DD).
        /// </summary>
        internal static string STATUS_INVALID_DOMAIN_STATE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_DOMAIN_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Invalid EA Flag} An invalid extended attribute (EA) flag was set. (code=0x80000015).
        /// </summary>
        internal static string STATUS_INVALID_EA_FLAG {
            get {
                return ResourceManager.GetString("STATUS_INVALID_EA_FLAG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Illegal EA} The specified extended attribute (EA) name contains at least one illegal character. (code=0x80000013).
        /// </summary>
        internal static string STATUS_INVALID_EA_NAME {
            get {
                return ResourceManager.GetString("STATUS_INVALID_EA_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Bad File} The attributes of the specified mapping file for a section of memory cannot be read. (code=0xC0000020).
        /// </summary>
        internal static string STATUS_INVALID_FILE_FOR_SECTION {
            get {
                return ResourceManager.GetString("STATUS_INVALID_FILE_FOR_SECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified attributes are invalid or are incompatible with the attributes for the group as a whole. (code=0xC00000A4).
        /// </summary>
        internal static string STATUS_INVALID_GROUP_ATTRIBUTES {
            get {
                return ResourceManager.GetString("STATUS_INVALID_GROUP_ATTRIBUTES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid HANDLE was specified. (code=0xC0000008).
        /// </summary>
        internal static string STATUS_INVALID_HANDLE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified hardware profile configuration is invalid. (code=0xC0000260).
        /// </summary>
        internal static string STATUS_INVALID_HW_PROFILE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_HW_PROFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value provided was an invalid value for an identifier authority. (code=0xC0000084).
        /// </summary>
        internal static string STATUS_INVALID_ID_AUTHORITY {
            get {
                return ResourceManager.GetString("STATUS_INVALID_ID_AUTHORITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that the specified string is not valid for IDN normalization. (code=0xC0000716).
        /// </summary>
        internal static string STATUS_INVALID_IDN_NORMALIZATION {
            get {
                return ResourceManager.GetString("STATUS_INVALID_IDN_NORMALIZATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Bad Image} %hs is either not designed to run on Windows or it contains an error. Try installing the program again using the original installation media or contact your system administrator or the software vendor for support. (code=0xC000007B).
        /// </summary>
        internal static string STATUS_INVALID_IMAGE_FORMAT {
            get {
                return ResourceManager.GetString("STATUS_INVALID_IMAGE_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hash for image %hs cannot be found in the system catalogs. The image is likely corrupt or the victim of tampering. (code=0xC0000428).
        /// </summary>
        internal static string STATUS_INVALID_IMAGE_HASH {
            get {
                return ResourceManager.GetString("STATUS_INVALID_IMAGE_HASH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified image file did not have the correct format: it appears to be LE format. (code=0xC000012E).
        /// </summary>
        internal static string STATUS_INVALID_IMAGE_LE_FORMAT {
            get {
                return ResourceManager.GetString("STATUS_INVALID_IMAGE_LE_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified image file did not have the correct format. It appears to be NE format. (code=0xC000011B).
        /// </summary>
        internal static string STATUS_INVALID_IMAGE_NE_FORMAT {
            get {
                return ResourceManager.GetString("STATUS_INVALID_IMAGE_NE_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified image file did not have the correct format: it did not have an initial MZ. (code=0xC000012F).
        /// </summary>
        internal static string STATUS_INVALID_IMAGE_NOT_MZ {
            get {
                return ResourceManager.GetString("STATUS_INVALID_IMAGE_NOT_MZ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified image file did not have the correct format: it did not have a proper e_lfarlc in the MZ header. (code=0xC0000130).
        /// </summary>
        internal static string STATUS_INVALID_IMAGE_PROTECT {
            get {
                return ResourceManager.GetString("STATUS_INVALID_IMAGE_PROTECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified image file did not have the correct format: it appears to be a 16-bit Windows image. (code=0xC0000131).
        /// </summary>
        internal static string STATUS_INVALID_IMAGE_WIN_16 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_IMAGE_WIN_16", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified image file did not have the correct format; it appears to be a 32-bit Windows image. (code=0xC0000359).
        /// </summary>
        internal static string STATUS_INVALID_IMAGE_WIN_32 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_IMAGE_WIN_32", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified image file did not have the correct format; it appears to be a 64-bit Windows image. (code=0xC000035A).
        /// </summary>
        internal static string STATUS_INVALID_IMAGE_WIN_64 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_IMAGE_WIN_64", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A dynamic link library (DLL) referenced a module that was neither a DLL nor the process&apos;s executable image. (code=0xC000036F).
        /// </summary>
        internal static string STATUS_INVALID_IMPORT_OF_NON_DLL {
            get {
                return ResourceManager.GetString("STATUS_INVALID_IMPORT_OF_NON_DLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Invalid Parameter} The specified information class is not a valid information class for the specified object. (code=0xC0000003).
        /// </summary>
        internal static string STATUS_INVALID_INFO_CLASS {
            get {
                return ResourceManager.GetString("STATUS_INVALID_INFO_CLASS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates a particular Security ID cannot be assigned as the label of an object. (code=0xC0000446).
        /// </summary>
        internal static string STATUS_INVALID_LABEL {
            get {
                return ResourceManager.GetString("STATUS_INVALID_LABEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that the user supplied an invalid descriptor when trying to set up LDT descriptors. (code=0xC000011A).
        /// </summary>
        internal static string STATUS_INVALID_LDT_DESCRIPTOR {
            get {
                return ResourceManager.GetString("STATUS_INVALID_LDT_DESCRIPTOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that the starting value for the LDT information was not an integral multiple of the selector size. (code=0xC0000119).
        /// </summary>
        internal static string STATUS_INVALID_LDT_OFFSET {
            get {
                return ResourceManager.GetString("STATUS_INVALID_LDT_OFFSET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that an attempt was made to grow an LDT by setting its size, or that the size was not an even number of selectors. (code=0xC0000118).
        /// </summary>
        internal static string STATUS_INVALID_LDT_SIZE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_LDT_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Incorrect System Call Level} An invalid level was passed into the specified system call. (code=0xC0000148).
        /// </summary>
        internal static string STATUS_INVALID_LEVEL {
            get {
                return ResourceManager.GetString("STATUS_INVALID_LEVEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A requested file lock operation cannot be processed due to an invalid byte range. (code=0xC00001A1).
        /// </summary>
        internal static string STATUS_INVALID_LOCK_RANGE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_LOCK_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Invalid Lock Sequence} An attempt was made to execute an invalid lock sequence. (code=0xC000001E).
        /// </summary>
        internal static string STATUS_INVALID_LOCK_SEQUENCE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_LOCK_SEQUENCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user account has time restrictions and cannot be logged onto at this time. (code=0xC000006F).
        /// </summary>
        internal static string STATUS_INVALID_LOGON_HOURS {
            get {
                return ResourceManager.GetString("STATUS_INVALID_LOGON_HOURS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates an invalid value has been provided for the LogonType requested. (code=0xC000010B).
        /// </summary>
        internal static string STATUS_INVALID_LOGON_TYPE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_LOGON_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new member could not be added to a local group because the member has the wrong account type. (code=0xC000017B).
        /// </summary>
        internal static string STATUS_INVALID_MEMBER {
            get {
                return ResourceManager.GetString("STATUS_INVALID_MEMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ALPC message supplied is invalid. (code=0xC0000702).
        /// </summary>
        internal static string STATUS_INVALID_MESSAGE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_MESSAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network responded incorrectly. (code=0xC00000C3).
        /// </summary>
        internal static string STATUS_INVALID_NETWORK_RESPONSE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_NETWORK_RESPONSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error status returned when an invalid opportunistic lock (oplock) acknowledgment is received by a file system. (code=0xC00000E3).
        /// </summary>
        internal static string STATUS_INVALID_OPLOCK_PROTOCOL {
            get {
                return ResourceManager.GetString("STATUS_INVALID_OPLOCK_PROTOCOL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates a particular security ID cannot be assigned as the owner of an object. (code=0xC000005A).
        /// </summary>
        internal static string STATUS_INVALID_OWNER {
            get {
                return ResourceManager.GetString("STATUS_INVALID_OWNER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified page protection was not valid. (code=0xC0000045).
        /// </summary>
        internal static string STATUS_INVALID_PAGE_PROTECTION {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PAGE_PROTECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to a service or function. (code=0xC000000D).
        /// </summary>
        internal static string STATUS_INVALID_PARAMETER {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to a service or function as the first argument. (code=0xC00000EF).
        /// </summary>
        internal static string STATUS_INVALID_PARAMETER_1 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PARAMETER_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to a service or function as the tenth argument. (code=0xC00000F8).
        /// </summary>
        internal static string STATUS_INVALID_PARAMETER_10 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PARAMETER_10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to a service or function as the eleventh argument. (code=0xC00000F9).
        /// </summary>
        internal static string STATUS_INVALID_PARAMETER_11 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PARAMETER_11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to a service or function as the twelfth argument. (code=0xC00000FA).
        /// </summary>
        internal static string STATUS_INVALID_PARAMETER_12 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PARAMETER_12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to a service or function as the second argument. (code=0xC00000F0).
        /// </summary>
        internal static string STATUS_INVALID_PARAMETER_2 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PARAMETER_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to a service or function as the third argument. (code=0xC00000F1).
        /// </summary>
        internal static string STATUS_INVALID_PARAMETER_3 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PARAMETER_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to a service or function as the fourth argument. (code=0xC00000F2).
        /// </summary>
        internal static string STATUS_INVALID_PARAMETER_4 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PARAMETER_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to a service or function as the fifth argument. (code=0xC00000F3).
        /// </summary>
        internal static string STATUS_INVALID_PARAMETER_5 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PARAMETER_5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to a service or function as the sixth argument. (code=0xC00000F4).
        /// </summary>
        internal static string STATUS_INVALID_PARAMETER_6 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PARAMETER_6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to a service or function as the seventh argument. (code=0xC00000F5).
        /// </summary>
        internal static string STATUS_INVALID_PARAMETER_7 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PARAMETER_7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to a service or function as the eighth argument. (code=0xC00000F6).
        /// </summary>
        internal static string STATUS_INVALID_PARAMETER_8 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PARAMETER_8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to a service or function as the ninth argument. (code=0xC00000F7).
        /// </summary>
        internal static string STATUS_INVALID_PARAMETER_9 {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PARAMETER_9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid combination of parameters was specified. (code=0xC0000030).
        /// </summary>
        internal static string STATUS_INVALID_PARAMETER_MIX {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PARAMETER_MIX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The named pipe is not in the connected or closing state. (code=0xC00000AD).
        /// </summary>
        internal static string STATUS_INVALID_PIPE_STATE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PIPE_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified Plug and Play registry device path is invalid. (code=0xC0000261).
        /// </summary>
        internal static string STATUS_INVALID_PLUGPLAY_DEVICE_PATH {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PLUGPLAY_DEVICE_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid object attributes specified to NtCreatePort or invalid port attributes specified to NtConnectPort. (code=0xC000002E).
        /// </summary>
        internal static string STATUS_INVALID_PORT_ATTRIBUTES {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PORT_ATTRIBUTES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of port handle is invalid for the operation that is requested. (code=0xC0000042).
        /// </summary>
        internal static string STATUS_INVALID_PORT_HANDLE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PORT_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates a particular security ID cannot be assigned as the primary group of an object. (code=0xC000005B).
        /// </summary>
        internal static string STATUS_INVALID_PRIMARY_GROUP {
            get {
                return ResourceManager.GetString("STATUS_INVALID_PRIMARY_GROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to lower a quota limit below the current usage. (code=0xC0000031).
        /// </summary>
        internal static string STATUS_INVALID_QUOTA_LOWER {
            get {
                return ResourceManager.GetString("STATUS_INVALID_QUOTA_LOWER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified named pipe is not in message mode. (code=0xC00000B4).
        /// </summary>
        internal static string STATUS_INVALID_READ_MODE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_READ_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the SECURITY_DESCRIPTOR structure is not valid. (code=0xC0000079).
        /// </summary>
        internal static string STATUS_INVALID_SECURITY_DESCR {
            get {
                return ResourceManager.GetString("STATUS_INVALID_SECURITY_DESCR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the Sam Server was in the wrong state to perform the desired operation. (code=0xC00000DC).
        /// </summary>
        internal static string STATUS_INVALID_SERVER_STATE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_SERVER_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the SID structure is not valid. (code=0xC0000078).
        /// </summary>
        internal static string STATUS_INVALID_SID {
            get {
                return ResourceManager.GetString("STATUS_INVALID_SID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cryptographic signature is invalid. (code=0xC000A000).
        /// </summary>
        internal static string STATUS_INVALID_SIGNATURE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_SIGNATURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the sub-authority value is invalid for the particular use. (code=0xC0000076).
        /// </summary>
        internal static string STATUS_INVALID_SUB_AUTHORITY {
            get {
                return ResourceManager.GetString("STATUS_INVALID_SUB_AUTHORITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid system service was specified in a system service call. (code=0xC000001C).
        /// </summary>
        internal static string STATUS_INVALID_SYSTEM_SERVICE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_SYSTEM_SERVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified task index is invalid. (code=0xC0000501).
        /// </summary>
        internal static string STATUS_INVALID_TASK_INDEX {
            get {
                return ResourceManager.GetString("STATUS_INVALID_TASK_INDEX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified task name is invalid. (code=0xC0000500).
        /// </summary>
        internal static string STATUS_INVALID_TASK_NAME {
            get {
                return ResourceManager.GetString("STATUS_INVALID_TASK_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid thread, handle %p, is specified for this operation. Possibly, a threadpool worker thread was specified. (code=0xC000071C).
        /// </summary>
        internal static string STATUS_INVALID_THREAD {
            get {
                return ResourceManager.GetString("STATUS_INVALID_THREAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token representing the data is invalid or expired. (code=0xC0000465).
        /// </summary>
        internal static string STATUS_INVALID_TOKEN {
            get {
                return ResourceManager.GetString("STATUS_INVALID_TOKEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction handle associated with this operation is invalid. (code=0xC0190002).
        /// </summary>
        internal static string STATUS_INVALID_TRANSACTION {
            get {
                return ResourceManager.GetString("STATUS_INVALID_TRANSACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid unwind target was encountered during an unwind operation. (code=0xC0000029).
        /// </summary>
        internal static string STATUS_INVALID_UNWIND_TARGET {
            get {
                return ResourceManager.GetString("STATUS_INVALID_UNWIND_TARGET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An access to a user buffer failed at an expected point in time. This code is defined because the caller does not want to accept STATUS_ACCESS_VIOLATION in its filter. (code=0xC00000E8).
        /// </summary>
        internal static string STATUS_INVALID_USER_BUFFER {
            get {
                return ResourceManager.GetString("STATUS_INVALID_USER_BUFFER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The User Principal Name (UPN) is invalid. (code=0xC000041C).
        /// </summary>
        internal static string STATUS_INVALID_USER_PRINCIPAL_NAME {
            get {
                return ResourceManager.GetString("STATUS_INVALID_USER_PRINCIPAL_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied variant structure contains invalid data. (code=0xC0000232).
        /// </summary>
        internal static string STATUS_INVALID_VARIANT {
            get {
                return ResourceManager.GetString("STATUS_INVALID_VARIANT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Invalid Mapping} An attempt was made to create a view for a section that is bigger than the section. (code=0xC000001F).
        /// </summary>
        internal static string STATUS_INVALID_VIEW_SIZE {
            get {
                return ResourceManager.GetString("STATUS_INVALID_VIEW_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid volume label has been specified. (code=0xC0000086).
        /// </summary>
        internal static string STATUS_INVALID_VOLUME_LABEL {
            get {
                return ResourceManager.GetString("STATUS_INVALID_VOLUME_LABEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user account is restricted so that it cannot be used to log on from the source workstation. (code=0xC0000070).
        /// </summary>
        internal static string STATUS_INVALID_WORKSTATION {
            get {
                return ResourceManager.GetString("STATUS_INVALID_WORKSTATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The I/O device reported an I/O error. (code=0xC0000185).
        /// </summary>
        internal static string STATUS_IO_DEVICE_ERROR {
            get {
                return ResourceManager.GetString("STATUS_IO_DEVICE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Privilege Failed} The I/O permissions for the process could not be changed. (code=0xC0000137).
        /// </summary>
        internal static string STATUS_IO_PRIVILEGE_FAILED {
            get {
                return ResourceManager.GetString("STATUS_IO_PRIVILEGE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reissue the given operation as a cached I/O operation (code=0xC0040039).
        /// </summary>
        internal static string STATUS_IO_REISSUE_AS_CACHED {
            get {
                return ResourceManager.GetString("STATUS_IO_REISSUE_AS_CACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user data passed for the NTFS reparse point is invalid. (code=0xC0000278).
        /// </summary>
        internal static string STATUS_IO_REPARSE_DATA_INVALID {
            get {
                return ResourceManager.GetString("STATUS_IO_REPARSE_DATA_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows I/O reparse tag passed for the NTFS reparse point is invalid. (code=0xC0000276).
        /// </summary>
        internal static string STATUS_IO_REPARSE_TAG_INVALID {
            get {
                return ResourceManager.GetString("STATUS_IO_REPARSE_TAG_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Windows I/O reparse tag does not match the one that is in the NTFS reparse point. (code=0xC0000277).
        /// </summary>
        internal static string STATUS_IO_REPARSE_TAG_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_IO_REPARSE_TAG_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The layered file system driver for this I/O tag did not handle it when needed. (code=0xC0000279).
        /// </summary>
        internal static string STATUS_IO_REPARSE_TAG_NOT_HANDLED {
            get {
                return ResourceManager.GetString("STATUS_IO_REPARSE_TAG_NOT_HANDLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Device Timeout} The specified I/O operation on %hs was not completed before the time-out period expired. (code=0xC00000B5).
        /// </summary>
        internal static string STATUS_IO_TIMEOUT {
            get {
                return ResourceManager.GetString("STATUS_IO_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is an IP address conflict with another system on the network. (code=0xC0000254).
        /// </summary>
        internal static string STATUS_IP_ADDRESS_CONFLICT1 {
            get {
                return ResourceManager.GetString("STATUS_IP_ADDRESS_CONFLICT1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is an IP address conflict with another system on the network. (code=0xC0000255).
        /// </summary>
        internal static string STATUS_IP_ADDRESS_CONFLICT2 {
            get {
                return ResourceManager.GetString("STATUS_IP_ADDRESS_CONFLICT2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IPsec dropped an incoming ESP packet in authenticated firewall mode.  This drop is benign. (code=0xC0360008).
        /// </summary>
        internal static string STATUS_IPSEC_AUTH_FIREWALL_DROP {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_AUTH_FIREWALL_DROP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SPI in the packet does not match a valid IPsec SA. (code=0xC0360001).
        /// </summary>
        internal static string STATUS_IPSEC_BAD_SPI {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_BAD_SPI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IPsec dropped a clear text packet. (code=0xC0360007).
        /// </summary>
        internal static string STATUS_IPSEC_CLEAR_TEXT_DROP {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_CLEAR_TEXT_DROP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IPsec Dos Protection matched an explicit block rule. (code=0xC0368000).
        /// </summary>
        internal static string STATUS_IPSEC_DOSP_BLOCK {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_DOSP_BLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IPsec Dos Protection received an incorrectly formatted packet. (code=0xC0368002).
        /// </summary>
        internal static string STATUS_IPSEC_DOSP_INVALID_PACKET {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_DOSP_INVALID_PACKET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IPsec Dos Protection received an IPsec negotiation packet for a keying module which is not allowed by policy. (code=0xC0368005).
        /// </summary>
        internal static string STATUS_IPSEC_DOSP_KEYMOD_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_DOSP_KEYMOD_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IPsec Dos Protection failed to create state because there are already maximum number of entries allowed by policy. (code=0xC0368004).
        /// </summary>
        internal static string STATUS_IPSEC_DOSP_MAX_ENTRIES {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_DOSP_MAX_ENTRIES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IPsec Dos Protection failed to create per internal IP ratelimit queue because there is already maximum number of queues allowed by policy. (code=0xC0368006).
        /// </summary>
        internal static string STATUS_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IPsec Dos Protection received an IPsec specific multicast packet which is not allowed. (code=0xC0368001).
        /// </summary>
        internal static string STATUS_IPSEC_DOSP_RECEIVED_MULTICAST {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_DOSP_RECEIVED_MULTICAST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IPsec Dos Protection failed to lookup state. (code=0xC0368003).
        /// </summary>
        internal static string STATUS_IPSEC_DOSP_STATE_LOOKUP_FAILED {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_DOSP_STATE_LOOKUP_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IPsec integrity check failed. (code=0xC0360006).
        /// </summary>
        internal static string STATUS_IPSEC_INTEGRITY_CHECK_FAILED {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_INTEGRITY_CHECK_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IPsec header and/or trailer in the packet is invalid. (code=0xC0360005).
        /// </summary>
        internal static string STATUS_IPSEC_INVALID_PACKET {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_INVALID_PACKET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IPsec queue overflowed. (code=0xC000A010).
        /// </summary>
        internal static string STATUS_IPSEC_QUEUE_OVERFLOW {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_QUEUE_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The packet sequence number replay check failed. (code=0xC0360004).
        /// </summary>
        internal static string STATUS_IPSEC_REPLAY_CHECK_FAILED {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_REPLAY_CHECK_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The packet was received on an IPsec SA whose lifetime has expired. (code=0xC0360002).
        /// </summary>
        internal static string STATUS_IPSEC_SA_LIFETIME_EXPIRED {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_SA_LIFETIME_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IPsec dropped a packet due to DOS throttle. (code=0xC0360009).
        /// </summary>
        internal static string STATUS_IPSEC_THROTTLE_DROP {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_THROTTLE_DROP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The packet was received on an IPsec SA that does not match the packet characteristics. (code=0xC0360003).
        /// </summary>
        internal static string STATUS_IPSEC_WRONG_SA {
            get {
                return ResourceManager.GetString("STATUS_IPSEC_WRONG_SA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An untrusted certificate authority was detected while processing the smart card certificate that is used for authentication. Contact your system administrator. (code=0xC000038A).
        /// </summary>
        internal static string STATUS_ISSUING_CA_UNTRUSTED {
            get {
                return ResourceManager.GetString("STATUS_ISSUING_CA_UNTRUSTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An untrusted certificate authority was detected while processing the domain controller certificate used for authentication. There is additional information in the system event log. Contact your system administrator. (code=0xC000040D).
        /// </summary>
        internal static string STATUS_ISSUING_CA_UNTRUSTED_KDC {
            get {
                return ResourceManager.GetString("STATUS_ISSUING_CA_UNTRUSTED_KDC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The volume change journal is being deleted. (code=0xC00002B7).
        /// </summary>
        internal static string STATUS_JOURNAL_DELETE_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_JOURNAL_DELETE_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The journal entry has been deleted from the journal. (code=0xC00002CF).
        /// </summary>
        internal static string STATUS_JOURNAL_ENTRY_DELETED {
            get {
                return ResourceManager.GetString("STATUS_JOURNAL_ENTRY_DELETED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The volume change journal is not active. (code=0xC00002B8).
        /// </summary>
        internal static string STATUS_JOURNAL_NOT_ACTIVE {
            get {
                return ResourceManager.GetString("STATUS_JOURNAL_NOT_ACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The domain controller certificate used for smart card logon has expired. Contact your system administrator with the contents of your system event log. (code=0xC000040E).
        /// </summary>
        internal static string STATUS_KDC_CERT_EXPIRED {
            get {
                return ResourceManager.GetString("STATUS_KDC_CERT_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The domain controller certificate used for smart card logon has been revoked. Contact your system administrator with the contents of your system event log. (code=0xC000040F).
        /// </summary>
        internal static string STATUS_KDC_CERT_REVOKED {
            get {
                return ResourceManager.GetString("STATUS_KDC_CERT_REVOKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid request was sent to the KDC. (code=0xC00002FB).
        /// </summary>
        internal static string STATUS_KDC_INVALID_REQUEST {
            get {
                return ResourceManager.GetString("STATUS_KDC_INVALID_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The KDC was unable to generate a referral for the service requested. (code=0xC00002FC).
        /// </summary>
        internal static string STATUS_KDC_UNABLE_TO_REFER {
            get {
                return ResourceManager.GetString("STATUS_KDC_UNABLE_TO_REFER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The encryption type requested is not supported by the KDC. (code=0xC00002FD).
        /// </summary>
        internal static string STATUS_KDC_UNKNOWN_ETYPE {
            get {
                return ResourceManager.GetString("STATUS_KDC_UNKNOWN_ETYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An illegal operation was attempted on a registry key that has been marked for deletion. (code=0xC000017C).
        /// </summary>
        internal static string STATUS_KEY_DELETED {
            get {
                return ResourceManager.GetString("STATUS_KEY_DELETED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to create a symbolic link in a registry key that already has subkeys or values. (code=0xC0000180).
        /// </summary>
        internal static string STATUS_KEY_HAS_CHILDREN {
            get {
                return ResourceManager.GetString("STATUS_KEY_HAS_CHILDREN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the requested operation would disable or delete the last remaining administration account. This is not allowed to prevent creating a situation in which the system cannot be administrated. (code=0xC0000069).
        /// </summary>
        internal static string STATUS_LAST_ADMIN {
            get {
                return ResourceManager.GetString("STATUS_LAST_ADMIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The service being accessed is licensed for a particular number of connections. No more connections can be made to the service at this time because the service has already accepted the maximum number of connections. (code=0xC0000259).
        /// </summary>
        internal static string STATUS_LICENSE_QUOTA_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_LICENSE_QUOTA_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {License Violation} The system has detected tampering with your registered product type. This is a violation of your software license. Tampering with the product type is not permitted. (code=0xC000026A).
        /// </summary>
        internal static string STATUS_LICENSE_VIOLATION {
            get {
                return ResourceManager.GetString("STATUS_LICENSE_VIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Virtual Circuit Closed} An existing connection (virtual circuit) has been broken at the remote computer. There is probably something wrong with the network software protocol or the network hardware on the remote computer. (code=0xC000013E).
        /// </summary>
        internal static string STATUS_LINK_FAILED {
            get {
                return ResourceManager.GetString("STATUS_LINK_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Virtual Circuit Closed} The network transport on your computer has closed a network connection because it had to wait too long for a response from the remote computer. (code=0xC000013F).
        /// </summary>
        internal static string STATUS_LINK_TIMEOUT {
            get {
                return ResourceManager.GetString("STATUS_LINK_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to change a user password in the security account manager without providing the necessary LM cross-encrypted password. (code=0xC000017F).
        /// </summary>
        internal static string STATUS_LM_CROSS_ENCRYPTION_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_LM_CROSS_ENCRYPTION_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Virtual Circuit Closed} The network transport on your computer has closed a network connection. There might or might not be I/O requests outstanding. (code=0xC000013B).
        /// </summary>
        internal static string STATUS_LOCAL_DISCONNECT {
            get {
                return ResourceManager.GetString("STATUS_LOCAL_DISCONNECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Local Session Key} A user session key was requested for a local remote procedure call (RPC) connection. The session key that is returned is a constant value and not unique to this connection. (code=0x40000006).
        /// </summary>
        internal static string STATUS_LOCAL_USER_SESSION_KEY {
            get {
                return ResourceManager.GetString("STATUS_LOCAL_USER_SESSION_KEY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A requested file lock cannot be granted due to other existing locks. (code=0xC0000055).
        /// </summary>
        internal static string STATUS_LOCK_NOT_GRANTED {
            get {
                return ResourceManager.GetString("STATUS_LOCK_NOT_GRANTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Records were appended to the log or reservation changes were made, but the log could not be flushed. (code=0xC01A002F).
        /// </summary>
        internal static string STATUS_LOG_APPENDED_FLUSH_FAILED {
            get {
                return ResourceManager.GetString("STATUS_LOG_APPENDED_FLUSH_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log archival is in progress. (code=0xC01A0021).
        /// </summary>
        internal static string STATUS_LOG_ARCHIVE_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_LOG_ARCHIVE_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation requires an archive context. (code=0xC01A0020).
        /// </summary>
        internal static string STATUS_LOG_ARCHIVE_NOT_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_LOG_ARCHIVE_NOT_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered a partial or incomplete log block. (code=0xC01A0004).
        /// </summary>
        internal static string STATUS_LOG_BLOCK_INCOMPLETE {
            get {
                return ResourceManager.GetString("STATUS_LOG_BLOCK_INCOMPLETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered an invalid log block. (code=0xC01A000A).
        /// </summary>
        internal static string STATUS_LOG_BLOCK_INVALID {
            get {
                return ResourceManager.GetString("STATUS_LOG_BLOCK_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered an invalid log block version. (code=0xC01A0009).
        /// </summary>
        internal static string STATUS_LOG_BLOCK_VERSION {
            get {
                return ResourceManager.GetString("STATUS_LOG_BLOCK_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service user-log marshaling buffers are exhausted. (code=0xC01A0006).
        /// </summary>
        internal static string STATUS_LOG_BLOCKS_EXHAUSTED {
            get {
                return ResourceManager.GetString("STATUS_LOG_BLOCKS_EXHAUSTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service cannot delete the log file or the file system container. (code=0xC01A0011).
        /// </summary>
        internal static string STATUS_LOG_CANT_DELETE {
            get {
                return ResourceManager.GetString("STATUS_LOG_CANT_DELETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A log client has already registered on the stream. (code=0xC01A0024).
        /// </summary>
        internal static string STATUS_LOG_CLIENT_ALREADY_REGISTERED {
            get {
                return ResourceManager.GetString("STATUS_LOG_CLIENT_ALREADY_REGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A log client has not been registered on the stream. (code=0xC01A0025).
        /// </summary>
        internal static string STATUS_LOG_CLIENT_NOT_REGISTERED {
            get {
                return ResourceManager.GetString("STATUS_LOG_CLIENT_NOT_REGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service has reached the maximum allowable containers allocated to a log file. (code=0xC01A0012).
        /// </summary>
        internal static string STATUS_LOG_CONTAINER_LIMIT_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_LOG_CONTAINER_LIMIT_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered an error when attempting to open a log container. (code=0xC01A0029).
        /// </summary>
        internal static string STATUS_LOG_CONTAINER_OPEN_FAILED {
            get {
                return ResourceManager.GetString("STATUS_LOG_CONTAINER_OPEN_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered an error when attempting to read from a log container. (code=0xC01A0027).
        /// </summary>
        internal static string STATUS_LOG_CONTAINER_READ_FAILED {
            get {
                return ResourceManager.GetString("STATUS_LOG_CONTAINER_READ_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered an invalid container state when attempting a requested action. (code=0xC01A002A).
        /// </summary>
        internal static string STATUS_LOG_CONTAINER_STATE_INVALID {
            get {
                return ResourceManager.GetString("STATUS_LOG_CONTAINER_STATE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered an error when attempting to write to a log container. (code=0xC01A0028).
        /// </summary>
        internal static string STATUS_LOG_CONTAINER_WRITE_FAILED {
            get {
                return ResourceManager.GetString("STATUS_LOG_CONTAINER_WRITE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log data is corrupt. (code=0xC0190030).
        /// </summary>
        internal static string STATUS_LOG_CORRUPTION_DETECTED {
            get {
                return ResourceManager.GetString("STATUS_LOG_CORRUPTION_DETECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation failed because the log is dedicated. (code=0xC01A001F).
        /// </summary>
        internal static string STATUS_LOG_DEDICATED {
            get {
                return ResourceManager.GetString("STATUS_LOG_DEDICATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation requires a nonephemeral log, but the log is ephemeral. (code=0xC01A0022).
        /// </summary>
        internal static string STATUS_LOG_EPHEMERAL {
            get {
                return ResourceManager.GetString("STATUS_LOG_EPHEMERAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log file space is insufficient to support this operation. (code=0xC0000188).
        /// </summary>
        internal static string STATUS_LOG_FILE_FULL {
            get {
                return ResourceManager.GetString("STATUS_LOG_FILE_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log space is exhausted. (code=0xC01A001D).
        /// </summary>
        internal static string STATUS_LOG_FULL {
            get {
                return ResourceManager.GetString("STATUS_LOG_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A request has already been made to handle the log full condition. (code=0xC01A0026).
        /// </summary>
        internal static string STATUS_LOG_FULL_HANDLER_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_LOG_FULL_HANDLER_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to create space in the transactional resource manager&apos;s log failed. The failure status has been recorded in the event log. (code=0xC0190019).
        /// </summary>
        internal static string STATUS_LOG_GROWTH_FAILED {
            get {
                return ResourceManager.GetString("STATUS_LOG_GROWTH_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application popup: %1 : %2 (code=0x4000001A).
        /// </summary>
        internal static string STATUS_LOG_HARD_ERROR {
            get {
                return ResourceManager.GetString("STATUS_LOG_HARD_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security on the log and its containers is inconsistent. (code=0xC01A002E).
        /// </summary>
        internal static string STATUS_LOG_INCONSISTENT_SECURITY {
            get {
                return ResourceManager.GetString("STATUS_LOG_INCONSISTENT_SECURITY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered an attempt to access data outside the active log range. (code=0xC01A0005).
        /// </summary>
        internal static string STATUS_LOG_INVALID_RANGE {
            get {
                return ResourceManager.GetString("STATUS_LOG_INVALID_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered a corrupted metadata file. (code=0xC01A000D).
        /// </summary>
        internal static string STATUS_LOG_METADATA_CORRUPT {
            get {
                return ResourceManager.GetString("STATUS_LOG_METADATA_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log metadata flush failed. (code=0xC01A002D).
        /// </summary>
        internal static string STATUS_LOG_METADATA_FLUSH_FAILED {
            get {
                return ResourceManager.GetString("STATUS_LOG_METADATA_FLUSH_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered a metadata file with inconsistent data. (code=0xC01A000F).
        /// </summary>
        internal static string STATUS_LOG_METADATA_INCONSISTENT {
            get {
                return ResourceManager.GetString("STATUS_LOG_METADATA_INCONSISTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered a metadata file that could not be created by the log file system. (code=0xC01A000E).
        /// </summary>
        internal static string STATUS_LOG_METADATA_INVALID {
            get {
                return ResourceManager.GetString("STATUS_LOG_METADATA_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log is multiplexed; no direct writes to the physical log are allowed. (code=0xC01A001E).
        /// </summary>
        internal static string STATUS_LOG_MULTIPLEXED {
            get {
                return ResourceManager.GetString("STATUS_LOG_MULTIPLEXED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered a log stream with no restart area. (code=0x401A000C).
        /// </summary>
        internal static string STATUS_LOG_NO_RESTART {
            get {
                return ResourceManager.GetString("STATUS_LOG_NO_RESTART", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log must have at least two containers before it can be read from or written to. (code=0xC01A0023).
        /// </summary>
        internal static string STATUS_LOG_NOT_ENOUGH_CONTAINERS {
            get {
                return ResourceManager.GetString("STATUS_LOG_NOT_ENOUGH_CONTAINERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log space cannot be reclaimed because the log is pinned. (code=0xC01A002C).
        /// </summary>
        internal static string STATUS_LOG_PINNED {
            get {
                return ResourceManager.GetString("STATUS_LOG_PINNED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log space cannot be reclaimed because the log is pinned by the archive tail. (code=0xC01A0018).
        /// </summary>
        internal static string STATUS_LOG_PINNED_ARCHIVE_TAIL {
            get {
                return ResourceManager.GetString("STATUS_LOG_PINNED_ARCHIVE_TAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log is pinned due to reservation consuming most of the log space. Free some reserved records to make space available. (code=0xC01A0030).
        /// </summary>
        internal static string STATUS_LOG_PINNED_RESERVATION {
            get {
                return ResourceManager.GetString("STATUS_LOG_PINNED_RESERVATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log policy could not be installed because a policy of the same type is already present. (code=0xC01A0014).
        /// </summary>
        internal static string STATUS_LOG_POLICY_ALREADY_INSTALLED {
            get {
                return ResourceManager.GetString("STATUS_LOG_POLICY_ALREADY_INSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A policy on the log in question prevented the operation from completing. (code=0xC01A0017).
        /// </summary>
        internal static string STATUS_LOG_POLICY_CONFLICT {
            get {
                return ResourceManager.GetString("STATUS_LOG_POLICY_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The installed set of policies on the log is invalid. (code=0xC01A0016).
        /// </summary>
        internal static string STATUS_LOG_POLICY_INVALID {
            get {
                return ResourceManager.GetString("STATUS_LOG_POLICY_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log policy in question was not installed at the time of the request. (code=0xC01A0015).
        /// </summary>
        internal static string STATUS_LOG_POLICY_NOT_INSTALLED {
            get {
                return ResourceManager.GetString("STATUS_LOG_POLICY_NOT_INSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered an attempt to read from a marshaling area with an invalid read context. (code=0xC01A0007).
        /// </summary>
        internal static string STATUS_LOG_READ_CONTEXT_INVALID {
            get {
                return ResourceManager.GetString("STATUS_LOG_READ_CONTEXT_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered an attempt to read the log with an invalid read mode. (code=0xC01A000B).
        /// </summary>
        internal static string STATUS_LOG_READ_MODE_INVALID {
            get {
                return ResourceManager.GetString("STATUS_LOG_READ_MODE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log record is not a record in the log file. (code=0xC01A0019).
        /// </summary>
        internal static string STATUS_LOG_RECORD_NONEXISTENT {
            get {
                return ResourceManager.GetString("STATUS_LOG_RECORD_NONEXISTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of reserved log records or the adjustment of the number of reserved log records is invalid. (code=0xC01A001A).
        /// </summary>
        internal static string STATUS_LOG_RECORDS_RESERVED_INVALID {
            get {
                return ResourceManager.GetString("STATUS_LOG_RECORDS_RESERVED_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered an attempt to erroneously allocate or dispose reservation space. (code=0xC01A0010).
        /// </summary>
        internal static string STATUS_LOG_RESERVATION_INVALID {
            get {
                return ResourceManager.GetString("STATUS_LOG_RESERVATION_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested log size for the file system resource manager is invalid. (code=0xC019000B).
        /// </summary>
        internal static string STATUS_LOG_RESIZE_INVALID_SIZE {
            get {
                return ResourceManager.GetString("STATUS_LOG_RESIZE_INVALID_SIZE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered an invalid log restart area. (code=0xC01A0008).
        /// </summary>
        internal static string STATUS_LOG_RESTART_INVALID {
            get {
                return ResourceManager.GetString("STATUS_LOG_RESTART_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service found an invalid log sector. (code=0xC01A0001).
        /// </summary>
        internal static string STATUS_LOG_SECTOR_INVALID {
            get {
                return ResourceManager.GetString("STATUS_LOG_SECTOR_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered a log sector with invalid block parity. (code=0xC01A0002).
        /// </summary>
        internal static string STATUS_LOG_SECTOR_PARITY_INVALID {
            get {
                return ResourceManager.GetString("STATUS_LOG_SECTOR_PARITY_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service encountered a remapped log sector. (code=0xC01A0003).
        /// </summary>
        internal static string STATUS_LOG_SECTOR_REMAPPED {
            get {
                return ResourceManager.GetString("STATUS_LOG_SECTOR_REMAPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The reserved log space or the adjustment of the log space is invalid. (code=0xC01A001B).
        /// </summary>
        internal static string STATUS_LOG_SPACE_RESERVED_INVALID {
            get {
                return ResourceManager.GetString("STATUS_LOG_SPACE_RESERVED_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service has attempted to read or write backward past the start of the log. (code=0xC01A0013).
        /// </summary>
        internal static string STATUS_LOG_START_OF_LOG {
            get {
                return ResourceManager.GetString("STATUS_LOG_START_OF_LOG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The log service is not in the correct state to perform a requested action. (code=0xC01A002B).
        /// </summary>
        internal static string STATUS_LOG_STATE_INVALID {
            get {
                return ResourceManager.GetString("STATUS_LOG_STATE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new or existing archive tail or the base of the active log is invalid. (code=0xC01A001C).
        /// </summary>
        internal static string STATUS_LOG_TAIL_INVALID {
            get {
                return ResourceManager.GetString("STATUS_LOG_TAIL_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempting to log on during an unauthorized time of day for this account. (code=0xC0000247).
        /// </summary>
        internal static string STATUS_LOGIN_TIME_RESTRICTION {
            get {
                return ResourceManager.GetString("STATUS_LOGIN_TIME_RESTRICTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The account is not authorized to log on from this station. (code=0xC0000248).
        /// </summary>
        internal static string STATUS_LOGIN_WKSTA_RESTRICTION {
            get {
                return ResourceManager.GetString("STATUS_LOGIN_WKSTA_RESTRICTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempted logon is invalid. This is either due to a bad username or authentication information. (code=0xC000006D).
        /// </summary>
        internal static string STATUS_LOGON_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_LOGON_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A requested type of logon (for example, interactive, network, and service) is not granted by the local security policy of the target system. Ask the system administrator to grant the necessary form of logon. (code=0xC0000155).
        /// </summary>
        internal static string STATUS_LOGON_NOT_GRANTED {
            get {
                return ResourceManager.GetString("STATUS_LOGON_NOT_GRANTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Netlogon service cannot start because another Netlogon service running in the domain conflicts with the specified role. (code=0xC0000132).
        /// </summary>
        internal static string STATUS_LOGON_SERVER_CONFLICT {
            get {
                return ResourceManager.GetString("STATUS_LOGON_SERVER_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal LSA error has occurred. An authentication package has requested the creation of a logon session but the ID of an already existing logon session has been specified. (code=0xC0000105).
        /// </summary>
        internal static string STATUS_LOGON_SESSION_COLLISION {
            get {
                return ResourceManager.GetString("STATUS_LOGON_SESSION_COLLISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt has been made to start a new session manager or LSA logon session by using an ID that is already in use. (code=0xC00000EE).
        /// </summary>
        internal static string STATUS_LOGON_SESSION_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_LOGON_SESSION_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A user has requested a type of logon (for example, interactive or network) that has not been granted. An administrator has control over who can logon interactively and through the network. (code=0xC000015B).
        /// </summary>
        internal static string STATUS_LOGON_TYPE_NOT_GRANTED {
            get {
                return ResourceManager.GetString("STATUS_LOGON_TYPE_NOT_GRANTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A long jump has been executed. (code=0x80000026).
        /// </summary>
        internal static string STATUS_LONGJUMP {
            get {
                return ResourceManager.GetString("STATUS_LONGJUMP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Delayed Write Failed} Windows was unable to save all the data for the file %hs. The data has been lost. This error might be caused by a failure of your computer hardware or network connection. Try to save this file elsewhere. (code=0xC0000222).
        /// </summary>
        internal static string STATUS_LOST_WRITEBEHIND_DATA {
            get {
                return ResourceManager.GetString("STATUS_LOST_WRITEBEHIND_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Delayed Write Failed} Windows was unable to save all the data for the file %hs; the data has been lost. This error might be caused if the device has been removed or the media is write-protected. (code=0xC000A082).
        /// </summary>
        internal static string STATUS_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR {
            get {
                return ResourceManager.GetString("STATUS_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Delayed Write Failed} Windows was unable to save all the data for the file %hs; the data has been lost. This error might be caused by network connectivity issues. Try to save this file elsewhere. (code=0xC000A080).
        /// </summary>
        internal static string STATUS_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED {
            get {
                return ResourceManager.GetString("STATUS_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Delayed Write Failed} Windows was unable to save all the data for the file %hs; the data has been lost. This error was returned by the server on which the file exists. Try to save this file elsewhere. (code=0xC000A081).
        /// </summary>
        internal static string STATUS_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR {
            get {
                return ResourceManager.GetString("STATUS_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The connection port is used in an invalid context. (code=0xC0000706).
        /// </summary>
        internal static string STATUS_LPC_INVALID_CONNECTION_USAGE {
            get {
                return ResourceManager.GetString("STATUS_LPC_INVALID_CONNECTION_USAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No receive buffer has been supplied in a synchronous request. (code=0xC0000705).
        /// </summary>
        internal static string STATUS_LPC_RECEIVE_BUFFER_EXPECTED {
            get {
                return ResourceManager.GetString("STATUS_LPC_RECEIVE_BUFFER_EXPECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server received the messages but did not send a reply. (code=0xC0000253).
        /// </summary>
        internal static string STATUS_LPC_REPLY_LOST {
            get {
                return ResourceManager.GetString("STATUS_LPC_REPLY_LOST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ALPC port does not accept new request messages. (code=0xC0000707).
        /// </summary>
        internal static string STATUS_LPC_REQUESTS_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("STATUS_LPC_REQUESTS_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates there are no more LUIDs to allocate. (code=0xC0000075).
        /// </summary>
        internal static string STATUS_LUIDS_EXHAUSTED {
            get {
                return ResourceManager.GetString("STATUS_LUIDS_EXHAUSTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified element is contained in a magazine that is no longer present. (code=0xC0000286).
        /// </summary>
        internal static string STATUS_MAGAZINE_NOT_PRESENT {
            get {
                return ResourceManager.GetString("STATUS_MAGAZINE_NOT_PRESENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Mapped View Alignment Incorrect} An attempt was made to map a view of a file, but either the specified base address or the offset into the file were not aligned on the proper allocation granularity. (code=0xC0000220).
        /// </summary>
        internal static string STATUS_MAPPED_ALIGNMENT {
            get {
                return ResourceManager.GetString("STATUS_MAPPED_ALIGNMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to map a file of size zero with the maximum size specified as zero. (code=0xC000011E).
        /// </summary>
        internal static string STATUS_MAPPED_FILE_SIZE_ZERO {
            get {
                return ResourceManager.GetString("STATUS_MAPPED_FILE_SIZE_ZERO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user/kernel marshaling buffer has overflowed. (code=0xC0000231).
        /// </summary>
        internal static string STATUS_MARSHALL_OVERFLOW {
            get {
                return ResourceManager.GetString("STATUS_MARSHALL_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of maximum ticket referrals has been exceeded. (code=0xC00002F4).
        /// </summary>
        internal static string STATUS_MAX_REFERRALS_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_MAX_REFERRALS_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A thread is getting dispatched with MCA EXCEPTION because of MCA. (code=0xC0000713).
        /// </summary>
        internal static string STATUS_MCA_EXCEPTION {
            get {
                return ResourceManager.GetString("STATUS_MCA_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A machine check error has occurred. Check the system event log for additional information. (code=0xC000036A).
        /// </summary>
        internal static string STATUS_MCA_OCCURED {
            get {
                return ResourceManager.GetString("STATUS_MCA_OCCURED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Media Changed} The media has changed. (code=0x8000001C).
        /// </summary>
        internal static string STATUS_MEDIA_CHANGED {
            get {
                return ResourceManager.GetString("STATUS_MEDIA_CHANGED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Media Changed} The media might have changed. (code=0x80000020).
        /// </summary>
        internal static string STATUS_MEDIA_CHECK {
            get {
                return ResourceManager.GetString("STATUS_MEDIA_CHECK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Write Protect Error} The disk cannot be written to because it is write-protected. Remove the write protection from the volume %hs in drive %hs. (code=0xC00000A2).
        /// </summary>
        internal static string STATUS_MEDIA_WRITE_PROTECTED {
            get {
                return ResourceManager.GetString("STATUS_MEDIA_WRITE_PROTECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified account name is already a member of the group. (code=0xC0000153).
        /// </summary>
        internal static string STATUS_MEMBER_IN_ALIAS {
            get {
                return ResourceManager.GetString("STATUS_MEMBER_IN_ALIAS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified user account is already in the specified group account. Also used to indicate a group cannot be deleted because it contains a member. (code=0xC0000067).
        /// </summary>
        internal static string STATUS_MEMBER_IN_GROUP {
            get {
                return ResourceManager.GetString("STATUS_MEMBER_IN_GROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified account name is not a member of the group. (code=0xC0000152).
        /// </summary>
        internal static string STATUS_MEMBER_NOT_IN_ALIAS {
            get {
                return ResourceManager.GetString("STATUS_MEMBER_NOT_IN_ALIAS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified user account is not a member of the specified group account. (code=0xC0000068).
        /// </summary>
        internal static string STATUS_MEMBER_NOT_IN_GROUP {
            get {
                return ResourceManager.GetString("STATUS_MEMBER_NOT_IN_GROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates a member cannot be removed from a group because the group is currently the member&apos;s primary group. (code=0xC0000127).
        /// </summary>
        internal static string STATUS_MEMBERS_PRIMARY_GROUP {
            get {
                return ResourceManager.GetString("STATUS_MEMBERS_PRIMARY_GROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to free virtual memory that is not allocated. (code=0xC00000A0).
        /// </summary>
        internal static string STATUS_MEMORY_NOT_ALLOCATED {
            get {
                return ResourceManager.GetString("STATUS_MEMORY_NOT_ALLOCATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ALPC message requested is no longer available. (code=0xC0000701).
        /// </summary>
        internal static string STATUS_MESSAGE_LOST {
            get {
                return ResourceManager.GetString("STATUS_MESSAGE_LOST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RtlFindMessage could not locate the requested message ID in the message table resource. (code=0xC0000109).
        /// </summary>
        internal static string STATUS_MESSAGE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_MESSAGE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ALPC message being canceled has already been retrieved from the queue on the other side. (code=0x4000002E).
        /// </summary>
        internal static string STATUS_MESSAGE_RETRIEVED {
            get {
                return ResourceManager.GetString("STATUS_MESSAGE_RETRIEVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The master file table on the volume is too fragmented to complete this operation. (code=0xC0000304).
        /// </summary>
        internal static string STATUS_MFT_TOO_FRAGMENTED {
            get {
                return ResourceManager.GetString("STATUS_MFT_TOO_FRAGMENTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A miniversion can be opened only in the context of the transaction that created it. (code=0xC0190024).
        /// </summary>
        internal static string STATUS_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION {
            get {
                return ResourceManager.GetString("STATUS_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Missing System File} The required system file %hs is bad or missing. (code=0xC0000143).
        /// </summary>
        internal static string STATUS_MISSING_SYSTEMFILE {
            get {
                return ResourceManager.GetString("STATUS_MISSING_SYSTEMFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The checksum of the obtained monitor descriptor is invalid. (code=0xC01D0003).
        /// </summary>
        internal static string STATUS_MONITOR_INVALID_DESCRIPTOR_CHECKSUM {
            get {
                return ResourceManager.GetString("STATUS_MONITOR_INVALID_DESCRIPTOR_CHECKSUM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The monitor descriptor contains an invalid detailed timing block. (code=0xC01D0009).
        /// </summary>
        internal static string STATUS_MONITOR_INVALID_DETAILED_TIMING_BLOCK {
            get {
                return ResourceManager.GetString("STATUS_MONITOR_INVALID_DETAILED_TIMING_BLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Monitor descriptor contains invalid manufacture date. (code=0xC01D000A).
        /// </summary>
        internal static string STATUS_MONITOR_INVALID_MANUFACTURE_DATE {
            get {
                return ResourceManager.GetString("STATUS_MONITOR_INVALID_MANUFACTURE_DATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided monitor descriptor block is either corrupted or does not contain the monitor&apos;s detailed serial number. (code=0xC01D0006).
        /// </summary>
        internal static string STATUS_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK {
            get {
                return ResourceManager.GetString("STATUS_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The monitor descriptor contains an invalid standard timing block. (code=0xC01D0004).
        /// </summary>
        internal static string STATUS_MONITOR_INVALID_STANDARD_TIMING_BLOCK {
            get {
                return ResourceManager.GetString("STATUS_MONITOR_INVALID_STANDARD_TIMING_BLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided monitor descriptor block is either corrupted or does not contain the monitor&apos;s user-friendly name. (code=0xC01D0007).
        /// </summary>
        internal static string STATUS_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK {
            get {
                return ResourceManager.GetString("STATUS_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A monitor descriptor could not be obtained. (code=0xC01D0001).
        /// </summary>
        internal static string STATUS_MONITOR_NO_DESCRIPTOR {
            get {
                return ResourceManager.GetString("STATUS_MONITOR_NO_DESCRIPTOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no monitor descriptor data at the specified (offset or size) region. (code=0xC01D0008).
        /// </summary>
        internal static string STATUS_MONITOR_NO_MORE_DESCRIPTOR_DATA {
            get {
                return ResourceManager.GetString("STATUS_MONITOR_NO_MORE_DESCRIPTOR_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This release does not support the format of the obtained monitor descriptor. (code=0xC01D0002).
        /// </summary>
        internal static string STATUS_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT {
            get {
                return ResourceManager.GetString("STATUS_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WMI data-block registration failed for one of the MSMonitorClass WMI subclasses. (code=0xC01D0005).
        /// </summary>
        internal static string STATUS_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED {
            get {
                return ResourceManager.GetString("STATUS_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returned by enumeration APIs to indicate more information is available to successive calls. (code=0x00000105).
        /// </summary>
        internal static string STATUS_MORE_ENTRIES {
            get {
                return ResourceManager.GetString("STATUS_MORE_ENTRIES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Still Busy} The specified I/O request packet (IRP) cannot be disposed of because the I/O operation is not complete. (code=0xC0000016).
        /// </summary>
        internal static string STATUS_MORE_PROCESSING_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_MORE_PROCESSING_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The create operation failed because the name contained at least one mount point that resolves to a volume to which the specified device object is not attached. (code=0xC0000368).
        /// </summary>
        internal static string STATUS_MOUNT_POINT_NOT_RESOLVED {
            get {
                return ResourceManager.GetString("STATUS_MOUNT_POINT_NOT_RESOLVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CPUs in this multiprocessor system are not all the same revision level. To use all processors, the operating system restricts itself to the features of the least capable processor in the system. If problems occur with this system, contact the CPU manufacturer to see if this mix of processors is supported. (code=0x40000029).
        /// </summary>
        internal static string STATUS_MP_PROCESSOR_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_MP_PROCESSOR_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource loader failed to find an MUI file. (code=0xC00B0001).
        /// </summary>
        internal static string STATUS_MUI_FILE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_MUI_FILE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource loader cache does not have a loaded MUI entry. (code=0xC00B0006).
        /// </summary>
        internal static string STATUS_MUI_FILE_NOT_LOADED {
            get {
                return ResourceManager.GetString("STATUS_MUI_FILE_NOT_LOADED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource loader failed to load an MUI file because the file failed to pass validation. (code=0xC00B0002).
        /// </summary>
        internal static string STATUS_MUI_INVALID_FILE {
            get {
                return ResourceManager.GetString("STATUS_MUI_INVALID_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RC manifest has an invalid culture name. (code=0xC00B0004).
        /// </summary>
        internal static string STATUS_MUI_INVALID_LOCALE_NAME {
            get {
                return ResourceManager.GetString("STATUS_MUI_INVALID_LOCALE_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RC manifest is corrupted with garbage data, is an unsupported version, or is missing a required item. (code=0xC00B0003).
        /// </summary>
        internal static string STATUS_MUI_INVALID_RC_CONFIG {
            get {
                return ResourceManager.GetString("STATUS_MUI_INVALID_RC_CONFIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RC manifest has and invalid ultimate fallback name. (code=0xC00B0005).
        /// </summary>
        internal static string STATUS_MUI_INVALID_ULTIMATEFALLBACK_NAME {
            get {
                return ResourceManager.GetString("STATUS_MUI_INVALID_ULTIMATEFALLBACK_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The local machine must be a Kerberos KDC (domain controller) and it is not. (code=0xC00002F5).
        /// </summary>
        internal static string STATUS_MUST_BE_KDC {
            get {
                return ResourceManager.GetString("STATUS_MUST_BE_KDC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to acquire a mutant such that its maximum count would have been exceeded. (code=0xC0000191).
        /// </summary>
        internal static string STATUS_MUTANT_LIMIT_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_MUTANT_LIMIT_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to release a mutant object was made by a thread that was not the owner of the mutant object. (code=0xC0000046).
        /// </summary>
        internal static string STATUS_MUTANT_NOT_OWNED {
            get {
                return ResourceManager.GetString("STATUS_MUTANT_NOT_OWNED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mutual Authentication failed. The server password is out of date at the domain controller. (code=0xC00002C3).
        /// </summary>
        internal static string STATUS_MUTUAL_AUTHENTICATION_FAILED {
            get {
                return ResourceManager.GetString("STATUS_MUTUAL_AUTHENTICATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A specified name string is too long for its intended use. (code=0xC0000106).
        /// </summary>
        internal static string STATUS_NAME_TOO_LONG {
            get {
                return ResourceManager.GetString("STATUS_NAME_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The neighbor discovery queue overflowed. (code=0xC000A011).
        /// </summary>
        internal static string STATUS_ND_QUEUE_OVERFLOW {
            get {
                return ResourceManager.GetString("STATUS_ND_QUEUE_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to find the network interface or the network interface is not ready. (code=0xC0230006).
        /// </summary>
        internal static string STATUS_NDIS_ADAPTER_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_NDIS_ADAPTER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network interface is not ready to complete this operation. (code=0xC0230011).
        /// </summary>
        internal static string STATUS_NDIS_ADAPTER_NOT_READY {
            get {
                return ResourceManager.GetString("STATUS_NDIS_ADAPTER_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network interface has been removed. (code=0xC0230018).
        /// </summary>
        internal static string STATUS_NDIS_ADAPTER_REMOVED {
            get {
                return ResourceManager.GetString("STATUS_NDIS_ADAPTER_REMOVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to map a file that is already mapped. (code=0xC023001D).
        /// </summary>
        internal static string STATUS_NDIS_ALREADY_MAPPED {
            get {
                return ResourceManager.GetString("STATUS_NDIS_ALREADY_MAPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid characteristics table was used. (code=0xC0230005).
        /// </summary>
        internal static string STATUS_NDIS_BAD_CHARACTERISTICS {
            get {
                return ResourceManager.GetString("STATUS_NDIS_BAD_CHARACTERISTICS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid version was specified. (code=0xC0230004).
        /// </summary>
        internal static string STATUS_NDIS_BAD_VERSION {
            get {
                return ResourceManager.GetString("STATUS_NDIS_BAD_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length of the submitted buffer for this operation is too small. (code=0xC0230016).
        /// </summary>
        internal static string STATUS_NDIS_BUFFER_TOO_SHORT {
            get {
                return ResourceManager.GetString("STATUS_NDIS_BUFFER_TOO_SHORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The binding to the network interface is being closed. (code=0xC0230002).
        /// </summary>
        internal static string STATUS_NDIS_CLOSING {
            get {
                return ResourceManager.GetString("STATUS_NDIS_CLOSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network interface has encountered an internal unrecoverable failure. (code=0xC0230008).
        /// </summary>
        internal static string STATUS_NDIS_DEVICE_FAILED {
            get {
                return ResourceManager.GetString("STATUS_NDIS_DEVICE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wireless LAN interface is in auto-configuration mode and does not support the requested parameter change operation. (code=0xC0232000).
        /// </summary>
        internal static string STATUS_NDIS_DOT11_AUTO_CONFIG_ENABLED {
            get {
                return ResourceManager.GetString("STATUS_NDIS_DOT11_AUTO_CONFIG_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wireless LAN interface is busy and cannot perform the requested operation. (code=0xC0232001).
        /// </summary>
        internal static string STATUS_NDIS_DOT11_MEDIA_IN_USE {
            get {
                return ResourceManager.GetString("STATUS_NDIS_DOT11_MEDIA_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wireless LAN interface is power down and does not support the requested operation. (code=0xC0232002).
        /// </summary>
        internal static string STATUS_NDIS_DOT11_POWER_STATE_INVALID {
            get {
                return ResourceManager.GetString("STATUS_NDIS_DOT11_POWER_STATE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while NDIS tried to map the file. (code=0xC023001C).
        /// </summary>
        internal static string STATUS_NDIS_ERROR_READING_FILE {
            get {
                return ResourceManager.GetString("STATUS_NDIS_ERROR_READING_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to map a file that cannot be found. (code=0xC023001B).
        /// </summary>
        internal static string STATUS_NDIS_FILE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_NDIS_FILE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to remove a token ring group address that is in use by other components. (code=0xC023001A).
        /// </summary>
        internal static string STATUS_NDIS_GROUP_ADDRESS_IN_USE {
            get {
                return ResourceManager.GetString("STATUS_NDIS_GROUP_ADDRESS_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request will be completed later by an NDIS status indication. (code=0x40230001).
        /// </summary>
        internal static string STATUS_NDIS_INDICATION_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_NDIS_INDICATION_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network interface was not found. (code=0xC023002B).
        /// </summary>
        internal static string STATUS_NDIS_INTERFACE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_NDIS_INTERFACE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network address used in the request is invalid. (code=0xC0230022).
        /// </summary>
        internal static string STATUS_NDIS_INVALID_ADDRESS {
            get {
                return ResourceManager.GetString("STATUS_NDIS_INVALID_ADDRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data used for this operation is not valid. (code=0xC0230015).
        /// </summary>
        internal static string STATUS_NDIS_INVALID_DATA {
            get {
                return ResourceManager.GetString("STATUS_NDIS_INVALID_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified request is not a valid operation for the target device. (code=0xC0230010).
        /// </summary>
        internal static string STATUS_NDIS_INVALID_DEVICE_REQUEST {
            get {
                return ResourceManager.GetString("STATUS_NDIS_INVALID_DEVICE_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length of the buffer submitted for this operation is not valid. (code=0xC0230014).
        /// </summary>
        internal static string STATUS_NDIS_INVALID_LENGTH {
            get {
                return ResourceManager.GetString("STATUS_NDIS_INVALID_LENGTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network interface does not support this object identifier. (code=0xC0230017).
        /// </summary>
        internal static string STATUS_NDIS_INVALID_OID {
            get {
                return ResourceManager.GetString("STATUS_NDIS_INVALID_OID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to send an invalid packet on a network interface. (code=0xC023000F).
        /// </summary>
        internal static string STATUS_NDIS_INVALID_PACKET {
            get {
                return ResourceManager.GetString("STATUS_NDIS_INVALID_PACKET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified port does not exist on this network interface. (code=0xC023002D).
        /// </summary>
        internal static string STATUS_NDIS_INVALID_PORT {
            get {
                return ResourceManager.GetString("STATUS_NDIS_INVALID_PORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current state of the specified port on this network interface does not support the requested operation. (code=0xC023002E).
        /// </summary>
        internal static string STATUS_NDIS_INVALID_PORT_STATE {
            get {
                return ResourceManager.GetString("STATUS_NDIS_INVALID_PORT_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The miniport adapter is in a lower power state. (code=0xC023002F).
        /// </summary>
        internal static string STATUS_NDIS_LOW_POWER_STATE {
            get {
                return ResourceManager.GetString("STATUS_NDIS_LOW_POWER_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The I/O operation failed because the network media is disconnected or the wireless access point is out of range. (code=0xC023001F).
        /// </summary>
        internal static string STATUS_NDIS_MEDIA_DISCONNECTED {
            get {
                return ResourceManager.GetString("STATUS_NDIS_MEDIA_DISCONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to add a duplicate multicast address to the list. (code=0xC023000A).
        /// </summary>
        internal static string STATUS_NDIS_MULTICAST_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_NDIS_MULTICAST_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The multicast list on the network interface is full. (code=0xC0230009).
        /// </summary>
        internal static string STATUS_NDIS_MULTICAST_FULL {
            get {
                return ResourceManager.GetString("STATUS_NDIS_MULTICAST_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At attempt was made to remove a multicast address that was never added. (code=0xC023000B).
        /// </summary>
        internal static string STATUS_NDIS_MULTICAST_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_NDIS_MULTICAST_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network interface does not support this request. (code=0xC02300BB).
        /// </summary>
        internal static string STATUS_NDIS_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_NDIS_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TCP connection is not offloadable by the Chimney offload target. (code=0xC0231012).
        /// </summary>
        internal static string STATUS_NDIS_OFFLOAD_CONNECTION_REJECTED {
            get {
                return ResourceManager.GetString("STATUS_NDIS_OFFLOAD_CONNECTION_REJECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IP Path object is not in an offloadable state. (code=0xC0231013).
        /// </summary>
        internal static string STATUS_NDIS_OFFLOAD_PATH_REJECTED {
            get {
                return ResourceManager.GetString("STATUS_NDIS_OFFLOAD_PATH_REJECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TCP connection is not offloadable because of a local policy setting. (code=0xC023100F).
        /// </summary>
        internal static string STATUS_NDIS_OFFLOAD_POLICY {
            get {
                return ResourceManager.GetString("STATUS_NDIS_OFFLOAD_POLICY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to open the network interface. (code=0xC0230007).
        /// </summary>
        internal static string STATUS_NDIS_OPEN_FAILED {
            get {
                return ResourceManager.GetString("STATUS_NDIS_OPEN_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The offload operation on the network interface has been paused. (code=0xC023002A).
        /// </summary>
        internal static string STATUS_NDIS_PAUSED {
            get {
                return ResourceManager.GetString("STATUS_NDIS_PAUSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list of low power protocol offloads is full. (code=0xC0232004).
        /// </summary>
        internal static string STATUS_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL {
            get {
                return ResourceManager.GetString("STATUS_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list of wake on LAN patterns is full. (code=0xC0232003).
        /// </summary>
        internal static string STATUS_NDIS_PM_WOL_PATTERN_LIST_FULL {
            get {
                return ResourceManager.GetString("STATUS_NDIS_PM_WOL_PATTERN_LIST_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network interface aborted the request. (code=0xC023000C).
        /// </summary>
        internal static string STATUS_NDIS_REQUEST_ABORTED {
            get {
                return ResourceManager.GetString("STATUS_NDIS_REQUEST_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network interface cannot process the request because it is being reset. (code=0xC023000D).
        /// </summary>
        internal static string STATUS_NDIS_RESET_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_NDIS_RESET_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to allocate a hardware resource failed because the resource is used by another component. (code=0xC023001E).
        /// </summary>
        internal static string STATUS_NDIS_RESOURCE_CONFLICT {
            get {
                return ResourceManager.GetString("STATUS_NDIS_RESOURCE_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network interface does not support this media type. (code=0xC0230019).
        /// </summary>
        internal static string STATUS_NDIS_UNSUPPORTED_MEDIA {
            get {
                return ResourceManager.GetString("STATUS_NDIS_UNSUPPORTED_MEDIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The revision number specified in the structure is not supported. (code=0xC023002C).
        /// </summary>
        internal static string STATUS_NDIS_UNSUPPORTED_REVISION {
            get {
                return ResourceManager.GetString("STATUS_NDIS_UNSUPPORTED_REVISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A network data fault occurred. (code=0xC00000D2).
        /// </summary>
        internal static string STATUS_NET_WRITE_FAULT {
            get {
                return ResourceManager.GetString("STATUS_NET_WRITE_FAULT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to logon, but the NetLogon service was not started. (code=0xC0000192).
        /// </summary>
        internal static string STATUS_NETLOGON_NOT_STARTED {
            get {
                return ResourceManager.GetString("STATUS_NETLOGON_NOT_STARTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network access is denied. (code=0xC00000CA).
        /// </summary>
        internal static string STATUS_NETWORK_ACCESS_DENIED {
            get {
                return ResourceManager.GetString("STATUS_NETWORK_ACCESS_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network is busy. (code=0xC00000BF).
        /// </summary>
        internal static string STATUS_NETWORK_BUSY {
            get {
                return ResourceManager.GetString("STATUS_NETWORK_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple connections to a server or shared resource by the same user, using more than one user name, are not allowed. Disconnect all previous connections to the server or shared resource and try again. (code=0xC0000195).
        /// </summary>
        internal static string STATUS_NETWORK_CREDENTIAL_CONFLICT {
            get {
                return ResourceManager.GetString("STATUS_NETWORK_CREDENTIAL_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network name was deleted. (code=0xC00000C9).
        /// </summary>
        internal static string STATUS_NETWORK_NAME_DELETED {
            get {
                return ResourceManager.GetString("STATUS_NETWORK_NAME_DELETED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A remote open failed because the network open restrictions were not satisfied. (code=0xC0000201).
        /// </summary>
        internal static string STATUS_NETWORK_OPEN_RESTRICTION {
            get {
                return ResourceManager.GetString("STATUS_NETWORK_OPEN_RESTRICTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client session has expired; so the client must re-authenticate to continue accessing the remote resources. (code=0xC000035C).
        /// </summary>
        internal static string STATUS_NETWORK_SESSION_EXPIRED {
            get {
                return ResourceManager.GetString("STATUS_NETWORK_SESSION_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote network is not reachable by the transport. (code=0xC000023C).
        /// </summary>
        internal static string STATUS_NETWORK_UNREACHABLE {
            get {
                return ResourceManager.GetString("STATUS_NETWORK_UNREACHABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Unable to Retrieve Browser Server List} The list of servers for this workgroup is not currently available. (code=0xC000021C).
        /// </summary>
        internal static string STATUS_NO_BROWSER_SERVERS_FOUND {
            get {
                return ResourceManager.GetString("STATUS_NO_BROWSER_SERVERS_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A callback return system service cannot be executed when no callback is active. (code=0xC0000258).
        /// </summary>
        internal static string STATUS_NO_CALLBACK_ACTIVE {
            get {
                return ResourceManager.GetString("STATUS_NO_CALLBACK_ACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to During a tape access, the end of the data written is reached. (code=0x80000022).
        /// </summary>
        internal static string STATUS_NO_DATA_DETECTED {
            get {
                return ResourceManager.GetString("STATUS_NO_DATA_DETECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file for which EAs were requested has no EAs. (code=0xC0000052).
        /// </summary>
        internal static string STATUS_NO_EAS_ON_FILE {
            get {
                return ResourceManager.GetString("STATUS_NO_EAS_ON_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required encryption driver is not loaded for this system. (code=0xC000028E).
        /// </summary>
        internal static string STATUS_NO_EFS {
            get {
                return ResourceManager.GetString("STATUS_NO_EFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An event pair synchronization operation was performed using the thread-specific client/server event pair object, but no event pair object was associated with the thread. (code=0xC000014E).
        /// </summary>
        internal static string STATUS_NO_EVENT_PAIR {
            get {
                return ResourceManager.GetString("STATUS_NO_EVENT_PAIR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that an attempt was made to assign protection to a file system file or directory and one of the SIDs in the security descriptor could not be translated into a GUID that could be stored by the file system. This causes the protection attempt to fail, which might cause a file creation attempt to fail. (code=0xC000010C).
        /// </summary>
        internal static string STATUS_NO_GUID_TRANSLATION {
            get {
                return ResourceManager.GetString("STATUS_NO_GUID_TRANSLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt has been made to operate on an impersonation token by a thread that is not currently impersonating a client. (code=0xC000005C).
        /// </summary>
        internal static string STATUS_NO_IMPERSONATION_TOKEN {
            get {
                return ResourceManager.GetString("STATUS_NO_IMPERSONATION_TOKEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Non-Inheritable ACL} An access control list (ACL) contains no components that can be inherited. (code=0x8000000B).
        /// </summary>
        internal static string STATUS_NO_INHERITANCE {
            get {
                return ResourceManager.GetString("STATUS_NO_INHERITANCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to accomplish the requested task because the local machine does not have any IP addresses. (code=0xC00002F1).
        /// </summary>
        internal static string STATUS_NO_IP_ADDRESSES {
            get {
                return ResourceManager.GetString("STATUS_NO_IP_ADDRESSES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The target server does not have acceptable Kerberos credentials. (code=0xC0000322).
        /// </summary>
        internal static string STATUS_NO_KERB_KEY {
            get {
                return ResourceManager.GetString("STATUS_NO_KERB_KEY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that an attempt was made to change the size of the LDT for a process that has no LDT. (code=0xC0000117).
        /// </summary>
        internal static string STATUS_NO_LDT {
            get {
                return ResourceManager.GetString("STATUS_NO_LDT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The link-tracking operation could not be completed because a transaction is active. (code=0xC0190059).
        /// </summary>
        internal static string STATUS_NO_LINK_TRACKING_IN_TRANSACTION {
            get {
                return ResourceManager.GetString("STATUS_NO_LINK_TRACKING_IN_TRANSACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system could not allocate the required space in a registry log. (code=0xC000017D).
        /// </summary>
        internal static string STATUS_NO_LOG_SPACE {
            get {
                return ResourceManager.GetString("STATUS_NO_LOG_SPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No logon servers are currently available to service the logon request. (code=0xC000005E).
        /// </summary>
        internal static string STATUS_NO_LOGON_SERVERS {
            get {
                return ResourceManager.GetString("STATUS_NO_LOGON_SERVERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was no match for the specified key in the index. (code=0xC0000272).
        /// </summary>
        internal static string STATUS_NO_MATCH {
            get {
                return ResourceManager.GetString("STATUS_NO_MATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {No Media} There is no media in the drive. Insert media into drive %hs. (code=0xC0000178).
        /// </summary>
        internal static string STATUS_NO_MEDIA {
            get {
                return ResourceManager.GetString("STATUS_NO_MEDIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {No Disk} There is no disk in the drive. Insert a disk into drive %hs. (code=0xC0000013).
        /// </summary>
        internal static string STATUS_NO_MEDIA_IN_DEVICE {
            get {
                return ResourceManager.GetString("STATUS_NO_MEDIA_IN_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Not Enough Quota} Not enough virtual memory or paging file quota is available to complete the specified operation. (code=0xC0000017).
        /// </summary>
        internal static string STATUS_NO_MEMORY {
            get {
                return ResourceManager.GetString("STATUS_NO_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {No More EAs} No more extended attributes (EAs) were found for the file. (code=0x80000012).
        /// </summary>
        internal static string STATUS_NO_MORE_EAS {
            get {
                return ResourceManager.GetString("STATUS_NO_MORE_EAS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {No More Entries} No more entries are available from an enumeration operation. (code=0x8000001A).
        /// </summary>
        internal static string STATUS_NO_MORE_ENTRIES {
            get {
                return ResourceManager.GetString("STATUS_NO_MORE_ENTRIES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {No More Files} No more files were found which match the file specification. (code=0x80000006).
        /// </summary>
        internal static string STATUS_NO_MORE_FILES {
            get {
                return ResourceManager.GetString("STATUS_NO_MORE_FILES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no more matches for the current index enumeration. (code=0xC0000273).
        /// </summary>
        internal static string STATUS_NO_MORE_MATCHES {
            get {
                return ResourceManager.GetString("STATUS_NO_MORE_MATCHES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected to find PA data for a hint of what etype to use, but it was not found. (code=0xC00002F8).
        /// </summary>
        internal static string STATUS_NO_PA_DATA {
            get {
                return ResourceManager.GetString("STATUS_NO_PA_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {No Paging File Specified} No paging file was specified in the system configuration. (code=0xC0000147).
        /// </summary>
        internal static string STATUS_NO_PAGEFILE {
            get {
                return ResourceManager.GetString("STATUS_NO_PAGEFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {No Quotas} No system quota limits are specifically set for this account. (code=0x0000010D).
        /// </summary>
        internal static string STATUS_NO_QUOTAS_FOR_ACCOUNT {
            get {
                return ResourceManager.GetString("STATUS_NO_QUOTAS_FOR_ACCOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No ranges for the specified operation were able to be processed. (code=0xC0000460).
        /// </summary>
        internal static string STATUS_NO_RANGES_PROCESSED {
            get {
                return ResourceManager.GetString("STATUS_NO_RANGES_PROCESSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no encryption recovery policy configured for this system. (code=0xC000028D).
        /// </summary>
        internal static string STATUS_NO_RECOVERY_POLICY {
            get {
                return ResourceManager.GetString("STATUS_NO_RECOVERY_POLICY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Kerberos subsystem encountered an error. A service for user protocol request was made against a domain controller which does not support service for user. (code=0xC000040A).
        /// </summary>
        internal static string STATUS_NO_S4U_PROT_SUPPORT {
            get {
                return ResourceManager.GetString("STATUS_NO_S4U_PROT_SUPPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The savepoint operation failed because files are open on the transaction, which is not permitted. (code=0xC0190048).
        /// </summary>
        internal static string STATUS_NO_SAVEPOINT_WITH_OPEN_FILES {
            get {
                return ResourceManager.GetString("STATUS_NO_SAVEPOINT_WITH_OPEN_FILES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The local account store does not contain secret material for the specified account. (code=0xC0000371).
        /// </summary>
        internal static string STATUS_NO_SECRETS {
            get {
                return ResourceManager.GetString("STATUS_NO_SECRETS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required security context does not exist. (code=0xC000042D).
        /// </summary>
        internal static string STATUS_NO_SECURITY_CONTEXT {
            get {
                return ResourceManager.GetString("STATUS_NO_SECURITY_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates an attempt was made to operate on the security of an object that does not have security associated with it. (code=0xC00000D7).
        /// </summary>
        internal static string STATUS_NO_SECURITY_ON_OBJECT {
            get {
                return ResourceManager.GetString("STATUS_NO_SECURITY_ON_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Space to store the file that is waiting to be printed is not available on the server. (code=0xC00000C7).
        /// </summary>
        internal static string STATUS_NO_SPOOL_SPACE {
            get {
                return ResourceManager.GetString("STATUS_NO_SPOOL_SPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified local group does not exist. (code=0xC0000151).
        /// </summary>
        internal static string STATUS_NO_SUCH_ALIAS {
            get {
                return ResourceManager.GetString("STATUS_NO_SUCH_ALIAS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A device that does not exist was specified. (code=0xC000000E).
        /// </summary>
        internal static string STATUS_NO_SUCH_DEVICE {
            get {
                return ResourceManager.GetString("STATUS_NO_SUCH_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified domain did not exist. (code=0xC00000DF).
        /// </summary>
        internal static string STATUS_NO_SUCH_DOMAIN {
            get {
                return ResourceManager.GetString("STATUS_NO_SUCH_DOMAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {File Not Found} The file %hs does not exist. (code=0xC000000F).
        /// </summary>
        internal static string STATUS_NO_SUCH_FILE {
            get {
                return ResourceManager.GetString("STATUS_NO_SUCH_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified group does not exist. (code=0xC0000066).
        /// </summary>
        internal static string STATUS_NO_SUCH_GROUP {
            get {
                return ResourceManager.GetString("STATUS_NO_SUCH_GROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A specified logon session does not exist. It might already have been terminated. (code=0xC000005F).
        /// </summary>
        internal static string STATUS_NO_SUCH_LOGON_SESSION {
            get {
                return ResourceManager.GetString("STATUS_NO_SUCH_LOGON_SESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A member could not be added to or removed from the local group because the member does not exist. (code=0xC000017A).
        /// </summary>
        internal static string STATUS_NO_SUCH_MEMBER {
            get {
                return ResourceManager.GetString("STATUS_NO_SUCH_MEMBER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A specified authentication package is unknown. (code=0xC00000FE).
        /// </summary>
        internal static string STATUS_NO_SUCH_PACKAGE {
            get {
                return ResourceManager.GetString("STATUS_NO_SUCH_PACKAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A specified privilege does not exist. (code=0xC0000060).
        /// </summary>
        internal static string STATUS_NO_SUCH_PRIVILEGE {
            get {
                return ResourceManager.GetString("STATUS_NO_SUCH_PRIVILEGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified account does not exist. (code=0xC0000064).
        /// </summary>
        internal static string STATUS_NO_SUCH_USER {
            get {
                return ResourceManager.GetString("STATUS_NO_SUCH_USER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client is trying to negotiate a context and the server requires user-to-user but did not send a TGT reply. (code=0xC00002EF).
        /// </summary>
        internal static string STATUS_NO_TGT_REPLY {
            get {
                return ResourceManager.GetString("STATUS_NO_TGT_REPLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to reference a token that does not exist. This is typically done by referencing the token that is associated with a thread when the thread is not impersonating a client. (code=0xC000007C).
        /// </summary>
        internal static string STATUS_NO_TOKEN {
            get {
                return ResourceManager.GetString("STATUS_NO_TOKEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tracking (workstation) service is not running. (code=0xC000029F).
        /// </summary>
        internal static string STATUS_NO_TRACKING_SERVICE {
            get {
                return ResourceManager.GetString("STATUS_NO_TRACKING_SERVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The workstation does not have a trust secret for the primary domain in the local LSA database. (code=0xC000018A).
        /// </summary>
        internal static string STATUS_NO_TRUST_LSA_SECRET {
            get {
                return ResourceManager.GetString("STATUS_NO_TRUST_LSA_SECRET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to On applicable Windows Server releases, the SAM database does not have a computer account for this workstation trust relationship. (code=0xC000018B).
        /// </summary>
        internal static string STATUS_NO_TRUST_SAM_ACCOUNT {
            get {
                return ResourceManager.GetString("STATUS_NO_TRUST_SAM_ACCOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no transaction metadata on the file. (code=0x80190029).
        /// </summary>
        internal static string STATUS_NO_TXF_METADATA {
            get {
                return ResourceManager.GetString("STATUS_NO_TXF_METADATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No mapping for the Unicode character exists in the target multi-byte code page. (code=0xC0000717).
        /// </summary>
        internal static string STATUS_NO_UNICODE_TRANSLATION {
            get {
                return ResourceManager.GetString("STATUS_NO_UNICODE_TRANSLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no EFS keys defined for the user. (code=0xC0000290).
        /// </summary>
        internal static string STATUS_NO_USER_KEYS {
            get {
                return ResourceManager.GetString("STATUS_NO_USER_KEYS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no user session key for the specified logon session. (code=0xC0000202).
        /// </summary>
        internal static string STATUS_NO_USER_SESSION_KEY {
            get {
                return ResourceManager.GetString("STATUS_NO_USER_SESSION_KEY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A yield execution was performed and no thread was available to run. (code=0x40000024).
        /// </summary>
        internal static string STATUS_NO_YIELD_PERFORMED {
            get {
                return ResourceManager.GetString("STATUS_NO_YIELD_PERFORMED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested interface is not supported. (code=0xC00002B9).
        /// </summary>
        internal static string STATUS_NOINTERFACE {
            get {
                return ResourceManager.GetString("STATUS_NOINTERFACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The account used is an interdomain trust account. Use your global user account or local user account to access this server. (code=0xC0000198).
        /// </summary>
        internal static string STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT {
            get {
                return ResourceManager.GetString("STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The account used is a server trust account. Use your global user account or local user account to access this server. (code=0xC000019A).
        /// </summary>
        internal static string STATUS_NOLOGON_SERVER_TRUST_ACCOUNT {
            get {
                return ResourceManager.GetString("STATUS_NOLOGON_SERVER_TRUST_ACCOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The account used is a computer account. Use your global user account or local user account to access this server. (code=0xC0000199).
        /// </summary>
        internal static string STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT {
            get {
                return ResourceManager.GetString("STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Cannot Continue Windows cannot continue from this exception. (code=0xC0000025).
        /// </summary>
        internal static string STATUS_NONCONTINUABLE_EXCEPTION {
            get {
                return ResourceManager.GetString("STATUS_NONCONTINUABLE_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to None of the information to be translated has been translated. (code=0xC0000073).
        /// </summary>
        internal static string STATUS_NONE_MAPPED {
            get {
                return ResourceManager.GetString("STATUS_NONE_MAPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An EA operation failed because the name or EA index is invalid. (code=0xC0000051).
        /// </summary>
        internal static string STATUS_NONEXISTENT_EA_ENTRY {
            get {
                return ResourceManager.GetString("STATUS_NONEXISTENT_EA_ENTRY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Sector Not Found} The specified sector does not exist. (code=0xC0000015).
        /// </summary>
        internal static string STATUS_NONEXISTENT_SECTOR {
            get {
                return ResourceManager.GetString("STATUS_NONEXISTENT_SECTOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A requested opened file is not a directory. (code=0xC0000103).
        /// </summary>
        internal static string STATUS_NOT_A_DIRECTORY {
            get {
                return ResourceManager.GetString("STATUS_NOT_A_DIRECTORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NTFS file or directory is not a reparse point. (code=0xC0000275).
        /// </summary>
        internal static string STATUS_NOT_A_REPARSE_POINT {
            get {
                return ResourceManager.GetString("STATUS_NOT_A_REPARSE_POINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates not all privileges or groups that are referenced are assigned to the caller. This allows, for example, all privileges to be disabled without having to know exactly which privileges are assigned. (code=0x00000106).
        /// </summary>
        internal static string STATUS_NOT_ALL_ASSIGNED {
            get {
                return ResourceManager.GetString("STATUS_NOT_ALL_ASSIGNED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The implementation is not capable of performing the request. (code=0xC0000429).
        /// </summary>
        internal static string STATUS_NOT_CAPABLE {
            get {
                return ResourceManager.GetString("STATUS_NOT_CAPABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport can only process the specified request on the client side of a session. (code=0xC0000217).
        /// </summary>
        internal static string STATUS_NOT_CLIENT_SESSION {
            get {
                return ResourceManager.GetString("STATUS_NOT_CLIENT_SESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to change the attributes on memory that has not been committed. (code=0xC000002D).
        /// </summary>
        internal static string STATUS_NOT_COMMITTED {
            get {
                return ResourceManager.GetString("STATUS_NOT_COMMITTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file is not in the defined EFS export format. (code=0xC0000292).
        /// </summary>
        internal static string STATUS_NOT_EXPORT_FORMAT {
            get {
                return ResourceManager.GetString("STATUS_NOT_EXPORT_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object was not found. (code=0xC0000225).
        /// </summary>
        internal static string STATUS_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Not Implemented} The requested operation is not implemented. (code=0xC0000002).
        /// </summary>
        internal static string STATUS_NOT_IMPLEMENTED {
            get {
                return ResourceManager.GetString("STATUS_NOT_IMPLEMENTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to unlock a page of memory that was not locked. (code=0xC000002A).
        /// </summary>
        internal static string STATUS_NOT_LOCKED {
            get {
                return ResourceManager.GetString("STATUS_NOT_LOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested action is restricted for use by logon processes only. The calling process has not registered as a logon process. (code=0xC00000ED).
        /// </summary>
        internal static string STATUS_NOT_LOGON_PROCESS {
            get {
                return ResourceManager.GetString("STATUS_NOT_LOGON_PROCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified section to flush does not map a data file. (code=0xC0000088).
        /// </summary>
        internal static string STATUS_NOT_MAPPED_DATA {
            get {
                return ResourceManager.GetString("STATUS_NOT_MAPPED_DATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The address range to unmap is not a mapped view. (code=0xC0000019).
        /// </summary>
        internal static string STATUS_NOT_MAPPED_VIEW {
            get {
                return ResourceManager.GetString("STATUS_NOT_MAPPED_VIEW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system has attempted to load or restore a file into the registry, and the specified file is not in the format of a registry file. (code=0xC000015C).
        /// </summary>
        internal static string STATUS_NOT_REGISTRY_FILE {
            get {
                return ResourceManager.GetString("STATUS_NOT_REGISTRY_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver was not loaded because the system is starting in safe mode. (code=0xC000035F).
        /// </summary>
        internal static string STATUS_NOT_SAFE_MODE_DRIVER {
            get {
                return ResourceManager.GetString("STATUS_NOT_SAFE_MODE_DRIVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Incorrect Volume} The destination file of a rename request is located on a different device than the source of the rename request. (code=0xC00000D4).
        /// </summary>
        internal static string STATUS_NOT_SAME_DEVICE {
            get {
                return ResourceManager.GetString("STATUS_NOT_SAME_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport can only process the specified request on the server side of a session. (code=0xC0000216).
        /// </summary>
        internal static string STATUS_NOT_SERVER_SESSION {
            get {
                return ResourceManager.GetString("STATUS_NOT_SERVER_SESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The target volume is not a snapshot volume. This operation is valid only on a volume mounted as a snapshot. (code=0xC0190047).
        /// </summary>
        internal static string STATUS_NOT_SNAPSHOT_VOLUME {
            get {
                return ResourceManager.GetString("STATUS_NOT_SNAPSHOT_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is not supported. (code=0xC00000BB).
        /// </summary>
        internal static string STATUS_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not supported on a computer running Windows Server 2003 operating system for Small Business Server. (code=0xC0000300).
        /// </summary>
        internal static string STATUS_NOT_SUPPORTED_ON_SBS {
            get {
                return ResourceManager.GetString("STATUS_NOT_SUPPORTED_ON_SBS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stream is not a tiny stream. (code=0xC0000226).
        /// </summary>
        internal static string STATUS_NOT_TINY_STREAM {
            get {
                return ResourceManager.GetString("STATUS_NOT_TINY_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A process being terminated has no threads to terminate. (code=0x00000122).
        /// </summary>
        internal static string STATUS_NOTHING_TO_TERMINATE {
            get {
                return ResourceManager.GetString("STATUS_NOTHING_TO_TERMINATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file already has a notification GUID associated with it. (code=0xC00001A4).
        /// </summary>
        internal static string STATUS_NOTIFICATION_GUID_ALREADY_DEFINED {
            get {
                return ResourceManager.GetString("STATUS_NOTIFICATION_GUID_ALREADY_DEFINED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that a notify change request has been completed due to closing the handle that made the notify change request. (code=0x0000010B).
        /// </summary>
        internal static string STATUS_NOTIFY_CLEANUP {
            get {
                return ResourceManager.GetString("STATUS_NOTIFY_CLEANUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that a notify change request is being completed and that the information is not being returned in the caller&apos;s buffer. The caller now needs to enumerate the files to find the changes. (code=0x0000010C).
        /// </summary>
        internal static string STATUS_NOTIFY_ENUM_DIR {
            get {
                return ResourceManager.GetString("STATUS_NOTIFY_ENUM_DIR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to change a user password in the security account manager without providing the necessary Windows cross-encrypted password. (code=0xC000015D).
        /// </summary>
        internal static string STATUS_NT_CROSS_ENCRYPTION_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_NT_CROSS_ENCRYPTION_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The authentication failed because NTLM was blocked. (code=0xC0000418).
        /// </summary>
        internal static string STATUS_NTLM_BLOCKED {
            get {
                return ResourceManager.GetString("STATUS_NTLM_BLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Password Too Complex} The Windows password is too complex to be converted to a LAN Manager password. The LAN Manager password that returned is a NULL string. (code=0x4000000D).
        /// </summary>
        internal static string STATUS_NULL_LM_PASSWORD {
            get {
                return ResourceManager.GetString("STATUS_NULL_LM_PASSWORD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object name already exists. (code=0xC0000035).
        /// </summary>
        internal static string STATUS_OBJECT_NAME_COLLISION {
            get {
                return ResourceManager.GetString("STATUS_OBJECT_NAME_COLLISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Object Exists} An attempt was made to create an object but the object name already exists. (code=0x40000000).
        /// </summary>
        internal static string STATUS_OBJECT_NAME_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_OBJECT_NAME_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object name is invalid. (code=0xC0000033).
        /// </summary>
        internal static string STATUS_OBJECT_NAME_INVALID {
            get {
                return ResourceManager.GetString("STATUS_OBJECT_NAME_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object name is not found. (code=0xC0000034).
        /// </summary>
        internal static string STATUS_OBJECT_NAME_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_OBJECT_NAME_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object (file, stream, or link) that corresponds to the handle has been deleted by a transaction savepoint rollback. (code=0xC0190021).
        /// </summary>
        internal static string STATUS_OBJECT_NO_LONGER_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_OBJECT_NO_LONGER_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object path component was not a directory object. (code=0xC0000039).
        /// </summary>
        internal static string STATUS_OBJECT_PATH_INVALID {
            get {
                return ResourceManager.GetString("STATUS_OBJECT_PATH_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Path Not Found} The path %hs does not exist. (code=0xC000003A).
        /// </summary>
        internal static string STATUS_OBJECT_PATH_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_OBJECT_PATH_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object path component was not a directory object. (code=0xC000003B).
        /// </summary>
        internal static string STATUS_OBJECT_PATH_SYNTAX_BAD {
            get {
                return ResourceManager.GetString("STATUS_OBJECT_PATH_SYNTAX_BAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Wrong Type} There is a mismatch between the type of object that is required by the requested operation and the type of object that is specified in the request. (code=0xC0000024).
        /// </summary>
        internal static string STATUS_OBJECT_TYPE_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_OBJECT_TYPE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to set the object ID failed because the object already has an ID. (code=0xC000022B).
        /// </summary>
        internal static string STATUS_OBJECTID_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_OBJECTID_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object ID was not found in the file. (code=0xC00002F0).
        /// </summary>
        internal static string STATUS_OBJECTID_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_OBJECTID_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Offload read operations cannot be performed on: (code=0xC000A2A3).
        /// </summary>
        internal static string STATUS_OFFLOAD_READ_FILE_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_OFFLOAD_READ_FILE_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A file system filter on the server has not opted in for Offload Read support. (code=0xC000A2A1).
        /// </summary>
        internal static string STATUS_OFFLOAD_READ_FLT_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_OFFLOAD_READ_FLT_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Offload write operations cannot be performed on: (code=0xC000A2A4).
        /// </summary>
        internal static string STATUS_OFFLOAD_WRITE_FILE_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_OFFLOAD_WRITE_FILE_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A file system filter on the server has not opted in for Offload Write support. (code=0xC000A2A2).
        /// </summary>
        internal static string STATUS_OFFLOAD_WRITE_FLT_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_OFFLOAD_WRITE_FLT_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is supported only when you are connected to the server. (code=0xC00002CC).
        /// </summary>
        internal static string STATUS_ONLY_IF_CONNECTED {
            get {
                return ResourceManager.GetString("STATUS_ONLY_IF_CONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NtCreateFile API failed. This error should never be returned to an application; it is a place holder for the Windows LAN Manager Redirector to use in its internal error-mapping routines. (code=0xC0000136).
        /// </summary>
        internal static string STATUS_OPEN_FAILED {
            get {
                return ResourceManager.GetString("STATUS_OPEN_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed in a transaction. (code=0xC019005A).
        /// </summary>
        internal static string STATUS_OPERATION_NOT_SUPPORTED_IN_TRANSACTION {
            get {
                return ResourceManager.GetString("STATUS_OPERATION_NOT_SUPPORTED_IN_TRANSACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An open/create operation completed while an opportunistic lock (oplock) break is underway. (code=0x00000108).
        /// </summary>
        internal static string STATUS_OPLOCK_BREAK_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_OPLOCK_BREAK_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error status returned when the opportunistic lock (oplock) request is denied. (code=0xC00000E2).
        /// </summary>
        internal static string STATUS_OPLOCK_NOT_GRANTED {
            get {
                return ResourceManager.GetString("STATUS_OPLOCK_NOT_GRANTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Ordinal Not Found} The ordinal %ld could not be located in the dynamic link library %hs. (code=0xC0000138).
        /// </summary>
        internal static string STATUS_ORDINAL_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_ORDINAL_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The page fault was a demand zero fault. (code=0x00000112).
        /// </summary>
        internal static string STATUS_PAGE_FAULT_COPY_ON_WRITE {
            get {
                return ResourceManager.GetString("STATUS_PAGE_FAULT_COPY_ON_WRITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The page fault was a demand zero fault. (code=0x00000111).
        /// </summary>
        internal static string STATUS_PAGE_FAULT_DEMAND_ZERO {
            get {
                return ResourceManager.GetString("STATUS_PAGE_FAULT_DEMAND_ZERO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The page fault was a demand zero fault. (code=0x00000113).
        /// </summary>
        internal static string STATUS_PAGE_FAULT_GUARD_PAGE {
            get {
                return ResourceManager.GetString("STATUS_PAGE_FAULT_GUARD_PAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The page fault was satisfied by reading from a secondary storage device. (code=0x00000114).
        /// </summary>
        internal static string STATUS_PAGE_FAULT_PAGING_FILE {
            get {
                return ResourceManager.GetString("STATUS_PAGE_FAULT_PAGING_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The page fault was a transition fault. (code=0x00000110).
        /// </summary>
        internal static string STATUS_PAGE_FAULT_TRANSITION {
            get {
                return ResourceManager.GetString("STATUS_PAGE_FAULT_TRANSITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Unable to Create Paging File} The creation of the paging file %hs failed (%lx). The requested size was %ld. (code=0xC0000146).
        /// </summary>
        internal static string STATUS_PAGEFILE_CREATE_FAILED {
            get {
                return ResourceManager.GetString("STATUS_PAGEFILE_CREATE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The page file quota for the process has been exhausted. (code=0xC0000007).
        /// </summary>
        internal static string STATUS_PAGEFILE_QUOTA {
            get {
                return ResourceManager.GetString("STATUS_PAGEFILE_QUOTA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The page file quota was exceeded. (code=0xC000012C).
        /// </summary>
        internal static string STATUS_PAGEFILE_QUOTA_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_PAGEFILE_QUOTA_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data present in one of the parameters is more than the function can operate on. (code=0xC0000410).
        /// </summary>
        internal static string STATUS_PARAMETER_QUOTA_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_PARAMETER_QUOTA_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A device parity error on an I/O operation. (code=0xC000002B).
        /// </summary>
        internal static string STATUS_PARITY_ERROR {
            get {
                return ResourceManager.GetString("STATUS_PARITY_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because of protection conflicts, not all the requested bytes could be copied. (code=0x8000000D).
        /// </summary>
        internal static string STATUS_PARTIAL_COPY {
            get {
                return ResourceManager.GetString("STATUS_PARTIAL_COPY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tape could not be partitioned. (code=0xC0000172).
        /// </summary>
        internal static string STATUS_PARTITION_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_PARTITION_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user account password has expired. (code=0xC0000071).
        /// </summary>
        internal static string STATUS_PASSWORD_EXPIRED {
            get {
                return ResourceManager.GetString("STATUS_PASSWORD_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user password must be changed before logging on the first time. (code=0xC0000224).
        /// </summary>
        internal static string STATUS_PASSWORD_MUST_CHANGE {
            get {
                return ResourceManager.GetString("STATUS_PASSWORD_MUST_CHANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When trying to update a password, this status indicates that some password update rule has been violated. For example, the password might not meet length criteria. (code=0xC000006C).
        /// </summary>
        internal static string STATUS_PASSWORD_RESTRICTION {
            get {
                return ResourceManager.GetString("STATUS_PASSWORD_RESTRICTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contacted server does not support the indicated part of the DFS namespace. (code=0xC0000257).
        /// </summary>
        internal static string STATUS_PATH_NOT_COVERED {
            get {
                return ResourceManager.GetString("STATUS_PATH_NOT_COVERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation that was requested is pending completion. (code=0x00000103).
        /// </summary>
        internal static string STATUS_PENDING {
            get {
                return ResourceManager.GetString("STATUS_PENDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The delegated trust creation quota of the current user has been exceeded. (code=0xC0000401).
        /// </summary>
        internal static string STATUS_PER_USER_TRUST_QUOTA_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_PER_USER_TRUST_QUOTA_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pipe operation has failed because the other end of the pipe has been closed. (code=0xC000014B).
        /// </summary>
        internal static string STATUS_PIPE_BROKEN {
            get {
                return ResourceManager.GetString("STATUS_PIPE_BROKEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified pipe is set to complete operations and there are current I/O operations queued so that it cannot be changed to queue operations. (code=0xC00000AE).
        /// </summary>
        internal static string STATUS_PIPE_BUSY {
            get {
                return ResourceManager.GetString("STATUS_PIPE_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified named pipe is in the closing state. (code=0xC00000B1).
        /// </summary>
        internal static string STATUS_PIPE_CLOSING {
            get {
                return ResourceManager.GetString("STATUS_PIPE_CLOSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified named pipe is in the connected state. (code=0xC00000B2).
        /// </summary>
        internal static string STATUS_PIPE_CONNECTED {
            get {
                return ResourceManager.GetString("STATUS_PIPE_CONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified named pipe is in the disconnected state. (code=0xC00000B0).
        /// </summary>
        internal static string STATUS_PIPE_DISCONNECTED {
            get {
                return ResourceManager.GetString("STATUS_PIPE_DISCONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used to indicate that a read operation was done on an empty pipe. (code=0xC00000D9).
        /// </summary>
        internal static string STATUS_PIPE_EMPTY {
            get {
                return ResourceManager.GetString("STATUS_PIPE_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified named pipe is in the listening state. (code=0xC00000B3).
        /// </summary>
        internal static string STATUS_PIPE_LISTENING {
            get {
                return ResourceManager.GetString("STATUS_PIPE_LISTENING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An instance of a named pipe cannot be found in the listening state. (code=0xC00000AC).
        /// </summary>
        internal static string STATUS_PIPE_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("STATUS_PIPE_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smart card certificate used for authentication was not trusted. Contact your system administrator. (code=0xC000038C).
        /// </summary>
        internal static string STATUS_PKINIT_CLIENT_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_PKINIT_CLIENT_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Kerberos protocol encountered an error while validating the KDC certificate during smart card logon. There is more information in the system event log. (code=0xC0000320).
        /// </summary>
        internal static string STATUS_PKINIT_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_PKINIT_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client certificate does not contain a valid UPN, or does not match the client name in the logon request. Contact your administrator. (code=0xC00002F9).
        /// </summary>
        internal static string STATUS_PKINIT_NAME_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_PKINIT_NAME_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PKU2U protocol encountered an error while attempting to utilize the associated certificates. (code=0xC000042E).
        /// </summary>
        internal static string STATUS_PKU2U_CERT_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_PKU2U_CERT_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have attempted to load a legacy device driver while its device instance had been disabled. (code=0xC000025E).
        /// </summary>
        internal static string STATUS_PLUGPLAY_NO_DEVICE {
            get {
                return ResourceManager.GetString("STATUS_PLUGPLAY_NO_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Plug and Play query operation was not successful. (code=0x80000028).
        /// </summary>
        internal static string STATUS_PLUGPLAY_QUERY_VETOED {
            get {
                return ResourceManager.GetString("STATUS_PLUGPLAY_QUERY_VETOED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A device is missing in the system BIOS MPS table. This device will not be used. Contact your system vendor for a system BIOS update. (code=0xC0040035).
        /// </summary>
        internal static string STATUS_PNP_BAD_MPS_TABLE {
            get {
                return ResourceManager.GetString("STATUS_PNP_BAD_MPS_TABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Driver %2 returned an invalid ID for a child device (%3). (code=0xC0040038).
        /// </summary>
        internal static string STATUS_PNP_INVALID_ID {
            get {
                return ResourceManager.GetString("STATUS_PNP_INVALID_ID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An IRQ translator failed to translate resources. (code=0xC0040037).
        /// </summary>
        internal static string STATUS_PNP_IRQ_TRANSLATION_FAILED {
            get {
                return ResourceManager.GetString("STATUS_PNP_IRQ_TRANSLATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device will not start without a reboot. (code=0xC00002D2).
        /// </summary>
        internal static string STATUS_PNP_REBOOT_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_PNP_REBOOT_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A device was removed so enumeration must be restarted. (code=0xC00002CE).
        /// </summary>
        internal static string STATUS_PNP_RESTART_ENUMERATION {
            get {
                return ResourceManager.GetString("STATUS_PNP_RESTART_ENUMERATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A translator failed to translate resources. (code=0xC0040036).
        /// </summary>
        internal static string STATUS_PNP_TRANSLATION_FAILED {
            get {
                return ResourceManager.GetString("STATUS_PNP_TRANSLATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The policy object does not exist when it should. (code=0xC000029A).
        /// </summary>
        internal static string STATUS_POLICY_OBJECT_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_POLICY_OBJECT_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested policy information only lives in the Ds. (code=0xC000029B).
        /// </summary>
        internal static string STATUS_POLICY_ONLY_IN_DS {
            get {
                return ResourceManager.GetString("STATUS_POLICY_ONLY_IN_DS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified port already has a completion list. (code=0xC000071A).
        /// </summary>
        internal static string STATUS_PORT_ALREADY_HAS_COMPLETION_LIST {
            get {
                return ResourceManager.GetString("STATUS_PORT_ALREADY_HAS_COMPLETION_LIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to set the DebugPort or ExceptionPort of a process, but a port already exists in the process, or an attempt was made to set the CompletionPort of a file but a port was already set in the file, or an attempt was made to set the associated completion port of an ALPC port but it is already set. (code=0xC0000048).
        /// </summary>
        internal static string STATUS_PORT_ALREADY_SET {
            get {
                return ResourceManager.GetString("STATUS_PORT_ALREADY_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ALPC port is closed. (code=0xC0000700).
        /// </summary>
        internal static string STATUS_PORT_CLOSED {
            get {
                return ResourceManager.GetString("STATUS_PORT_CLOSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NtConnectPort request is refused. (code=0xC0000041).
        /// </summary>
        internal static string STATUS_PORT_CONNECTION_REFUSED {
            get {
                return ResourceManager.GetString("STATUS_PORT_CONNECTION_REFUSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to send a message to a disconnected communication port. (code=0xC0000037).
        /// </summary>
        internal static string STATUS_PORT_DISCONNECTED {
            get {
                return ResourceManager.GetString("STATUS_PORT_DISCONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length of the message that was passed to NtRequestPort or NtRequestWaitReplyPort is longer than the maximum message that is allowed by the port. (code=0xC000002F).
        /// </summary>
        internal static string STATUS_PORT_MESSAGE_TOO_LONG {
            get {
                return ResourceManager.GetString("STATUS_PORT_MESSAGE_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to remove a processes DebugPort was made, but a port was not already associated with the process. (code=0xC0000353).
        /// </summary>
        internal static string STATUS_PORT_NOT_SET {
            get {
                return ResourceManager.GetString("STATUS_PORT_NOT_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No service is operating at the destination port of the transport on the remote system. (code=0xC000023F).
        /// </summary>
        internal static string STATUS_PORT_UNREACHABLE {
            get {
                return ResourceManager.GetString("STATUS_PORT_UNREACHABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Possible deadlock condition. (code=0xC0000194).
        /// </summary>
        internal static string STATUS_POSSIBLE_DEADLOCK {
            get {
                return ResourceManager.GetString("STATUS_POSSIBLE_DEADLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The power state of the current device cannot support this request. (code=0xC00002D3).
        /// </summary>
        internal static string STATUS_POWER_STATE_INVALID {
            get {
                return ResourceManager.GetString("STATUS_POWER_STATE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified registry key is referenced by a predefined handle. (code=0x40000016).
        /// </summary>
        internal static string STATUS_PREDEFINED_HANDLE {
            get {
                return ResourceManager.GetString("STATUS_PREDEFINED_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The machine account was created prior to Windows NT 4.0 operating system. The account needs to be recreated. (code=0xC0000357).
        /// </summary>
        internal static string STATUS_PRENT4_MACHINE_ACCOUNT {
            get {
                return ResourceManager.GetString("STATUS_PRENT4_MACHINE_ACCOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Connect Failure on Primary Transport} An attempt was made to connect to the remote server %hs on the primary transport, but the connection failed. The computer WAS able to connect on a secondary transport. (code=0x0000010E).
        /// </summary>
        internal static string STATUS_PRIMARY_TRANSPORT_CONNECT_FAILED {
            get {
                return ResourceManager.GetString("STATUS_PRIMARY_TRANSPORT_CONNECT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested print file has been canceled. (code=0xC00000C8).
        /// </summary>
        internal static string STATUS_PRINT_CANCELLED {
            get {
                return ResourceManager.GetString("STATUS_PRINT_CANCELLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The print queue is full. (code=0xC00000C6).
        /// </summary>
        internal static string STATUS_PRINT_QUEUE_FULL {
            get {
                return ResourceManager.GetString("STATUS_PRINT_QUEUE_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A required privilege is not held by the client. (code=0xC0000061).
        /// </summary>
        internal static string STATUS_PRIVILEGE_NOT_HELD {
            get {
                return ResourceManager.GetString("STATUS_PRIVILEGE_NOT_HELD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Privileged instruction. (code=0xC0000096).
        /// </summary>
        internal static string STATUS_PRIVILEGED_INSTRUCTION {
            get {
                return ResourceManager.GetString("STATUS_PRIVILEGED_INSTRUCTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the specified procedure address cannot be found in the DLL. (code=0xC000007A).
        /// </summary>
        internal static string STATUS_PROCEDURE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_PROCEDURE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current process is a cloned process. (code=0x00000129).
        /// </summary>
        internal static string STATUS_PROCESS_CLONED {
            get {
                return ResourceManager.GetString("STATUS_PROCESS_CLONED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified process is part of a job. (code=0x00000124).
        /// </summary>
        internal static string STATUS_PROCESS_IN_JOB {
            get {
                return ResourceManager.GetString("STATUS_PROCESS_IN_JOB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Either the target process, or the target thread&apos;s containing process, is a protected process. (code=0xC0000712).
        /// </summary>
        internal static string STATUS_PROCESS_IS_PROTECTED {
            get {
                return ResourceManager.GetString("STATUS_PROCESS_IS_PROTECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to duplicate an object handle into or out of an exiting process. (code=0xC000010A).
        /// </summary>
        internal static string STATUS_PROCESS_IS_TERMINATING {
            get {
                return ResourceManager.GetString("STATUS_PROCESS_IS_TERMINATING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified process is not part of a job. (code=0x00000123).
        /// </summary>
        internal static string STATUS_PROCESS_NOT_IN_JOB {
            get {
                return ResourceManager.GetString("STATUS_PROCESS_NOT_IN_JOB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of active profiling objects is at the maximum and no more can be started. (code=0xC00000D3).
        /// </summary>
        internal static string STATUS_PROFILING_AT_LIMIT {
            get {
                return ResourceManager.GetString("STATUS_PROFILING_AT_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Profiling is not started. (code=0xC00000B7).
        /// </summary>
        internal static string STATUS_PROFILING_NOT_STARTED {
            get {
                return ResourceManager.GetString("STATUS_PROFILING_NOT_STARTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Profiling is not stopped. (code=0xC00000B8).
        /// </summary>
        internal static string STATUS_PROFILING_NOT_STOPPED {
            get {
                return ResourceManager.GetString("STATUS_PROFILING_NOT_STOPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified property set does not exist on the object. (code=0xC0000230).
        /// </summary>
        internal static string STATUS_PROPSET_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_PROPSET_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The protocol is not installed on the local machine. (code=0xC000A013).
        /// </summary>
        internal static string STATUS_PROTOCOL_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_PROTOCOL_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote system does not support the transport protocol. (code=0xC000023E).
        /// </summary>
        internal static string STATUS_PROTOCOL_UNREACHABLE {
            get {
                return ResourceManager.GetString("STATUS_PROTOCOL_UNREACHABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The page fault mappings changed in the middle of processing a fault so the operation must be retried. (code=0xC0000434).
        /// </summary>
        internal static string STATUS_PTE_CHANGED {
            get {
                return ResourceManager.GetString("STATUS_PTE_CHANGED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to purge this file from memory failed to purge some or all the data from memory. (code=0xC0000435).
        /// </summary>
        internal static string STATUS_PURGE_FAILED {
            get {
                return ResourceManager.GetString("STATUS_PURGE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have attempted to change your password to one that you have used in the past. The policy of your user account does not allow this. Select a password that you have not previously used. (code=0xC000025C).
        /// </summary>
        internal static string STATUS_PWD_HISTORY_CONFLICT {
            get {
                return ResourceManager.GetString("STATUS_PWD_HISTORY_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The policy of your user account does not allow you to change passwords too frequently. This is done to prevent users from changing back to a familiar, but potentially discovered, password. If you feel your password has been compromised, contact your administrator immediately to have a new one assigned. (code=0xC000025B).
        /// </summary>
        internal static string STATUS_PWD_TOO_RECENT {
            get {
                return ResourceManager.GetString("STATUS_PWD_TOO_RECENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The password provided is too short to meet the policy of your user account. Choose a longer password. (code=0xC000025A).
        /// </summary>
        internal static string STATUS_PWD_TOO_SHORT {
            get {
                return ResourceManager.GetString("STATUS_PWD_TOO_SHORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient quota exists to complete the operation. (code=0xC0000044).
        /// </summary>
        internal static string STATUS_QUOTA_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_QUOTA_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified quota list is internally inconsistent with its descriptor. (code=0xC0000266).
        /// </summary>
        internal static string STATUS_QUOTA_LIST_INCONSISTENT {
            get {
                return ResourceManager.GetString("STATUS_QUOTA_LIST_INCONSISTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The range could not be added to the range list because of a conflict. (code=0xC0000282).
        /// </summary>
        internal static string STATUS_RANGE_LIST_CONFLICT {
            get {
                return ResourceManager.GetString("STATUS_RANGE_LIST_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified range could not be found in the range list. (code=0xC000028C).
        /// </summary>
        internal static string STATUS_RANGE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_RANGE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The range specified in NtUnlockFile was not locked. (code=0xC000007E).
        /// </summary>
        internal static string STATUS_RANGE_NOT_LOCKED {
            get {
                return ResourceManager.GetString("STATUS_RANGE_NOT_LOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RDP protocol component %2 detected an error in the protocol stream and has disconnected the client. (code=0xC00A0032).
        /// </summary>
        internal static string STATUS_RDP_PROTOCOL_ERROR {
            get {
                return ResourceManager.GetString("STATUS_RDP_PROTOCOL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Expedited Data Received} The network transport returned data to its client that was marked as expedited by the remote system. (code=0x40000010).
        /// </summary>
        internal static string STATUS_RECEIVE_EXPEDITED {
            get {
                return ResourceManager.GetString("STATUS_RECEIVE_EXPEDITED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Partial Data Received} The network transport returned partial data to its client. The remaining data will be sent later. (code=0x4000000F).
        /// </summary>
        internal static string STATUS_RECEIVE_PARTIAL {
            get {
                return ResourceManager.GetString("STATUS_RECEIVE_PARTIAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Partial Expedited Data Received} The network transport returned partial data to its client and this data was marked as expedited by the remote system. The remaining data will be sent later. (code=0x40000011).
        /// </summary>
        internal static string STATUS_RECEIVE_PARTIAL_EXPEDITED {
            get {
                return ResourceManager.GetString("STATUS_RECEIVE_PARTIAL_EXPEDITED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A transaction recovery failed. (code=0xC0000227).
        /// </summary>
        internal static string STATUS_RECOVERY_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_RECOVERY_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transactional resource manager is already consistent. Recovery is not needed. (code=0x40190034).
        /// </summary>
        internal static string STATUS_RECOVERY_NOT_NEEDED {
            get {
                return ResourceManager.GetString("STATUS_RECOVERY_NOT_NEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid recursive dispatch attempt. (code=0xC0000704).
        /// </summary>
        internal static string STATUS_RECURSIVE_DISPATCH {
            get {
                return ResourceManager.GetString("STATUS_RECURSIVE_DISPATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The redirector is in use and cannot be unloaded. (code=0x80000023).
        /// </summary>
        internal static string STATUS_REDIRECTOR_HAS_OPEN_HANDLES {
            get {
                return ResourceManager.GetString("STATUS_REDIRECTOR_HAS_OPEN_HANDLES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to access a network file, but the network software was not yet started. (code=0xC00000FB).
        /// </summary>
        internal static string STATUS_REDIRECTOR_NOT_STARTED {
            get {
                return ResourceManager.GetString("STATUS_REDIRECTOR_NOT_STARTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Print or disk redirection is temporarily paused. (code=0xC00000D1).
        /// </summary>
        internal static string STATUS_REDIRECTOR_PAUSED {
            get {
                return ResourceManager.GetString("STATUS_REDIRECTOR_PAUSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to start the redirector, but the redirector has already been started. (code=0xC00000FC).
        /// </summary>
        internal static string STATUS_REDIRECTOR_STARTED {
            get {
                return ResourceManager.GetString("STATUS_REDIRECTOR_STARTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Register NaT consumption faults. A NaT value is consumed on a non-speculative instruction. (code=0xC00002C9).
        /// </summary>
        internal static string STATUS_REG_NAT_CONSUMPTION {
            get {
                return ResourceManager.GetString("STATUS_REG_NAT_CONSUMPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {The Registry Is Corrupt} The structure of one of the files that contains registry data is corrupt; the image of the file in memory is corrupt; or the file could not be recovered because the alternate copy or log was absent or corrupt. (code=0xC000014C).
        /// </summary>
        internal static string STATUS_REGISTRY_CORRUPT {
            get {
                return ResourceManager.GetString("STATUS_REGISTRY_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Registry Hive Recovered} The registry hive (file): %hs was corrupted and it has been recovered. Some data might have been lost. (code=0x8000002A).
        /// </summary>
        internal static string STATUS_REGISTRY_HIVE_RECOVERED {
            get {
                return ResourceManager.GetString("STATUS_REGISTRY_HIVE_RECOVERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An I/O operation initiated by the Registry failed and cannot be recovered. The registry could not read in, write out, or flush one of the files that contain the system&apos;s image of the registry. (code=0xC000014D).
        /// </summary>
        internal static string STATUS_REGISTRY_IO_FAILED {
            get {
                return ResourceManager.GetString("STATUS_REGISTRY_IO_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Low On Registry Space} The system has reached the maximum size that is allowed for the system part of the registry. Additional storage requests will be ignored. (code=0xC0000256).
        /// </summary>
        internal static string STATUS_REGISTRY_QUOTA_LIMIT {
            get {
                return ResourceManager.GetString("STATUS_REGISTRY_QUOTA_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Registry Recovery} One of the files that contains the system registry data had to be recovered by using a log or alternate copy. The recovery was successful. (code=0x40000009).
        /// </summary>
        internal static string STATUS_REGISTRY_RECOVERED {
            get {
                return ResourceManager.GetString("STATUS_REGISTRY_RECOVERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device requires re-initialization due to hardware errors. (code=0xC0000287).
        /// </summary>
        internal static string STATUS_REINITIALIZATION_NEEDED {
            get {
                return ResourceManager.GetString("STATUS_REINITIALIZATION_NEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Virtual Circuit Closed} The network transport on a remote computer has closed a network connection. There might or might not be I/O requests outstanding. (code=0xC000013C).
        /// </summary>
        internal static string STATUS_REMOTE_DISCONNECT {
            get {
                return ResourceManager.GetString("STATUS_REMOTE_DISCONNECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote server sent mismatching version number or Fid for a file opened with transactions. (code=0xC019000C).
        /// </summary>
        internal static string STATUS_REMOTE_FILE_VERSION_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_REMOTE_FILE_VERSION_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This remote computer is not listening. (code=0xC00000BC).
        /// </summary>
        internal static string STATUS_REMOTE_NOT_LISTENING {
            get {
                return ResourceManager.GetString("STATUS_REMOTE_NOT_LISTENING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Insufficient Resources on Remote Computer} The remote computer has insufficient resources to complete the network request. For example, the remote computer might not have enough available memory to carry out the request at this time. (code=0xC000013D).
        /// </summary>
        internal static string STATUS_REMOTE_RESOURCES {
            get {
                return ResourceManager.GetString("STATUS_REMOTE_RESOURCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to establish a session to a network server, but there are already too many sessions established to that server. (code=0xC0000196).
        /// </summary>
        internal static string STATUS_REMOTE_SESSION_LIMIT {
            get {
                return ResourceManager.GetString("STATUS_REMOTE_SESSION_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote storage service encountered a media error. (code=0xC000029E).
        /// </summary>
        internal static string STATUS_REMOTE_STORAGE_MEDIA_ERROR {
            get {
                return ResourceManager.GetString("STATUS_REMOTE_STORAGE_MEDIA_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote storage service is not operational at this time. (code=0xC000029D).
        /// </summary>
        internal static string STATUS_REMOTE_STORAGE_NOT_ACTIVE {
            get {
                return ResourceManager.GetString("STATUS_REMOTE_STORAGE_NOT_ACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reparse should be performed by the Object Manager because the name of the file resulted in a symbolic link. (code=0x00000104).
        /// </summary>
        internal static string STATUS_REPARSE {
            get {
                return ResourceManager.GetString("STATUS_REPARSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The reparse attribute cannot be set because it is incompatible with an existing attribute. (code=0xC00002B2).
        /// </summary>
        internal static string STATUS_REPARSE_ATTRIBUTE_CONFLICT {
            get {
                return ResourceManager.GetString("STATUS_REPARSE_ATTRIBUTE_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reparse should be performed by the Object Manager because the name of the file resulted in a symbolic link. (code=0x00000118).
        /// </summary>
        internal static string STATUS_REPARSE_OBJECT {
            get {
                return ResourceManager.GetString("STATUS_REPARSE_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NTFS symbolic link could not be resolved even though the initial file name is valid. (code=0xC0000280).
        /// </summary>
        internal static string STATUS_REPARSE_POINT_NOT_RESOLVED {
            get {
                return ResourceManager.GetString("STATUS_REPARSE_POINT_NOT_RESOLVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Reply Message Mismatch} An attempt was made to reply to an LPC message, but the thread specified by the client ID in the message was not waiting on that message. (code=0xC000021F).
        /// </summary>
        internal static string STATUS_REPLY_MESSAGE_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_REPLY_MESSAGE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request was aborted. (code=0xC0000240).
        /// </summary>
        internal static string STATUS_REQUEST_ABORTED {
            get {
                return ResourceManager.GetString("STATUS_REQUEST_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ALPC message has been canceled. (code=0xC0000703).
        /// </summary>
        internal static string STATUS_REQUEST_CANCELED {
            get {
                return ResourceManager.GetString("STATUS_REQUEST_CANCELED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No more connections can be made to this remote computer at this time because the computer has already accepted the maximum number of connections. (code=0xC00000D0).
        /// </summary>
        internal static string STATUS_REQUEST_NOT_ACCEPTED {
            get {
                return ResourceManager.GetString("STATUS_REQUEST_NOT_ACCEPTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation is out of order with respect to other operations. (code=0xC000042A).
        /// </summary>
        internal static string STATUS_REQUEST_OUT_OF_SEQUENCE {
            get {
                return ResourceManager.GetString("STATUS_REQUEST_OUT_OF_SEQUENCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the specified image file did not contain a resource section. (code=0xC0000089).
        /// </summary>
        internal static string STATUS_RESOURCE_DATA_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_RESOURCE_DATA_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user stopped resource enumeration. (code=0xC00B0007).
        /// </summary>
        internal static string STATUS_RESOURCE_ENUM_USER_STOP {
            get {
                return ResourceManager.GetString("STATUS_RESOURCE_ENUM_USER_STOP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource requested is already in use. (code=0xC0000708).
        /// </summary>
        internal static string STATUS_RESOURCE_IN_USE {
            get {
                return ResourceManager.GetString("STATUS_RESOURCE_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the specified resource language ID cannot be found in the image file. (code=0xC0000204).
        /// </summary>
        internal static string STATUS_RESOURCE_LANG_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_RESOURCE_LANG_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the specified resource name cannot be found in the image file. (code=0xC000008B).
        /// </summary>
        internal static string STATUS_RESOURCE_NAME_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_RESOURCE_NAME_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Application Error} The application attempted to release a resource it did not own. Click OK to terminate the application. (code=0xC0000264).
        /// </summary>
        internal static string STATUS_RESOURCE_NOT_OWNED {
            get {
                return ResourceManager.GetString("STATUS_RESOURCE_NOT_OWNED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device has succeeded a query-stop and its resource requirements have changed. (code=0x00000119).
        /// </summary>
        internal static string STATUS_RESOURCE_REQUIREMENTS_CHANGED {
            get {
                return ResourceManager.GetString("STATUS_RESOURCE_REQUIREMENTS_CHANGED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the specified resource type cannot be found in the image file. (code=0xC000008A).
        /// </summary>
        internal static string STATUS_RESOURCE_TYPE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_RESOURCE_TYPE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified resource manager was unable to be opened because it was not found. (code=0xC019004F).
        /// </summary>
        internal static string STATUS_RESOURCEMANAGER_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_RESOURCEMANAGER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified ResourceManager made no changes or updates to the resource under this transaction. (code=0x00000202).
        /// </summary>
        internal static string STATUS_RESOURCEMANAGER_READ_ONLY {
            get {
                return ResourceManager.GetString("STATUS_RESOURCEMANAGER_READ_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This boot application must be restarted. (code=0xC0000453).
        /// </summary>
        internal static string STATUS_RESTART_BOOT_APPLICATION {
            get {
                return ResourceManager.GetString("STATUS_RESTART_BOOT_APPLICATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system was resumed from hibernation. (code=0x4000002B).
        /// </summary>
        internal static string STATUS_RESUME_HIBERNATION {
            get {
                return ResourceManager.GetString("STATUS_RESUME_HIBERNATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request needs to be retried. (code=0xC000022D).
        /// </summary>
        internal static string STATUS_RETRY {
            get {
                return ResourceManager.GetString("STATUS_RETRY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that two revision levels are incompatible. (code=0xC0000059).
        /// </summary>
        internal static string STATUS_REVISION_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_REVISION_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The revocation status of the smart card certificate that is used for authentication could not be determined. Contact your system administrator. (code=0xC000038B).
        /// </summary>
        internal static string STATUS_REVOCATION_OFFLINE_C {
            get {
                return ResourceManager.GetString("STATUS_REVOCATION_OFFLINE_C", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The revocation status of the domain controller certificate used for smart card authentication could not be determined. There is additional information in the system event log. Contact your system administrator. (code=0xC000040C).
        /// </summary>
        internal static string STATUS_REVOCATION_OFFLINE_KDC {
            get {
                return ResourceManager.GetString("STATUS_REVOCATION_OFFLINE_KDC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transactional resource manager has already been started. (code=0x40190035).
        /// </summary>
        internal static string STATUS_RM_ALREADY_STARTED {
            get {
                return ResourceManager.GetString("STATUS_RM_ALREADY_STARTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction outcome is unavailable because the resource manager responsible for it is disconnected. (code=0xC0190032).
        /// </summary>
        internal static string STATUS_RM_DISCONNECTED {
            get {
                return ResourceManager.GetString("STATUS_RM_DISCONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The metadata of the resource manager has been corrupted. The resource manager will not function. (code=0xC0190006).
        /// </summary>
        internal static string STATUS_RM_METADATA_CORRUPT {
            get {
                return ResourceManager.GetString("STATUS_RM_METADATA_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transaction support within the specified file system resource manager was not started or was shut down due to an error. (code=0xC0190005).
        /// </summary>
        internal static string STATUS_RM_NOT_ACTIVE {
            get {
                return ResourceManager.GetString("STATUS_RM_NOT_ACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A rollback could not be scheduled because a previously scheduled rollback has already executed or been queued for execution. (code=0xC019003C).
        /// </summary>
        internal static string STATUS_ROLLBACK_TIMER_EXPIRED {
            get {
                return ResourceManager.GetString("STATUS_ROLLBACK_TIMER_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates an error has occurred during a registry transaction commit. The database has been left in an unknown, but probably inconsistent, state. The state of the registry transaction is left as COMMITTING. (code=0xC000011D).
        /// </summary>
        internal static string STATUS_RXACT_COMMIT_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_RXACT_COMMIT_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This warning level status indicates that the transaction state already exists for the registry subtree, but that a transaction commit was previously aborted. The commit has NOT been completed but has not been rolled back either; therefore, it can still be committed, if needed. (code=0x80000018).
        /// </summary>
        internal static string STATUS_RXACT_COMMIT_NECESSARY {
            get {
                return ResourceManager.GetString("STATUS_RXACT_COMMIT_NECESSARY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This success level status indicates that the transaction state already exists for the registry subtree but that a transaction commit was previously aborted. The commit has now been completed. (code=0x0000010A).
        /// </summary>
        internal static string STATUS_RXACT_COMMITTED {
            get {
                return ResourceManager.GetString("STATUS_RXACT_COMMITTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that the transaction state of a registry subtree is incompatible with the requested operation. For example, a request has been made to start a new transaction with one already in progress, or a request has been made to apply a transaction when one is not currently in progress. (code=0xC000011C).
        /// </summary>
        internal static string STATUS_RXACT_INVALID_STATE {
            get {
                return ResourceManager.GetString("STATUS_RXACT_INVALID_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This informational level status indicates that a specified registry subtree transaction state did not yet exist and had to be created. (code=0x40000004).
        /// </summary>
        internal static string STATUS_RXACT_STATE_CREATED {
            get {
                return ResourceManager.GetString("STATUS_RXACT_STATE_CREATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Security Accounts Manager initialization failed because of the following error: %hs Error Status: 0x%x. Click OK to shut down this system and restart in Safe Mode. Check the event log for more detailed information. (code=0xC00002E3).
        /// </summary>
        internal static string STATUS_SAM_INIT_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_SAM_INIT_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Security Accounts Manager needs to get the boot key from the floppy disk. (code=0xC00002E0).
        /// </summary>
        internal static string STATUS_SAM_NEED_BOOTKEY_FLOPPY {
            get {
                return ResourceManager.GetString("STATUS_SAM_NEED_BOOTKEY_FLOPPY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Security Accounts Manager needs to get the boot password. (code=0xC00002DF).
        /// </summary>
        internal static string STATUS_SAM_NEED_BOOTKEY_PASSWORD {
            get {
                return ResourceManager.GetString("STATUS_SAM_NEED_BOOTKEY_PASSWORD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length of a secret exceeds the maximum allowable length. The length and number of secrets is limited to satisfy U.S. State Department export restrictions. (code=0xC0000157).
        /// </summary>
        internal static string STATUS_SECRET_TOO_LONG {
            get {
                return ResourceManager.GetString("STATUS_SECRET_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A mapped section could not be extended. (code=0xC0000087).
        /// </summary>
        internal static string STATUS_SECTION_NOT_EXTENDED {
            get {
                return ResourceManager.GetString("STATUS_SECTION_NOT_EXTENDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to query image information on a section that does not map an image. (code=0xC0000049).
        /// </summary>
        internal static string STATUS_SECTION_NOT_IMAGE {
            get {
                return ResourceManager.GetString("STATUS_SECTION_NOT_IMAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A view to a section specifies a protection that is incompatible with the protection of the initial view. (code=0xC000004E).
        /// </summary>
        internal static string STATUS_SECTION_PROTECTION {
            get {
                return ResourceManager.GetString("STATUS_SECTION_PROTECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Section Too Large} The specified section is too big to map the file. (code=0xC0000040).
        /// </summary>
        internal static string STATUS_SECTION_TOO_BIG {
            get {
                return ResourceManager.GetString("STATUS_SECTION_TOO_BIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The security stream for the given volume is in an inconsistent state. Please run CHKDSK on the volume. (code=0xC00001A0).
        /// </summary>
        internal static string STATUS_SECURITY_STREAM_IS_INCONSISTENT {
            get {
                return ResourceManager.GetString("STATUS_SECURITY_STREAM_IS_INCONSISTENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Segment Load} A virtual DOS machine (VDM) is loading, unloading, or moving an MS-DOS or Win16 program segment image. An exception is raised so that a debugger can load, unload, or track symbols and breakpoints within these 16-bit segments. (code=0x40000005).
        /// </summary>
        internal static string STATUS_SEGMENT_NOTIFICATION {
            get {
                return ResourceManager.GetString("STATUS_SEGMENT_NOTIFICATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to release a semaphore such that its maximum count would have been exceeded. (code=0xC0000047).
        /// </summary>
        internal static string STATUS_SEMAPHORE_LIMIT_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_SEMAPHORE_LIMIT_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Serial IOCTL Timeout} A serial I/O operation completed because the time-out period expired. (The IOCTL_SERIAL_XOFF_COUNTER had not reached zero.) (code=0x4000000C).
        /// </summary>
        internal static string STATUS_SERIAL_COUNTER_TIMEOUT {
            get {
                return ResourceManager.GetString("STATUS_SERIAL_COUNTER_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Serial IOCTL Complete} A serial I/O operation was completed by another write to a serial port. (The IOCTL_SERIAL_XOFF_COUNTER reached zero.) (code=0x40000008).
        /// </summary>
        internal static string STATUS_SERIAL_MORE_WRITES {
            get {
                return ResourceManager.GetString("STATUS_SERIAL_MORE_WRITES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No serial device was successfully initialized. The serial driver will unload. (code=0xC0000150).
        /// </summary>
        internal static string STATUS_SERIAL_NO_DEVICE_INITED {
            get {
                return ResourceManager.GetString("STATUS_SERIAL_NO_DEVICE_INITED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The GUID allocation server is disabled at the moment. (code=0xC0000080).
        /// </summary>
        internal static string STATUS_SERVER_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_SERVER_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server is in use and cannot be unloaded. (code=0x80000024).
        /// </summary>
        internal static string STATUS_SERVER_HAS_OPEN_HANDLES {
            get {
                return ResourceManager.GetString("STATUS_SERVER_HAS_OPEN_HANDLES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The GUID allocation server is enabled at the moment. (code=0xC0000081).
        /// </summary>
        internal static string STATUS_SERVER_NOT_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_SERVER_NOT_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server machine is shutting down. (code=0xC00002FF).
        /// </summary>
        internal static string STATUS_SERVER_SHUTDOWN_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_SERVER_SHUTDOWN_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server process is running under a SID that is different from the SID that is required by client. (code=0xC00002A0).
        /// </summary>
        internal static string STATUS_SERVER_SID_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_SERVER_SID_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file server is temporarily unavailable. (code=0xC0000466).
        /// </summary>
        internal static string STATUS_SERVER_UNAVAILABLE {
            get {
                return ResourceManager.GetString("STATUS_SERVER_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to %hs (code=0x40000018).
        /// </summary>
        internal static string STATUS_SERVICE_NOTIFICATION {
            get {
                return ResourceManager.GetString("STATUS_SERVICE_NOTIFICATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A tape access reached a set mark. (code=0x80000021).
        /// </summary>
        internal static string STATUS_SETMARK_DETECTED {
            get {
                return ResourceManager.GetString("STATUS_SETMARK_DETECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The share is temporarily unavailable. (code=0xC0000480).
        /// </summary>
        internal static string STATUS_SHARE_UNAVAILABLE {
            get {
                return ResourceManager.GetString("STATUS_SHARE_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to open a device that was sharing an interrupt request (IRQ) with other devices. At least one other device that uses that IRQ was already opened. Two concurrent opens of devices that share an IRQ and only work via interrupts is not supported for the particular bus type that the devices use. (code=0xC000016C).
        /// </summary>
        internal static string STATUS_SHARED_IRQ_BUSY {
            get {
                return ResourceManager.GetString("STATUS_SHARED_IRQ_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The policy object is shared and can only be modified at the root. (code=0xC0000299).
        /// </summary>
        internal static string STATUS_SHARED_POLICY {
            get {
                return ResourceManager.GetString("STATUS_SHARED_POLICY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File sharing has been temporarily paused. (code=0xC00000CF).
        /// </summary>
        internal static string STATUS_SHARING_PAUSED {
            get {
                return ResourceManager.GetString("STATUS_SHARING_PAUSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A file cannot be opened because the share access flags are incompatible. (code=0xC0000043).
        /// </summary>
        internal static string STATUS_SHARING_VIOLATION {
            get {
                return ResourceManager.GetString("STATUS_SHARING_VIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Short names are not enabled on this volume. (code=0xC000019F).
        /// </summary>
        internal static string STATUS_SHORT_NAMES_NOT_ENABLED_ON_VOLUME {
            get {
                return ResourceManager.GetString("STATUS_SHORT_NAMES_NOT_ENABLED_ON_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A system shutdown is in progress. (code=0xC00002FE).
        /// </summary>
        internal static string STATUS_SHUTDOWN_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_SHUTDOWN_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {EXCEPTION} Single Step A single step or trace operation has just been completed. (code=0x80000004).
        /// </summary>
        internal static string STATUS_SINGLE_STEP {
            get {
                return ResourceManager.GetString("STATUS_SINGLE_STEP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smart card is blocked. (code=0xC0000381).
        /// </summary>
        internal static string STATUS_SMARTCARD_CARD_BLOCKED {
            get {
                return ResourceManager.GetString("STATUS_SMARTCARD_CARD_BLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No PIN was presented to the smart card. (code=0xC0000382).
        /// </summary>
        internal static string STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED {
            get {
                return ResourceManager.GetString("STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smart card certificate used for authentication has expired. Contact your system administrator. (code=0xC000038D).
        /// </summary>
        internal static string STATUS_SMARTCARD_CERT_EXPIRED {
            get {
                return ResourceManager.GetString("STATUS_SMARTCARD_CERT_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smart card certificate used for authentication has been revoked. Contact your system administrator. There might be additional information in the event log. (code=0xC0000389).
        /// </summary>
        internal static string STATUS_SMARTCARD_CERT_REVOKED {
            get {
                return ResourceManager.GetString("STATUS_SMARTCARD_CERT_REVOKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A communication error with the smart card has been detected. (code=0xC0000387).
        /// </summary>
        internal static string STATUS_SMARTCARD_IO_ERROR {
            get {
                return ResourceManager.GetString("STATUS_SMARTCARD_IO_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Smart card logon is required and was not used. (code=0xC00002FA).
        /// </summary>
        internal static string STATUS_SMARTCARD_LOGON_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_SMARTCARD_LOGON_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No smart card is available. (code=0xC0000383).
        /// </summary>
        internal static string STATUS_SMARTCARD_NO_CARD {
            get {
                return ResourceManager.GetString("STATUS_SMARTCARD_NO_CARD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested certificate does not exist on the smart card. (code=0xC0000385).
        /// </summary>
        internal static string STATUS_SMARTCARD_NO_CERTIFICATE {
            get {
                return ResourceManager.GetString("STATUS_SMARTCARD_NO_CERTIFICATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested key container does not exist on the smart card. (code=0xC0000384).
        /// </summary>
        internal static string STATUS_SMARTCARD_NO_KEY_CONTAINER {
            get {
                return ResourceManager.GetString("STATUS_SMARTCARD_NO_KEY_CONTAINER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested keyset does not exist. (code=0xC0000386).
        /// </summary>
        internal static string STATUS_SMARTCARD_NO_KEYSET {
            get {
                return ResourceManager.GetString("STATUS_SMARTCARD_NO_KEYSET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smart card provider could not perform the action because the context was acquired as silent. (code=0xC000038F).
        /// </summary>
        internal static string STATUS_SMARTCARD_SILENT_CONTEXT {
            get {
                return ResourceManager.GetString("STATUS_SMARTCARD_SILENT_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Kerberos protocol encountered an error while attempting to use the smart card subsystem. (code=0xC0000321).
        /// </summary>
        internal static string STATUS_SMARTCARD_SUBSYSTEM_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_SMARTCARD_SUBSYSTEM_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incorrect PIN was presented to the smart card. (code=0xC0000380).
        /// </summary>
        internal static string STATUS_SMARTCARD_WRONG_PIN {
            get {
                return ResourceManager.GetString("STATUS_SMARTCARD_WRONG_PIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current cluster functional level does not support this SMB dialect. (code=0xC05D0001).
        /// </summary>
        internal static string STATUS_SMB_BAD_CLUSTER_DIALECT {
            get {
                return ResourceManager.GetString("STATUS_SMB_BAD_CLUSTER_DIALECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returned in response to a client negotiate request when the server does not support any of the hash algorithms in the request. (code=0xC05D0000).
        /// </summary>
        internal static string STATUS_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP {
            get {
                return ResourceManager.GetString("STATUS_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SMI primitive installer failed during setup or servicing. (code=0xC0150025).
        /// </summary>
        internal static string STATUS_SMI_PRIMITIVE_INSTALLER_FAILED {
            get {
                return ResourceManager.GetString("STATUS_SMI_PRIMITIVE_INSTALLER_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some of the information to be translated has not been translated. (code=0x00000107).
        /// </summary>
        internal static string STATUS_SOME_NOT_MAPPED {
            get {
                return ResourceManager.GetString("STATUS_SOME_NOT_MAPPED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified medium changer source element contains no media. (code=0xC0000283).
        /// </summary>
        internal static string STATUS_SOURCE_ELEMENT_EMPTY {
            get {
                return ResourceManager.GetString("STATUS_SOURCE_ELEMENT_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sparse operation could not be completed because a transaction is active on the file. (code=0xC0190049).
        /// </summary>
        internal static string STATUS_SPARSE_NOT_ALLOWED_IN_TRANSACTION {
            get {
                return ResourceManager.GetString("STATUS_SPARSE_NOT_ALLOWED_IN_TRANSACTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates an operation that is incompatible with built-in accounts has been attempted on a built-in (special) SAM account. For example, built-in accounts cannot be deleted. (code=0xC0000124).
        /// </summary>
        internal static string STATUS_SPECIAL_ACCOUNT {
            get {
                return ResourceManager.GetString("STATUS_SPECIAL_ACCOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation requested cannot be performed on the specified group because it is a built-in special group. (code=0xC0000125).
        /// </summary>
        internal static string STATUS_SPECIAL_GROUP {
            get {
                return ResourceManager.GetString("STATUS_SPECIAL_GROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation requested cannot be performed on the specified user because it is a built-in special user. (code=0xC0000126).
        /// </summary>
        internal static string STATUS_SPECIAL_USER {
            get {
                return ResourceManager.GetString("STATUS_SPECIAL_USER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system detected an overrun of a stack-based buffer in this application. This overrun could potentially allow a malicious user to gain control of this application. (code=0xC0000409).
        /// </summary>
        internal static string STATUS_STACK_BUFFER_OVERRUN {
            get {
                return ResourceManager.GetString("STATUS_STACK_BUFFER_OVERRUN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new guard page for the stack cannot be created. (code=0xC00000FD).
        /// </summary>
        internal static string STATUS_STACK_OVERFLOW {
            get {
                return ResourceManager.GetString("STATUS_STACK_OVERFLOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request must be handled by the stack overflow code. (code=0xC0000228).
        /// </summary>
        internal static string STATUS_STACK_OVERFLOW_READ {
            get {
                return ResourceManager.GetString("STATUS_STACK_OVERFLOW_READ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The create operation stopped after reaching a symbolic link. (code=0x8000002D).
        /// </summary>
        internal static string STATUS_STOPPED_ON_SYMLINK {
            get {
                return ResourceManager.GetString("STATUS_STOPPED_ON_SYMLINK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file miniversion was not found for this transacted file open. (code=0xC0190022).
        /// </summary>
        internal static string STATUS_STREAM_MINIVERSION_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_STREAM_MINIVERSION_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file miniversion was found but has been invalidated. The most likely cause is a transaction savepoint rollback. (code=0xC0190023).
        /// </summary>
        internal static string STATUS_STREAM_MINIVERSION_NOT_VALID {
            get {
                return ResourceManager.GetString("STATUS_STREAM_MINIVERSION_NOT_VALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The other end of the security negotiation requires strong crypto but it is not supported on the local machine. (code=0xC00002F6).
        /// </summary>
        internal static string STATUS_STRONG_CRYPTO_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_STRONG_CRYPTO_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation completed successfully. (code=0x00000000).
        /// </summary>
        internal static string STATUS_SUCCESS {
            get {
                return ResourceManager.GetString("STATUS_SUCCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to suspend a thread whose suspend count was at its maximum. (code=0xC000004A).
        /// </summary>
        internal static string STATUS_SUSPEND_COUNT_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_SUSPEND_COUNT_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The application attempted to activate a disabled activation context. (code=0xC0150007).
        /// </summary>
        internal static string STATUS_SXS_ACTIVATION_CONTEXT_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_SXS_ACTIVATION_CONTEXT_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly is not a deployment. (code=0xC015001E).
        /// </summary>
        internal static string STATUS_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT {
            get {
                return ResourceManager.GetString("STATUS_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The referenced assembly could not be found. (code=0xC015000C).
        /// </summary>
        internal static string STATUS_SXS_ASSEMBLY_MISSING {
            get {
                return ResourceManager.GetString("STATUS_SXS_ASSEMBLY_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The referenced assembly is not installed on the system. (code=0xC0150004).
        /// </summary>
        internal static string STATUS_SXS_ASSEMBLY_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_SXS_ASSEMBLY_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows was unble to process the application binding information. Refer to the system event log for further information. (code=0xC0150002).
        /// </summary>
        internal static string STATUS_SXS_CANT_GEN_ACTCTX {
            get {
                return ResourceManager.GetString("STATUS_SXS_CANT_GEN_ACTCTX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The component store has become corrupted. (code=0xC015001A).
        /// </summary>
        internal static string STATUS_SXS_COMPONENT_STORE_CORRUPT {
            get {
                return ResourceManager.GetString("STATUS_SXS_COMPONENT_STORE_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activation context activation stack for the running thread of execution is corrupt. (code=0xC0150014).
        /// </summary>
        internal static string STATUS_SXS_CORRUPT_ACTIVATION_STACK {
            get {
                return ResourceManager.GetString("STATUS_SXS_CORRUPT_ACTIVATION_STACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The application isolation metadata for this process or thread has become corrupt. (code=0xC0150015).
        /// </summary>
        internal static string STATUS_SXS_CORRUPTION {
            get {
                return ResourceManager.GetString("STATUS_SXS_CORRUPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activation context being deactivated is not the most recently activated one. (code=0xC015000F).
        /// </summary>
        internal static string STATUS_SXS_EARLY_DEACTIVATION {
            get {
                return ResourceManager.GetString("STATUS_SXS_EARLY_DEACTIVATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A component&apos;s file does not match the verification information present in the component manifest. (code=0xC015001B).
        /// </summary>
        internal static string STATUS_SXS_FILE_HASH_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_SXS_FILE_HASH_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A component is missing file verification information in its manifest. (code=0xC0150027).
        /// </summary>
        internal static string STATUS_SXS_FILE_HASH_MISSING {
            get {
                return ResourceManager.GetString("STATUS_SXS_FILE_HASH_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file is not a part of the assembly. (code=0xC015001F).
        /// </summary>
        internal static string STATUS_SXS_FILE_NOT_PART_OF_ASSEMBLY {
            get {
                return ResourceManager.GetString("STATUS_SXS_FILE_NOT_PART_OF_ASSEMBLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The component identities are different. (code=0xC015001D).
        /// </summary>
        internal static string STATUS_SXS_IDENTITIES_DIFFERENT {
            get {
                return ResourceManager.GetString("STATUS_SXS_IDENTITIES_DIFFERENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An identity contains two definitions for the same attribute. (code=0xC0150018).
        /// </summary>
        internal static string STATUS_SXS_IDENTITY_DUPLICATE_ATTRIBUTE {
            get {
                return ResourceManager.GetString("STATUS_SXS_IDENTITY_DUPLICATE_ATTRIBUTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The identity string is malformed. This might be due to a trailing comma, more than two unnamed attributes, a missing attribute name, or a missing attribute value. (code=0xC0150019).
        /// </summary>
        internal static string STATUS_SXS_IDENTITY_PARSE_ERROR {
            get {
                return ResourceManager.GetString("STATUS_SXS_IDENTITY_PARSE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The application binding data format is invalid. (code=0xC0150003).
        /// </summary>
        internal static string STATUS_SXS_INVALID_ACTCTXDATA_FORMAT {
            get {
                return ResourceManager.GetString("STATUS_SXS_INVALID_ACTCTXDATA_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activation context being deactivated is not active for the current thread of execution. (code=0xC0150010).
        /// </summary>
        internal static string STATUS_SXS_INVALID_DEACTIVATION {
            get {
                return ResourceManager.GetString("STATUS_SXS_INVALID_DEACTIVATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of an attribute in an identity is not within the legal range. (code=0xC0150017).
        /// </summary>
        internal static string STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME {
            get {
                return ResourceManager.GetString("STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of an attribute in an identity is not within the legal range. (code=0xC0150016).
        /// </summary>
        internal static string STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE {
            get {
                return ResourceManager.GetString("STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested lookup key was not found in any active activation context. (code=0xC0150008).
        /// </summary>
        internal static string STATUS_SXS_KEY_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_SXS_KEY_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The manifest file does not begin with the required tag and format information. (code=0xC0150005).
        /// </summary>
        internal static string STATUS_SXS_MANIFEST_FORMAT_ERROR {
            get {
                return ResourceManager.GetString("STATUS_SXS_MANIFEST_FORMAT_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The identities of the manifests are identical, but their contents are different. (code=0xC015001C).
        /// </summary>
        internal static string STATUS_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT {
            get {
                return ResourceManager.GetString("STATUS_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The manifest file contains one or more syntax errors. (code=0xC0150006).
        /// </summary>
        internal static string STATUS_SXS_MANIFEST_PARSE_ERROR {
            get {
                return ResourceManager.GetString("STATUS_SXS_MANIFEST_PARSE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of the manifest exceeds the maximum allowed. (code=0xC0150022).
        /// </summary>
        internal static string STATUS_SXS_MANIFEST_TOO_BIG {
            get {
                return ResourceManager.GetString("STATUS_SXS_MANIFEST_TOO_BIG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activation context being deactivated has already been deactivated. (code=0xC0150011).
        /// </summary>
        internal static string STATUS_SXS_MULTIPLE_DEACTIVATION {
            get {
                return ResourceManager.GetString("STATUS_SXS_MULTIPLE_DEACTIVATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to set the process default activation context failed because the process default activation context was already set. (code=0xC015000E).
        /// </summary>
        internal static string STATUS_SXS_PROCESS_DEFAULT_ALREADY_SET {
            get {
                return ResourceManager.GetString("STATUS_SXS_PROCESS_DEFAULT_ALREADY_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A component used by the isolation facility has requested that the process be terminated. (code=0xC0150013).
        /// </summary>
        internal static string STATUS_SXS_PROCESS_TERMINATION_REQUESTED {
            get {
                return ResourceManager.GetString("STATUS_SXS_PROCESS_TERMINATION_REQUESTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A kernel mode component is releasing a reference on an activation context. (code=0x4015000D).
        /// </summary>
        internal static string STATUS_SXS_RELEASE_ACTIVATION_CONTEXT {
            get {
                return ResourceManager.GetString("STATUS_SXS_RELEASE_ACTIVATION_CONTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested section is not present in the activation context. (code=0xC0150001).
        /// </summary>
        internal static string STATUS_SXS_SECTION_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_SXS_SECTION_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The setting is not registered. (code=0xC0150023).
        /// </summary>
        internal static string STATUS_SXS_SETTING_NOT_REGISTERED {
            get {
                return ResourceManager.GetString("STATUS_SXS_SETTING_NOT_REGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activation context of the system default assembly could not be generated. (code=0xC0150012).
        /// </summary>
        internal static string STATUS_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY {
            get {
                return ResourceManager.GetString("STATUS_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lack of system resources has required isolated activation to be disabled for the current thread of execution. (code=0xC015000B).
        /// </summary>
        internal static string STATUS_SXS_THREAD_QUERIES_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_SXS_THREAD_QUERIES_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more required transaction members are not present. (code=0xC0150024).
        /// </summary>
        internal static string STATUS_SXS_TRANSACTION_CLOSURE_INCOMPLETE {
            get {
                return ResourceManager.GetString("STATUS_SXS_TRANSACTION_CLOSURE_INCOMPLETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A component version required by the application conflicts with another component version that is already active. (code=0xC0150009).
        /// </summary>
        internal static string STATUS_SXS_VERSION_CONFLICT {
            get {
                return ResourceManager.GetString("STATUS_SXS_VERSION_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type requested activation context section does not match the query API used. (code=0xC015000A).
        /// </summary>
        internal static string STATUS_SXS_WRONG_SECTION_TYPE {
            get {
                return ResourceManager.GetString("STATUS_SXS_WRONG_SECTION_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The symbolic link cannot be followed because its type is disabled. (code=0xC0000715).
        /// </summary>
        internal static string STATUS_SYMLINK_CLASS_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_SYMLINK_CLASS_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to On applicable Windows Server releases, the SAM database is significantly out of synchronization with the copy on the domain controller. A complete synchronization is required. (code=0xC0000134).
        /// </summary>
        internal static string STATUS_SYNCHRONIZATION_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_SYNCHRONIZATION_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested system device cannot be found. (code=0xC0000452).
        /// </summary>
        internal static string STATUS_SYSTEM_DEVICE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_SYSTEM_DEVICE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System hive size has exceeded its limit. (code=0xC000036E).
        /// </summary>
        internal static string STATUS_SYSTEM_HIVE_TOO_LARGE {
            get {
                return ResourceManager.GetString("STATUS_SYSTEM_HIVE_TOO_LARGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Fatal System Error} The system image %s is not properly signed. The file has been replaced with the signed file. The system has been shut down. (code=0xC00002D1).
        /// </summary>
        internal static string STATUS_SYSTEM_IMAGE_BAD_SIGNATURE {
            get {
                return ResourceManager.GetString("STATUS_SYSTEM_IMAGE_BAD_SIGNATURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system power state is transitioning from %2 to %3 but could enter %4. (code=0x40000031).
        /// </summary>
        internal static string STATUS_SYSTEM_POWERSTATE_COMPLEX_TRANSITION {
            get {
                return ResourceManager.GetString("STATUS_SYSTEM_POWERSTATE_COMPLEX_TRANSITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system power state is transitioning from %2 to %3. (code=0x4000002F).
        /// </summary>
        internal static string STATUS_SYSTEM_POWERSTATE_TRANSITION {
            get {
                return ResourceManager.GetString("STATUS_SYSTEM_POWERSTATE_TRANSITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Fatal System Error} The %hs system process terminated unexpectedly with a status of 0x%08x (0x%08x 0x%08x). The system has been shut down. (code=0xC000021A).
        /// </summary>
        internal static string STATUS_SYSTEM_PROCESS_TERMINATED {
            get {
                return ResourceManager.GetString("STATUS_SYSTEM_PROCESS_TERMINATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system is in the process of shutting down. (code=0xC00002EB).
        /// </summary>
        internal static string STATUS_SYSTEM_SHUTDOWN {
            get {
                return ResourceManager.GetString("STATUS_SYSTEM_SHUTDOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified thread is already joining a task. (code=0xC0000502).
        /// </summary>
        internal static string STATUS_THREAD_ALREADY_IN_TASK {
            get {
                return ResourceManager.GetString("STATUS_THREAD_ALREADY_IN_TASK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to suspend a thread that has begun termination. (code=0xC000004B).
        /// </summary>
        internal static string STATUS_THREAD_IS_TERMINATING {
            get {
                return ResourceManager.GetString("STATUS_THREAD_IS_TERMINATING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to operate on a thread within a specific process, but the specified thread is not in the specified process. (code=0xC000012A).
        /// </summary>
        internal static string STATUS_THREAD_NOT_IN_PROCESS {
            get {
                return ResourceManager.GetString("STATUS_THREAD_NOT_IN_PROCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Thread Suspended} A thread termination occurred while the thread was suspended. The thread resumed, and termination proceeded. (code=0x40000001).
        /// </summary>
        internal static string STATUS_THREAD_WAS_SUSPENDED {
            get {
                return ResourceManager.GetString("STATUS_THREAD_WAS_SUSPENDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to After a callback to 0x%p(0x%p), a completion call to FreeLibrary(%p) failed with status 0x%08x. (code=0xC000070E).
        /// </summary>
        internal static string STATUS_THREADPOOL_FREE_LIBRARY_ON_COMPLETION_FAILED {
            get {
                return ResourceManager.GetString("STATUS_THREADPOOL_FREE_LIBRARY_ON_COMPLETION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Status 0x%08x was returned, waiting on handle 0x%x for wait 0x%p, in waiter 0x%p. (code=0xC000070A).
        /// </summary>
        internal static string STATUS_THREADPOOL_HANDLE_EXCEPTION {
            get {
                return ResourceManager.GetString("STATUS_THREADPOOL_HANDLE_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to After a callback to 0x%p(0x%p), a completion call to ReleaseMutex(%p) failed with status 0x%08x. (code=0xC000070D).
        /// </summary>
        internal static string STATUS_THREADPOOL_RELEASE_MUTEX_ON_COMPLETION_FAILED {
            get {
                return ResourceManager.GetString("STATUS_THREADPOOL_RELEASE_MUTEX_ON_COMPLETION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to After a callback to 0x%p(0x%p), a completion call to ReleaseSemaphore(0x%p, %d) failed with status 0x%08x. (code=0xC000070C).
        /// </summary>
        internal static string STATUS_THREADPOOL_RELEASE_SEMAPHORE_ON_COMPLETION_FAILED {
            get {
                return ResourceManager.GetString("STATUS_THREADPOOL_RELEASE_SEMAPHORE_ON_COMPLETION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The thread pool 0x%p was released while a thread was posting a callback to 0x%p(0x%p) to it. (code=0xC000070F).
        /// </summary>
        internal static string STATUS_THREADPOOL_RELEASED_DURING_OPERATION {
            get {
                return ResourceManager.GetString("STATUS_THREADPOOL_RELEASED_DURING_OPERATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to After a callback to 0x%p(0x%p), a completion call to Set event(0x%p) failed with status 0x%08x. (code=0xC000070B).
        /// </summary>
        internal static string STATUS_THREADPOOL_SET_EVENT_ON_COMPLETION_FAILED {
            get {
                return ResourceManager.GetString("STATUS_THREADPOOL_SET_EVENT_ON_COMPLETION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The time at the primary domain controller is different from the time at the backup domain controller or member server by too large an amount. (code=0xC0000133).
        /// </summary>
        internal static string STATUS_TIME_DIFFERENCE_AT_DC {
            get {
                return ResourceManager.GetString("STATUS_TIME_DIFFERENCE_AT_DC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given Timeout interval expired. (code=0x00000102).
        /// </summary>
        internal static string STATUS_TIMEOUT {
            get {
                return ResourceManager.GetString("STATUS_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to cancel or set a timer that has an associated APC and the specified thread is not the thread that originally set the timer with an associated APC routine. (code=0xC000000C).
        /// </summary>
        internal static string STATUS_TIMER_NOT_CANCELED {
            get {
                return ResourceManager.GetString("STATUS_TIMER_NOT_CANCELED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The timer resolution was not previously set by the current process. (code=0xC0000245).
        /// </summary>
        internal static string STATUS_TIMER_RESOLUTION_NOT_SET {
            get {
                return ResourceManager.GetString("STATUS_TIMER_RESOLUTION_NOT_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resume flag to a timer API was ignored. (code=0x40000025).
        /// </summary>
        internal static string STATUS_TIMER_RESUME_IGNORED {
            get {
                return ResourceManager.GetString("STATUS_TIMER_RESUME_IGNORED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call to create a transaction manager object failed because the Tm Identity that is stored in the log file does not match the Tm Identity that was passed in as an argument. (code=0xC019004A).
        /// </summary>
        internal static string STATUS_TM_IDENTITY_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_TM_IDENTITY_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction manager was unable to be successfully initialized. Transacted operations are not supported. (code=0xC0190004).
        /// </summary>
        internal static string STATUS_TM_INITIALIZATION_FAILED {
            get {
                return ResourceManager.GetString("STATUS_TM_INITIALIZATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be completed because the transaction manager does not have a log. (code=0xC019003B).
        /// </summary>
        internal static string STATUS_TM_VOLATILE {
            get {
                return ResourceManager.GetString("STATUS_TM_VOLATILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to establish a token for use as a primary token but the token is already in use. A token can only be the primary token of one process at a time. (code=0xC000012B).
        /// </summary>
        internal static string STATUS_TOKEN_ALREADY_IN_USE {
            get {
                return ResourceManager.GetString("STATUS_TOKEN_ALREADY_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A write operation was attempted to a volume after it was dismounted. (code=0xC0000189).
        /// </summary>
        internal static string STATUS_TOO_LATE {
            get {
                return ResourceManager.GetString("STATUS_TOO_LATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport address could not be opened because all the available addresses are in use. (code=0xC0000209).
        /// </summary>
        internal static string STATUS_TOO_MANY_ADDRESSES {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_ADDRESSES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network BIOS command limit has been reached. (code=0xC00000C1).
        /// </summary>
        internal static string STATUS_TOO_MANY_COMMANDS {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_COMMANDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to During a logon attempt, the user&apos;s security context accumulated too many security IDs. This is a very unusual situation. Remove the user from some global or local groups to reduce the number of security IDs to incorporate into the security context. (code=0xC000015A).
        /// </summary>
        internal static string STATUS_TOO_MANY_CONTEXT_IDS {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_CONTEXT_IDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many GUIDs were requested from the allocation server at once. (code=0xC0000082).
        /// </summary>
        internal static string STATUS_TOO_MANY_GUIDS_REQUESTED {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_GUIDS_REQUESTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to create more links on a file than the file system supports. (code=0xC0000265).
        /// </summary>
        internal static string STATUS_TOO_MANY_LINKS {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_LINKS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of LUIDs requested cannot be allocated with a single allocation. (code=0xC0000074).
        /// </summary>
        internal static string STATUS_TOO_MANY_LUIDS_REQUESTED {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_LUIDS_REQUESTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name limit for the network adapter card of the local computer was exceeded. (code=0xC00000CD).
        /// </summary>
        internal static string STATUS_TOO_MANY_NAMES {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_NAMES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport cannot dynamically acquire any more nodes. (code=0xC000020E).
        /// </summary>
        internal static string STATUS_TOO_MANY_NODES {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_NODES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many files are opened on a remote server. This error should only be returned by the Windows redirector on a remote drive. (code=0xC000011F).
        /// </summary>
        internal static string STATUS_TOO_MANY_OPENED_FILES {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_OPENED_FILES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to install more paging files than the system supports. (code=0xC0000097).
        /// </summary>
        internal static string STATUS_TOO_MANY_PAGING_FILES {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_PAGING_FILES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The KDC reply contained more than one principal name. (code=0xC00002F7).
        /// </summary>
        internal static string STATUS_TOO_MANY_PRINCIPALS {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_PRINCIPALS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of secrets that can be stored in a single system was exceeded. The length and number of secrets is limited to satisfy U.S. State Department export restrictions. (code=0xC0000156).
        /// </summary>
        internal static string STATUS_TOO_MANY_SECRETS {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_SECRETS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network BIOS session limit was exceeded. (code=0xC00000CE).
        /// </summary>
        internal static string STATUS_TOO_MANY_SESSIONS {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_SESSIONS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many SIDs have been specified. (code=0xC000017E).
        /// </summary>
        internal static string STATUS_TOO_MANY_SIDS {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_SIDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates a process has too many threads to perform the requested action. For example, assignment of a primary token can be performed only when a process has zero or one threads. (code=0xC0000129).
        /// </summary>
        internal static string STATUS_TOO_MANY_THREADS {
            get {
                return ResourceManager.GetString("STATUS_TOO_MANY_THREADS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Memory mapping (creating a mapped section) a remote file under a transaction is not supported. (code=0xC0190040).
        /// </summary>
        internal static string STATUS_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport aborted a pending transaction. (code=0xC000020F).
        /// </summary>
        internal static string STATUS_TRANSACTION_ABORTED {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is too late to perform the requested operation, because the transaction has already been aborted. (code=0xC0190015).
        /// </summary>
        internal static string STATUS_TRANSACTION_ALREADY_ABORTED {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_ALREADY_ABORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is too late to perform the requested operation, because the transaction has already been committed. (code=0xC0190016).
        /// </summary>
        internal static string STATUS_TRANSACTION_ALREADY_COMMITTED {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_ALREADY_COMMITTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transactions cannot be frozen because a freeze is already in progress. (code=0xC0190046).
        /// </summary>
        internal static string STATUS_TRANSACTION_FREEZE_IN_PROGRESS {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_FREEZE_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The kernel transaction manager had to abort or forget the transaction because it blocked forward progress. (code=0xC019005B).
        /// </summary>
        internal static string STATUS_TRANSACTION_INTEGRITY_VIOLATED {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_INTEGRITY_VIOLATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport does not recognize the specified transaction request ID. (code=0xC0000214).
        /// </summary>
        internal static string STATUS_TRANSACTION_INVALID_ID {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_INVALID_ID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer passed in to NtPushTransaction or NtPullTransaction is not in a valid format. (code=0xC0190017).
        /// </summary>
        internal static string STATUS_TRANSACTION_INVALID_MARSHALL_BUFFER {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_INVALID_MARSHALL_BUFFER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport does not recognize the specified transaction request type. (code=0xC0000215).
        /// </summary>
        internal static string STATUS_TRANSACTION_INVALID_TYPE {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_INVALID_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport did not find a transaction that matches the specific token. (code=0xC0000212).
        /// </summary>
        internal static string STATUS_TRANSACTION_NO_MATCH {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_NO_MATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport did not receive a release for a pending response. (code=0xC0000211).
        /// </summary>
        internal static string STATUS_TRANSACTION_NO_RELEASE {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_NO_RELEASE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation was made in the context of a transaction that is no longer active. (code=0xC0190003).
        /// </summary>
        internal static string STATUS_TRANSACTION_NOT_ACTIVE {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_NOT_ACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified operation could not be performed because the resource manager is not enlisted in the transaction. (code=0xC0190061).
        /// </summary>
        internal static string STATUS_TRANSACTION_NOT_ENLISTED {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_NOT_ENLISTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified transaction was unable to be opened because it was not found. (code=0xC019004E).
        /// </summary>
        internal static string STATUS_TRANSACTION_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource manager attempted to prepare a transaction that it has not successfully joined. (code=0xC0190007).
        /// </summary>
        internal static string STATUS_TRANSACTION_NOT_JOINED {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_NOT_JOINED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller has called a response API, but the response is not expected because the transaction manager did not issue the corresponding request to the caller. (code=0xC0190014).
        /// </summary>
        internal static string STATUS_TRANSACTION_NOT_REQUESTED {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_NOT_REQUESTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call to create a superior enlistment on this transaction object could not be completed because the transaction object specified for the enlistment is a subordinate branch of the transaction. Only the root of the transaction can be enlisted as a superior. (code=0xC0190054).
        /// </summary>
        internal static string STATUS_TRANSACTION_NOT_ROOT {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_NOT_ROOT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because the associated transaction manager or resource manager has been closed, the handle is no longer valid. (code=0xC0190055).
        /// </summary>
        internal static string STATUS_TRANSACTION_OBJECT_EXPIRED {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_OBJECT_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to propagate the transaction failed. (code=0xC0190010).
        /// </summary>
        internal static string STATUS_TRANSACTION_PROPAGATION_FAILED {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_PROPAGATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified operation could not be performed because the record to be logged was too long. This can occur because either there are too many enlistments on this transaction or the combined RecoveryInformation being logged on behalf of those enlistments is too long. (code=0xC0190058).
        /// </summary>
        internal static string STATUS_TRANSACTION_RECORD_TOO_LONG {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_RECORD_TOO_LONG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation is not valid on the transaction object in its current state. (code=0xC0190013).
        /// </summary>
        internal static string STATUS_TRANSACTION_REQUEST_NOT_VALID {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_REQUEST_NOT_VALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Promotion was required to allow the resource manager to enlist, but the transaction was set to disallow it. (code=0xC0190043).
        /// </summary>
        internal static string STATUS_TRANSACTION_REQUIRED_PROMOTION {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_REQUIRED_PROMOTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport had previously responded to a transaction request. (code=0xC0000213).
        /// </summary>
        internal static string STATUS_TRANSACTION_RESPONDED {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_RESPONDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified operation could not be performed on this superior enlistment because the enlistment was not created with the corresponding completion response in the NotificationMask. (code=0xC0190057).
        /// </summary>
        internal static string STATUS_TRANSACTION_RESPONSE_NOT_ENLISTED {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_RESPONSE_NOT_ENLISTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A transaction scope could not be entered because the scope handler has not been initialized. (code=0x80190042).
        /// </summary>
        internal static string STATUS_TRANSACTION_SCOPE_CALLBACKS_NOT_SET {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_SCOPE_CALLBACKS_NOT_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transaction object already has a superior enlistment, and the caller attempted an operation that would have created a new superior. Only a single superior enlistment is allowed. (code=0xC0190012).
        /// </summary>
        internal static string STATUS_TRANSACTION_SUPERIOR_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_SUPERIOR_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport timed out a request that is waiting for a response. (code=0xC0000210).
        /// </summary>
        internal static string STATUS_TRANSACTION_TIMED_OUT {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTION_TIMED_OUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function attempted to use a name that is reserved for use by another transaction. (code=0xC0190001).
        /// </summary>
        internal static string STATUS_TRANSACTIONAL_CONFLICT {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTIONAL_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This object is not allowed to be opened in a transaction. (code=0xC019003F).
        /// </summary>
        internal static string STATUS_TRANSACTIONAL_OPEN_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTIONAL_OPEN_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified transaction manager was unable to be opened because it was not found. (code=0xC0190051).
        /// </summary>
        internal static string STATUS_TRANSACTIONMANAGER_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTIONMANAGER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified resource manager was unable to create an enlistment because its associated transaction manager is not online. (code=0xC0190052).
        /// </summary>
        internal static string STATUS_TRANSACTIONMANAGER_NOT_ONLINE {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTIONMANAGER_NOT_ONLINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified transaction manager was unable to create the objects contained in its log file in the Ob namespace. Therefore, the transaction manager was unable to recover. (code=0xC0190053).
        /// </summary>
        internal static string STATUS_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request to thaw frozen transactions was ignored because transactions were not previously frozen. (code=0xC0190045).
        /// </summary>
        internal static string STATUS_TRANSACTIONS_NOT_FROZEN {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTIONS_NOT_FROZEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote server or share does not support transacted file operations. (code=0xC019000A).
        /// </summary>
        internal static string STATUS_TRANSACTIONS_UNSUPPORTED_REMOTE {
            get {
                return ResourceManager.GetString("STATUS_TRANSACTIONS_UNSUPPORTED_REMOTE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The translator has translated these resources into the global space and no additional translations should be performed. (code=0x00000120).
        /// </summary>
        internal static string STATUS_TRANSLATION_COMPLETE {
            get {
                return ResourceManager.GetString("STATUS_TRANSLATION_COMPLETE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transport element of the medium changer contains media, which is causing the operation to fail. (code=0xC00002CA).
        /// </summary>
        internal static string STATUS_TRANSPORT_FULL {
            get {
                return ResourceManager.GetString("STATUS_TRANSPORT_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network logon failed. This might be because the validation authority cannot be reached. (code=0xC0000190).
        /// </summary>
        internal static string STATUS_TRUST_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_TRUST_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The logon request failed because the trust relationship between the primary domain and the trusted domain failed. (code=0xC000018C).
        /// </summary>
        internal static string STATUS_TRUSTED_DOMAIN_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_TRUSTED_DOMAIN_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The logon request failed because the trust relationship between this workstation and the primary domain failed. (code=0xC000018D).
        /// </summary>
        internal static string STATUS_TRUSTED_RELATIONSHIP_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_TRUSTED_RELATIONSHIP_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The target session is incompatible with the current session. (code=0xC00A0039).
        /// </summary>
        internal static string STATUS_TS_INCOMPATIBLE_SESSIONS {
            get {
                return ResourceManager.GetString("STATUS_TS_INCOMPATIBLE_SESSIONS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The transactional metadata attribute on the file or directory %hs is corrupt and unreadable. (code=0xC019003D).
        /// </summary>
        internal static string STATUS_TXF_ATTRIBUTE_CORRUPT {
            get {
                return ResourceManager.GetString("STATUS_TXF_ATTRIBUTE_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The $Txf directory must be empty for this operation to succeed. (code=0xC0190039).
        /// </summary>
        internal static string STATUS_TXF_DIR_NOT_EMPTY {
            get {
                return ResourceManager.GetString("STATUS_TXF_DIR_NOT_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transaction metadata is already present on this file and cannot be superseded. (code=0x80190041).
        /// </summary>
        internal static string STATUS_TXF_METADATA_ALREADY_PRESENT {
            get {
                return ResourceManager.GetString("STATUS_TXF_METADATA_ALREADY_PRESENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to decommit uncommitted virtual memory. (code=0xC000002C).
        /// </summary>
        internal static string STATUS_UNABLE_TO_DECOMMIT_VM {
            get {
                return ResourceManager.GetString("STATUS_UNABLE_TO_DECOMMIT_VM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified section cannot be deleted. (code=0xC000001B).
        /// </summary>
        internal static string STATUS_UNABLE_TO_DELETE_SECTION {
            get {
                return ResourceManager.GetString("STATUS_UNABLE_TO_DELETE_SECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The virtual memory cannot be freed. (code=0xC000001A).
        /// </summary>
        internal static string STATUS_UNABLE_TO_FREE_VM {
            get {
                return ResourceManager.GetString("STATUS_UNABLE_TO_FREE_VM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to lock the eject media mechanism failed. (code=0xC0000175).
        /// </summary>
        internal static string STATUS_UNABLE_TO_LOCK_MEDIA {
            get {
                return ResourceManager.GetString("STATUS_UNABLE_TO_LOCK_MEDIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to unload media failed. (code=0xC0000176).
        /// </summary>
        internal static string STATUS_UNABLE_TO_UNLOAD_MEDIA {
            get {
                return ResourceManager.GetString("STATUS_UNABLE_TO_UNLOAD_MEDIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Unicode character is not defined in the Unicode character set that is installed on the system. (code=0xC0000163).
        /// </summary>
        internal static string STATUS_UNDEFINED_CHARACTER {
            get {
                return ResourceManager.GetString("STATUS_UNDEFINED_CHARACTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If an I/O error that is not defined in the standard FsRtl filter is returned, it is converted to the following error, which is guaranteed to be in the filter. In this case, information is lost; however, the filter correctly handles the exception. (code=0xC00000E9).
        /// </summary>
        internal static string STATUS_UNEXPECTED_IO_ERROR {
            get {
                return ResourceManager.GetString("STATUS_UNEXPECTED_IO_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If an MM error that is not defined in the standard FsRtl filter is returned, it is converted to one of the following errors, which are guaranteed to be in the filter. In this case, information is lost; however, the filter correctly handles the exception. (code=0xC00000EA).
        /// </summary>
        internal static string STATUS_UNEXPECTED_MM_CREATE_ERR {
            get {
                return ResourceManager.GetString("STATUS_UNEXPECTED_MM_CREATE_ERR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If an MM error that is not defined in the standard FsRtl filter is returned, it is converted to one of the following errors, which are guaranteed to be in the filter. In this case, information is lost; however, the filter correctly handles the exception. (code=0xC00000EC).
        /// </summary>
        internal static string STATUS_UNEXPECTED_MM_EXTEND_ERR {
            get {
                return ResourceManager.GetString("STATUS_UNEXPECTED_MM_EXTEND_ERR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If an MM error that is not defined in the standard FsRtl filter is returned, it is converted to one of the following errors, which are guaranteed to be in the filter. In this case, information is lost; however, the filter correctly handles the exception. (code=0xC00000EB).
        /// </summary>
        internal static string STATUS_UNEXPECTED_MM_MAP_ERROR {
            get {
                return ResourceManager.GetString("STATUS_UNEXPECTED_MM_MAP_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected network error occurred. (code=0xC00000C4).
        /// </summary>
        internal static string STATUS_UNEXPECTED_NETWORK_ERROR {
            get {
                return ResourceManager.GetString("STATUS_UNEXPECTED_NETWORK_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A security context was deleted before the context was completed. This is considered a logon failure. (code=0xC00002EE).
        /// </summary>
        internal static string STATUS_UNFINISHED_CONTEXT_DELETED {
            get {
                return ResourceManager.GetString("STATUS_UNFINISHED_CONTEXT_DELETED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Application Error} The exception %s (0x%08lx) occurred in the application at location 0x%08lx. (code=0xC0000144).
        /// </summary>
        internal static string STATUS_UNHANDLED_EXCEPTION {
            get {
                return ResourceManager.GetString("STATUS_UNHANDLED_EXCEPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates a revision number that was encountered or specified is not one that is known by the service. It might be a more recent revision than the service is aware of. (code=0xC0000058).
        /// </summary>
        internal static string STATUS_UNKNOWN_REVISION {
            get {
                return ResourceManager.GetString("STATUS_UNKNOWN_REVISION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No mapping for the Unicode character exists in the target multibyte code page. (code=0xC0000162).
        /// </summary>
        internal static string STATUS_UNMAPPABLE_CHARACTER {
            get {
                return ResourceManager.GetString("STATUS_UNMAPPABLE_CHARACTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Unknown Disk Format} The disk in drive %hs is not formatted properly. Check the disk, and reformat it, if needed. (code=0xC0000014).
        /// </summary>
        internal static string STATUS_UNRECOGNIZED_MEDIA {
            get {
                return ResourceManager.GetString("STATUS_UNRECOGNIZED_MEDIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The volume does not contain a recognized file system. Be sure that all required file system drivers are loaded and that the volume is not corrupt. (code=0xC000014F).
        /// </summary>
        internal static string STATUS_UNRECOGNIZED_VOLUME {
            get {
                return ResourceManager.GetString("STATUS_UNRECOGNIZED_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Operation Failed} The requested operation was unsuccessful. (code=0xC0000001).
        /// </summary>
        internal static string STATUS_UNSUCCESSFUL {
            get {
                return ResourceManager.GetString("STATUS_UNSUCCESSFUL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified compression format is unsupported. (code=0xC000025F).
        /// </summary>
        internal static string STATUS_UNSUPPORTED_COMPRESSION {
            get {
                return ResourceManager.GetString("STATUS_UNSUPPORTED_COMPRESSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unsupported pre-authentication mechanism was presented to the Kerberos package. (code=0xC0000351).
        /// </summary>
        internal static string STATUS_UNSUPPORTED_PREAUTH {
            get {
                return ResourceManager.GetString("STATUS_UNSUPPORTED_PREAUTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unwind exception code. (code=0xC0000027).
        /// </summary>
        internal static string STATUS_UNWIND {
            get {
                return ResourceManager.GetString("STATUS_UNWIND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A frame consolidation has been executed. (code=0x80000029).
        /// </summary>
        internal static string STATUS_UNWIND_CONSOLIDATE {
            get {
                return ResourceManager.GetString("STATUS_UNWIND_CONSOLIDATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A user-mode APC was delivered before the given Interval expired. (code=0x000000C0).
        /// </summary>
        internal static string STATUS_USER_APC {
            get {
                return ResourceManager.GetString("STATUS_USER_APC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The delegated trust deletion quota of the current user has been exceeded. (code=0xC0000403).
        /// </summary>
        internal static string STATUS_USER_DELETE_TRUST_QUOTA_EXCEEDED {
            get {
                return ResourceManager.GetString("STATUS_USER_DELETE_TRUST_QUOTA_EXCEEDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified account already exists. (code=0xC0000063).
        /// </summary>
        internal static string STATUS_USER_EXISTS {
            get {
                return ResourceManager.GetString("STATUS_USER_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation cannot be performed on a file with a user mapped section open. (code=0xC0000243).
        /// </summary>
        internal static string STATUS_USER_MAPPED_FILE {
            get {
                return ResourceManager.GetString("STATUS_USER_MAPPED_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote user session has been deleted. (code=0xC0000203).
        /// </summary>
        internal static string STATUS_USER_SESSION_DELETED {
            get {
                return ResourceManager.GetString("STATUS_USER_SESSION_DELETED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Kerberos sub-protocol User2User is required. (code=0xC0000408).
        /// </summary>
        internal static string STATUS_USER2USER_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_USER2USER_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The validation process needs to continue on to the next step. (code=0xC0000271).
        /// </summary>
        internal static string STATUS_VALIDATE_CONTINUE {
            get {
                return ResourceManager.GetString("STATUS_VALIDATE_CONTINUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the specified environment variable name was not found in the specified environment block. (code=0xC0000100).
        /// </summary>
        internal static string STATUS_VARIABLE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_VARIABLE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to %hs is a 16-bit application. You do not have permissions to execute 16-bit applications. Check your permissions with your system administrator. (code=0xC0000414).
        /// </summary>
        internal static string STATUS_VDM_DISALLOWED {
            get {
                return ResourceManager.GetString("STATUS_VDM_DISALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NTVDM encountered a hard error. (code=0xC000021D).
        /// </summary>
        internal static string STATUS_VDM_HARD_ERROR {
            get {
                return ResourceManager.GetString("STATUS_VDM_HARD_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application verifier has found an error in the current process. (code=0xC0000421).
        /// </summary>
        internal static string STATUS_VERIFIER_STOP {
            get {
                return ResourceManager.GetString("STATUS_VERIFIER_STOP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Verifying Disk} The media has changed and a verify operation is in progress; therefore, no reads or writes can be performed to the device, except those that are used in the verify operation. (code=0x80000016).
        /// </summary>
        internal static string STATUS_VERIFY_REQUIRED {
            get {
                return ResourceManager.GetString("STATUS_VERIFY_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The chain of virtual hard disks is corrupted. There is a mismatch in the virtual sizes of the parent virtual hard disk and differencing disk. (code=0xC03A0017).
        /// </summary>
        internal static string STATUS_VHD_CHILD_PARENT_SIZE_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_VHD_CHILD_PARENT_SIZE_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The chain of virtual hard disks is corrupted. A differencing disk is indicated in its own parent chain. (code=0xC03A0018).
        /// </summary>
        internal static string STATUS_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED {
            get {
                return ResourceManager.GetString("STATUS_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The chain of virtual hard disks is inaccessible. There was an error opening a virtual hard disk further up the chain. (code=0xC03A0019).
        /// </summary>
        internal static string STATUS_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT {
            get {
                return ResourceManager.GetString("STATUS_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The chain of virtual hard disks is inaccessible. The process has not been granted access rights to the parent virtual hard disk for the differencing disk. (code=0xC03A0016).
        /// </summary>
        internal static string STATUS_VHD_PARENT_VHD_ACCESS_DENIED {
            get {
                return ResourceManager.GetString("STATUS_VHD_PARENT_VHD_ACCESS_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Display Driver Recovered From Failure} The %hs display driver has detected a failure and recovered from it. Some graphical operations might have failed. The next time you restart the machine, a dialog box appears, giving you an opportunity to upload data about this failure to Microsoft. (code=0x401B00EC).
        /// </summary>
        internal static string STATUS_VIDEO_DRIVER_DEBUG_REPORT_REQUEST {
            get {
                return ResourceManager.GetString("STATUS_VIDEO_DRIVER_DEBUG_REPORT_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Display Driver Stopped Responding} The %hs display driver has stopped working normally. Save your work and reboot the system to restore full display functionality. The next time you reboot the computer, a dialog box will allow you to upload data about this failure to Microsoft. (code=0xC01B00EA).
        /// </summary>
        internal static string STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD {
            get {
                return ResourceManager.GetString("STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Display Driver Stopped Responding and recovered} The %hs display driver has stopped working normally. The recovery had been performed. (code=0x801B00EB).
        /// </summary>
        internal static string STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD_RECOVERED {
            get {
                return ResourceManager.GetString("STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD_RECOVERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified disk is not a virtual disk. (code=0xC03A0015).
        /// </summary>
        internal static string STATUS_VIRTDISK_NOT_VIRTUAL_DISK {
            get {
                return ResourceManager.GetString("STATUS_VIRTDISK_NOT_VIRTUAL_DISK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A virtual disk support provider for the specified file was not found. (code=0xC03A0014).
        /// </summary>
        internal static string STATUS_VIRTDISK_PROVIDER_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_VIRTDISK_PROVIDER_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Network Request Timeout} The session with a remote server has been disconnected because the time-out interval for a request has expired. (code=0xC00000D6).
        /// </summary>
        internal static string STATUS_VIRTUAL_CIRCUIT_CLOSED {
            get {
                return ResourceManager.GetString("STATUS_VIRTUAL_CIRCUIT_CLOSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file contains a virus and cannot be opened. Due to the nature of this virus, the file has been removed from this location. (code=0xC0000907).
        /// </summary>
        internal static string STATUS_VIRUS_DELETED {
            get {
                return ResourceManager.GetString("STATUS_VIRUS_DELETED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation did not complete successfully because the file contains a virus. (code=0xC0000906).
        /// </summary>
        internal static string STATUS_VIRUS_INFECTED {
            get {
                return ResourceManager.GetString("STATUS_VIRUS_INFECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system does not support mirrored volumes. (code=0xC038005B).
        /// </summary>
        internal static string STATUS_VOLMGR_MIRROR_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_VOLMGR_MIRROR_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system does not support RAID-5 volumes. (code=0xC038005C).
        /// </summary>
        internal static string STATUS_VOLMGR_RAID5_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_VOLMGR_RAID5_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Volume Shadow Copy Service} The system is now ready for hibernation. (code=0x00000125).
        /// </summary>
        internal static string STATUS_VOLSNAP_HIBERNATE_READY {
            get {
                return ResourceManager.GetString("STATUS_VOLSNAP_HIBERNATE_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Volume Shadow Copy Service} Wait while the Volume Shadow Copy Service prepares volume %hs for hibernation. (code=0xC0000407).
        /// </summary>
        internal static string STATUS_VOLSNAP_PREPARE_HIBERNATE {
            get {
                return ResourceManager.GetString("STATUS_VOLSNAP_PREPARE_HIBERNATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be completed because the volume is dirty. Please run the Chkdsk utility and try again. (code=0xC0000806).
        /// </summary>
        internal static string STATUS_VOLUME_DIRTY {
            get {
                return ResourceManager.GetString("STATUS_VOLUME_DIRTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation was attempted to a volume after it was dismounted. (code=0xC000026E).
        /// </summary>
        internal static string STATUS_VOLUME_DISMOUNTED {
            get {
                return ResourceManager.GetString("STATUS_VOLUME_DISMOUNTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new volume has been mounted by a file system. (code=0x00000109).
        /// </summary>
        internal static string STATUS_VOLUME_MOUNTED {
            get {
                return ResourceManager.GetString("STATUS_VOLUME_MOUNTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The volume must be upgraded to enable this feature. (code=0xC000029C).
        /// </summary>
        internal static string STATUS_VOLUME_NOT_UPGRADED {
            get {
                return ResourceManager.GetString("STATUS_VOLUME_NOT_UPGRADED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller specified WaitAny for WaitType and one of the dispatcher objects in the Object array has been set to the signaled state. (code=0x00000000).
        /// </summary>
        internal static string STATUS_WAIT_0 {
            get {
                return ResourceManager.GetString("STATUS_WAIT_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller specified WaitAny for WaitType and one of the dispatcher objects in the Object array has been set to the signaled state. (code=0x00000001).
        /// </summary>
        internal static string STATUS_WAIT_1 {
            get {
                return ResourceManager.GetString("STATUS_WAIT_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller specified WaitAny for WaitType and one of the dispatcher objects in the Object array has been set to the signaled state. (code=0x00000002).
        /// </summary>
        internal static string STATUS_WAIT_2 {
            get {
                return ResourceManager.GetString("STATUS_WAIT_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller specified WaitAny for WaitType and one of the dispatcher objects in the Object array has been set to the signaled state. (code=0x00000003).
        /// </summary>
        internal static string STATUS_WAIT_3 {
            get {
                return ResourceManager.GetString("STATUS_WAIT_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The caller specified WaitAny for WaitType and one of the dispatcher objects in the Object array has been set to the signaled state. (code=0x0000003F).
        /// </summary>
        internal static string STATUS_WAIT_63 {
            get {
                return ResourceManager.GetString("STATUS_WAIT_63", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An operation is blocked and waiting for an oplock. (code=0x00000367).
        /// </summary>
        internal static string STATUS_WAIT_FOR_OPLOCK {
            get {
                return ResourceManager.GetString("STATUS_WAIT_FOR_OPLOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system has awoken. (code=0x40000294).
        /// </summary>
        internal static string STATUS_WAKE_SYSTEM {
            get {
                return ResourceManager.GetString("STATUS_WAKE_SYSTEM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Kernel Debugger Awakened} The system debugger was awakened by an interrupt. (code=0x80000007).
        /// </summary>
        internal static string STATUS_WAKE_SYSTEM_DEBUGGER {
            get {
                return ResourceManager.GetString("STATUS_WAKE_SYSTEM_DEBUGGER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Page Locked} One of the pages to lock was already locked. (code=0x40000019).
        /// </summary>
        internal static string STATUS_WAS_LOCKED {
            get {
                return ResourceManager.GetString("STATUS_WAS_LOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Page Unlocked} The page protection of a locked page was changed to &apos;No Access&apos; and the page was unlocked from memory and from the process. (code=0x40000017).
        /// </summary>
        internal static string STATUS_WAS_UNLOCKED {
            get {
                return ResourceManager.GetString("STATUS_WAS_UNLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection or events for the WMI GUID is already disabled. (code=0xC0000302).
        /// </summary>
        internal static string STATUS_WMI_ALREADY_DISABLED {
            get {
                return ResourceManager.GetString("STATUS_WMI_ALREADY_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection or events for the WMI GUID is already enabled. (code=0xC0000303).
        /// </summary>
        internal static string STATUS_WMI_ALREADY_ENABLED {
            get {
                return ResourceManager.GetString("STATUS_WMI_ALREADY_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WMI GUID is no longer available. (code=0xC0000301).
        /// </summary>
        internal static string STATUS_WMI_GUID_DISCONNECTED {
            get {
                return ResourceManager.GetString("STATUS_WMI_GUID_DISCONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The GUID passed was not recognized as valid by a WMI data provider. (code=0xC0000295).
        /// </summary>
        internal static string STATUS_WMI_GUID_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_WMI_GUID_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance name passed was not recognized as valid by a WMI data provider. (code=0xC0000296).
        /// </summary>
        internal static string STATUS_WMI_INSTANCE_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_WMI_INSTANCE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data item ID passed was not recognized as valid by a WMI data provider. (code=0xC0000297).
        /// </summary>
        internal static string STATUS_WMI_ITEMID_NOT_FOUND {
            get {
                return ResourceManager.GetString("STATUS_WMI_ITEMID_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WMI operation is not supported by the data block or method. (code=0xC00002DD).
        /// </summary>
        internal static string STATUS_WMI_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("STATUS_WMI_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WMI data item or data block is read-only. (code=0xC00002C6).
        /// </summary>
        internal static string STATUS_WMI_READ_ONLY {
            get {
                return ResourceManager.GetString("STATUS_WMI_READ_ONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WMI data item or data block could not be changed. (code=0xC00002C7).
        /// </summary>
        internal static string STATUS_WMI_SET_FAILURE {
            get {
                return ResourceManager.GetString("STATUS_WMI_SET_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WMI request could not be completed and should be retried. (code=0xC0000298).
        /// </summary>
        internal static string STATUS_WMI_TRY_AGAIN {
            get {
                return ResourceManager.GetString("STATUS_WMI_TRY_AGAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Working Set Range Error} An attempt was made to set the working set minimum or maximum to values that are outside the allowable range. (code=0x40000002).
        /// </summary>
        internal static string STATUS_WORKING_SET_LIMIT_RANGE {
            get {
                return ResourceManager.GetString("STATUS_WORKING_SET_LIMIT_RANGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The working set is not big enough to allow the requested pages to be locked. (code=0xC00000A1).
        /// </summary>
        internal static string STATUS_WORKING_SET_QUOTA {
            get {
                return ResourceManager.GetString("STATUS_WORKING_SET_QUOTA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WOW Assertion Error. (code=0xC0009898).
        /// </summary>
        internal static string STATUS_WOW_ASSERTION {
            get {
                return ResourceManager.GetString("STATUS_WOW_ASSERTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This indicates that the caller made the connection request in the wrong routing compartment. (code=0xC000A085).
        /// </summary>
        internal static string STATUS_WRONG_COMPARTMENT {
            get {
                return ResourceManager.GetString("STATUS_WRONG_COMPARTMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied credential handle does not match the credential that is associated with the security context. (code=0xC00002F2).
        /// </summary>
        internal static string STATUS_WRONG_CREDENTIAL_HANDLE {
            get {
                return ResourceManager.GetString("STATUS_WRONG_CREDENTIAL_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file was encrypted with a different encryption driver than is currently loaded. (code=0xC000028F).
        /// </summary>
        internal static string STATUS_WRONG_EFS {
            get {
                return ResourceManager.GetString("STATUS_WRONG_EFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When trying to update a password, this return status indicates that the value provided as the current password is not correct. (code=0xC000006A).
        /// </summary>
        internal static string STATUS_WRONG_PASSWORD {
            get {
                return ResourceManager.GetString("STATUS_WRONG_PASSWORD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Incorrect Password to LAN Manager Server} You specified an incorrect password to a LAN Manager 2.x or MS-NET server. (code=0xC0000149).
        /// </summary>
        internal static string STATUS_WRONG_PASSWORD_CORE {
            get {
                return ResourceManager.GetString("STATUS_WRONG_PASSWORD_CORE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Wrong Volume} The wrong volume is in the drive. Insert volume %hs into drive %hs. (code=0xC0000012).
        /// </summary>
        internal static string STATUS_WRONG_VOLUME {
            get {
                return ResourceManager.GetString("STATUS_WRONG_VOLUME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception status code that is used by the Win32 x86 emulation subsystem. (code=0x4000001F).
        /// </summary>
        internal static string STATUS_WX86_BREAKPOINT {
            get {
                return ResourceManager.GetString("STATUS_WX86_BREAKPOINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception status code that is used by the Win32 x86 emulation subsystem. (code=0x4000001D).
        /// </summary>
        internal static string STATUS_WX86_CONTINUE {
            get {
                return ResourceManager.GetString("STATUS_WX86_CONTINUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception status code that is used by the Win32 x86 emulation subsystem. (code=0x40000028).
        /// </summary>
        internal static string STATUS_WX86_CREATEWX86TIB {
            get {
                return ResourceManager.GetString("STATUS_WX86_CREATEWX86TIB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception status code that is used by the Win32 x86 emulation subsystem. (code=0x40000022).
        /// </summary>
        internal static string STATUS_WX86_EXCEPTION_CHAIN {
            get {
                return ResourceManager.GetString("STATUS_WX86_EXCEPTION_CHAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception status code that is used by the Win32 x86 emulation subsystem. (code=0x40000020).
        /// </summary>
        internal static string STATUS_WX86_EXCEPTION_CONTINUE {
            get {
                return ResourceManager.GetString("STATUS_WX86_EXCEPTION_CONTINUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception status code that is used by the Win32 x86 emulation subsystem. (code=0x40000021).
        /// </summary>
        internal static string STATUS_WX86_EXCEPTION_LASTCHANCE {
            get {
                return ResourceManager.GetString("STATUS_WX86_EXCEPTION_LASTCHANCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Win32 x86 emulation subsystem floating-point stack check. (code=0xC0000270).
        /// </summary>
        internal static string STATUS_WX86_FLOAT_STACK_CHECK {
            get {
                return ResourceManager.GetString("STATUS_WX86_FLOAT_STACK_CHECK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error occurred in the Win32 x86 emulation subsystem. (code=0xC000026F).
        /// </summary>
        internal static string STATUS_WX86_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("STATUS_WX86_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception status code that is used by the Win32 x86 emulation subsystem. (code=0x4000001E).
        /// </summary>
        internal static string STATUS_WX86_SINGLE_STEP {
            get {
                return ResourceManager.GetString("STATUS_WX86_SINGLE_STEP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception status code that is used by the Win32 x86 emulation subsystem. (code=0x4000001C).
        /// </summary>
        internal static string STATUS_WX86_UNSIMULATE {
            get {
                return ResourceManager.GetString("STATUS_WX86_UNSIMULATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The character encoding in the XML declaration did not match the encoding used in the document. (code=0xC0150021).
        /// </summary>
        internal static string STATUS_XML_ENCODING_MISMATCH {
            get {
                return ResourceManager.GetString("STATUS_XML_ENCODING_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows was unable to parse the requested XML data. (code=0xC000A083).
        /// </summary>
        internal static string STATUS_XML_PARSE_ERROR {
            get {
                return ResourceManager.GetString("STATUS_XML_PARSE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error was encountered while processing an XML digital signature. (code=0xC000A084).
        /// </summary>
        internal static string STATUS_XMLDSIG_ERROR {
            get {
                return ResourceManager.GetString("STATUS_XMLDSIG_ERROR", resourceCulture);
            }
        }
    }
}
