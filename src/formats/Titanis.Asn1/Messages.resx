<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Asn1DerDecoder_BadOidBytes" xml:space="preserve">
    <value>The bytes are not a properly encoded OID.</value>
  </data>
  <data name="Asn1DerDecoder_ConstructedNotPermitted" xml:space="preserve">
    <value>The contents are marked as constructed, but this is not permitted.</value>
  </data>
  <data name="Asn1DerDecoder_InnerLengthOverflow" xml:space="preserve">
    <value>The length of a TLV overruns the length of the TLV containing it.</value>
  </data>
  <data name="Asn1DerDecoder_InvalidDecimalDigit" xml:space="preserve">
    <value>The data contains an invalid decimal digit.</value>
  </data>
  <data name="Asn1DerDecoder_InvalidIndefiniteLength" xml:space="preserve">
    <value />
  </data>
  <data name="Asn1DerDecoder_InvalidUtf8Data" xml:space="preserve">
    <value>The underlying data is not a valid UTF-8 string.</value>
  </data>
  <data name="Asn1DerDecoder_LengthOverflow" xml:space="preserve">
    <value>The length of the TLV exceeds what the implementation can handle.</value>
  </data>
  <data name="Asn1DerDecoder_NullConstructed" xml:space="preserve">
    <value>The NULL tuple is marked as constructed, which is not allowed.</value>
  </data>
  <data name="Asn1DerDecoder_NullHasValue" xml:space="preserve">
    <value>The NULL tuple has value octets, which is not allowed.</value>
  </data>
  <data name="Asn1DerDecoder_TagOverflow" xml:space="preserve">
    <value>The DER encoder encountered an overflow while readinga tag.  The decoder only supports tags up to 32 bits in size.</value>
  </data>
  <data name="Asn1DerDecoder_Utf8CharOverflow" xml:space="preserve">
    <value>The encoded UTF-8 value is too large for the Char data type.</value>
  </data>
  <data name="Asn1_IncompleteOid" xml:space="preserve">
    <value>The OID encoding ended with an incomplete identifier (high bit set).</value>
  </data>
  <data name="Asn1_IntegerOverflow" xml:space="preserve">
    <value>The ASN.1 integer read from the stream does not fit into the data type.</value>
  </data>
  <data name="Asn1_InvalidCharData" xml:space="preserve">
    <value>The ASN.1 data did not contain a single char as expected.</value>
  </data>
  <data name="Asn1_InvalidData" xml:space="preserve">
    <value>The ASN.1 data is invalid.</value>
  </data>
  <data name="Asn1_InvalidDateTimeData" xml:space="preserve">
    <value>The ASN.1 data did not contain a valid date/time</value>
  </data>
  <data name="Asn1_InvalidStringType" xml:space="preserve">
    <value>The ASN.1 field has an invalid string type.</value>
  </data>
  <data name="Asn1_MemberNameInvalid" xml:space="preserve">
    <value>The member name '{0}' is not valid.  A member name must begin with a lowercase letter and contain only letters, numbers, and hyphens.</value>
  </data>
  <data name="Asn1_MissingDefaultConstructor" xml:space="preserve">
    <value>The type '{0}' does not have a publicly-accessible default constructor.  To be used with ASN.1 serialization, this is required.</value>
  </data>
  <data name="Asn1_ModuleNameInvalid1" xml:space="preserve">
    <value>The module name '{0}' is not valid.  A module name must begin with a capital letter and contain only letters, numbers, and hyphens.</value>
  </data>
  <data name="Asn1_TypeAlreadyAttachedToModule" xml:space="preserve">
    <value>The Asn1Type has already been attached to a module.</value>
  </data>
  <data name="Asn1_TypeNameInvalid" xml:space="preserve">
    <value>The type name '{0}' is not valid.  A type name must begin with a capital letter and contain only letters, numbers, and hyphens.</value>
  </data>
  <data name="Asn1_UnexpectedTag" xml:space="preserve">
    <value>The ASN.1 reader expected tag 0x{0:X2} but encountered tag 0x{1:X2}.</value>
  </data>
  <data name="Asn1_ValueNameInvalid" xml:space="preserve">
    <value>The value name '{0}' is not valid.  A value name must begin with a lowercase letter and contain only letters, numbers, and hyphens.</value>
  </data>
  <data name="AsnDerDecoder_IndefLengthPrimitive" xml:space="preserve">
    <value>The TLV is encoded with a primitive encoding and indefinite length, which is not allowed.</value>
  </data>
</root>