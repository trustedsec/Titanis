//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Titanis.Smb2.Cli {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Messages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Messages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Titanis.Smb2.Cli.Messages", typeof(Messages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The connection parameters affect the initial transport connection and negotiation.  The server name component of the UncPath is used for application-layer negotiation with the server.  It is also used to establish the transport-layer connection unless otherwise specified with -HostAddress , which may be a list of one or more host names or IP addresses.  If -HostAddress specifies a host name or is omitted, {0} uses local system resolution such as the hosts flie or DNS.  In this case, use -UseTcp4Only or -Use [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Smb2Client_common_details {
            get {
                return ResourceManager.GetString("Smb2Client_common_details", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;UncPath&gt; parameter specifies the target of the command using the format \\&lt;server&gt;[:&lt;port&gt;]\&lt;share&gt;[\&lt;path&gt;] where &lt;port&gt; is an integer specifying the port to connect to.  If -HostAddress is specified, {0} resolves it either as an IP address (IPv4 or IPv6) or a DNS name.  If -HostAddress is not specified, &lt;server&gt; is resolved.  In either case, the resulting IP addresses may be filtered by address family using -4 or -6.  In either case, &lt;server&gt; is used to refer to the server within the SMB2 protocol.
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Smb2Client_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clients generally use this functionality to establish multiple channels..
        /// </summary>
        internal static string Smb2Client_enumnics_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_enumnics_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use -OpenBy to filter the results by the name of the user that has the file open.  The filtering is performed by the server.  The user name should be only the name of the user without the domain.  Including the domain will generate a warning and likely cause the all results to be filtered out.
        ///
        ///Use -BasePath to specify the path to filter by.  The filtering is performed by the server, which checks whether the path of each open file starts with the base path.  This must be an absolute path to succeed.  For  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Smb2Client_enumopenfiles_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_enumopenfiles_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use -ClientComputer and -ClientUserName to filter the results.  The filtering is processed on the server.  The protocol requires the computer name to begin with \\, even for IP addresses.  However, if you neglect to do this, {0} prepends \\ to the name you provide.  The user name provided to -ClientUserName should not contain a domain.  If it does, you&apos;ll receive a warning, but the value will still be passed to the server..
        /// </summary>
        internal static string Smb2Client_enumsessions_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_enumsessions_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string Smb2Client_enumsnapshots_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_enumsnapshots_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string Smb2Client_enumstreams_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_enumstreams_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;UncPath&gt; parameter specifies the source file or directory to get via SMB.  The &lt;UncPath&gt; may also include a wildcard pattern (with * or ?).
        ///
        ///When copying a file, &lt;DestinationFileName&gt; is optional.  If &lt;DestinationFileName&gt; is specified, {0} fetches the file and writes it to the destination file.  If no destination file is specified, {0} writes the file to the console.
        ///
        ///When copying a directory, &lt;DestinationFileName&gt; is required and must indicate a directory that already exists or is to be created.  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Smb2Client_get_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_get_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} sends a request to the SMB server for a directory listing.  If &lt;UncPath&gt; is a directory, the contents of the directory are printed.  If &lt;UncPath&gt; is a file, the directory information for that file is printed.  If &lt;UncPath&gt; end with a wildcard pattern, only files matching the pattern are printed.  
        ///You may specify which fields to retrieve and print with the -Fields parameter.  If any of the selected fields are not contained in the directory listing, an additional QUERY_INFO request is sent for each file [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Smb2Client_ls_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_ls_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default, parent directories are not created.  If the directory already exists, the server returns STATUS_OBJECT_NAME_COLLISION.  {0} only supports creating a single level directory at a time.  That is, if you try to create \\SERVER\Share\Dir1\Subdir2\Subdir3, then \\SERVER\Share\Dir1\Subdir2 must exist or the server returns STATUS_OBJECT_PATH_NOT_FOUND.
        ///
        ///If you specify -Parents, {0} attempts to create the directory with the full path, as above.  If the server returns STATUS_OBJECT_PATH_NOT_FOUND, it th [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Smb2Client_mkdir_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_mkdir_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default, &lt;TargetPath&gt; is interpreted as a full path, regardless of the form.  Use -Relative to specify a relative link.  For an absolute path to function properly, the actual link path must begin with `\??\`. If you don&apos;t specify this, it is added for you without a warning.
        ///
        ///If an object already exists &lt;UncPath&gt;, it must be of the correct type.  That is, it must be a file for a file link or a directory to a directory link.  If it does not exist, it is created.
        ///
        ///A symlink contains two components: the  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Smb2Client_mklink_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_mklink_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TargetPath may be either a volume or directory.  For volumes, the target path should start with \??\ and end with a trailing backslash.  To mount a directory (a.k.a. junction), the target path should specify a full path starting with X:\ where X is the drive letter.  {0} checks the path and issues a warning if the path doesn&apos;t look quite right, but this does not generate an error and will pass the path unaltered to the server.
        ///
        ///A mount point contains two components: the substitution path and the print [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Smb2Client_mount_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_mount_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;UncPath&gt; parameter specifies the target file to write to via SMB.  If &lt;SourceFileName&gt; is specified, {0} opens the file and writes it to the destination file on the server.  If no source file is specified, {0} accepts input from the console.
        ///
        ///When copying the file, {0} fetches the file one chunk at a time.  The default chunk size is 32,768 bytes, which loosely resembles using the COPY command on a command prompt.  Use -ChunkSize to override the chunk size.
        ///
        ///When specifying -UseBackupSemantics the s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Smb2Client_put_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_put_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string Smb2Client_rm_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_rm_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string Smb2Client_rmdir_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_rmdir_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the file specified at the UNC path does not exist it will be created.
        ///If the file specified at the UNC path does exist the directory entry for the file is updated.
        ///
        ///Any -*Timestamp arguments will override timestamps taken from -TimestampsFrom.
        ///Only timestamps provided with a -*Timestamp argument or those taken from -TimestampsFrom are used.  No default values are provided and last accessed time is not updated automatically when this tool is used.
        ///
        ///The letters available for use in Attributes are as  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Smb2Client_touch_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_touch_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} removes the mount point information from &lt;UncPath&gt;.  Although &lt;UncPath&gt; should be a directory, it doesn&apos;t have to be; therefore {0} may be used to remove mount point info from a file as well, should the need arise.
        ///
        ///By default, the directory specified to by &lt;UncPath&gt; is left intact.  Specify -RemoveDirectory to remove it.  Specifically, this sets the DeleteOnClose flag on the object, which may or may not succeed..
        /// </summary>
        internal static string Smb2Client_umount_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_umount_Detailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use -Recursive to watch for changes to the entire subtree.  Otherwise, only objects within &lt;UncPath&gt; are reported.  Note that changing an object within a subdirectory changes the subdirectory, so the subdirectory will be reported ever if -Recursive is not specified.
        ///
        ///When requesting change notifications, {0} must specify a maximum size for the output buffer.  The default is 2048 to reflect what Windows Explorer uses.  This is not sufficient for all cases.  Use -BufferSize to change the maximum size.
        ///
        ///If [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Smb2Client_watch_Detailed {
            get {
                return ResourceManager.GetString("Smb2Client_watch_Detailed", resourceCulture);
            }
        }
    }
}
