using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace Titanis.Crypto.Test
{
	[TestClass]
	public class AesCcmTest
	{
		private void RunTest(
			byte[] key,
			ReadOnlySpan<byte> nonce,
			ReadOnlySpan<byte> plaintext,
			int headerLength,
			byte[] expectedCipher,
			int authSize = 8)
		{
			RunTest(
				key,
				nonce,
				plaintext.Slice(0, headerLength),
				plaintext.Slice(headerLength),
				expectedCipher,
				authSize);
		}
		private void RunTest(
			byte[] key,
			ReadOnlySpan<byte> nonce,
			ReadOnlySpan<byte> header,
			ReadOnlySpan<byte> plaintext,
			byte[] expectedCipher,
			int authSize)
		{
			byte[] ciphertext = new byte[plaintext.Length + authSize];
			AesCcm.Encrypt(
				key,
				authSize,
				2,
				nonce,
				plaintext,
				header,
				ciphertext
				);

			CollectionAssert.AreEqual(expectedCipher, ciphertext);

			byte[] decrypted = new byte[plaintext.Length];
			AesCcm.Decrypt(
				key,
				authSize,
				2,
				nonce,
				ciphertext,
				header,
				decrypted
				);

			CollectionAssert.AreEqual(plaintext.ToArray(), decrypted);
		}

		[TestMethod]
		public void TestVector1()
		{
			/*
   =============== Packet Vector #1 ==================
   AES Key =  C0 C1 C2 C3  C4 C5 C6 C7  C8 C9 CA CB  CC CD CE CF
   Nonce =    00 00 00 03  02 01 00 A0  A1 A2 A3 A4  A5
   Total packet length = 31. [Input with 8 cleartext header octets]
              00 01 02 03  04 05 06 07  08 09 0A 0B  0C 0D 0E 0F
              10 11 12 13  14 15 16 17  18 19 1A 1B  1C 1D 1E
   CBC IV in: 59 00 00 00  03 02 01 00  A0 A1 A2 A3  A4 A5 00 17
   CBC IV out:EB 9D 55 47  73 09 55 AB  23 1E 0A 2D  FE 4B 90 D6
   After xor: EB 95 55 46  71 0A 51 AE  25 19 0A 2D  FE 4B 90 D6   [hdr]
   After AES: CD B6 41 1E  3C DC 9B 4F  5D 92 58 B6  9E E7 F0 91
   After xor: C5 BF 4B 15  30 D1 95 40  4D 83 4A A5  8A F2 E6 86   [msg]
   After AES: 9C 38 40 5E  A0 3C 1B C9  04 B5 8B 40  C7 6C A2 EB
   After xor: 84 21 5A 45  BC 21 05 C9  04 B5 8B 40  C7 6C A2 EB   [msg]
   After AES: 2D C6 97 E4  11 CA 83 A8  60 C2 C4 06  CC AA 54 2F
   CBC-MAC  : 2D C6 97 E4  11 CA 83 A8
   CTR Start: 01 00 00 00  03 02 01 00  A0 A1 A2 A3  A4 A5 00 01
   CTR[0001]: 50 85 9D 91  6D CB 6D DD  E0 77 C2 D1  D4 EC 9F 97
   CTR[0002]: 75 46 71 7A  C6 DE 9A FF  64 0C 9C 06  DE 6D 0D 8F
   CTR[MAC ]: 3A 2E 46 C8  EC 33 A5 48
   Total packet length = 39. [Authenticated and Encrypted Output]
              00 01 02 03  04 05 06 07  58 8C 97 9A  61 C6 63 D2
              F0 66 D0 C2  C0 F9 89 80  6D 5F 6B 61  DA C3 84 17
              E8 D1 2C FD  F9 26 E0
			*/

			byte[] key = new byte[]
			{
				0xC0, 0xC1, 0xC2, 0xC3,  0xC4, 0xC5, 0xC6, 0xC7,  0xC8, 0xC9, 0xCA, 0xCB,  0xCC, 0xCD, 0xCE, 0xCF
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x00, 0x00, 0x03,  0x02, 0x01, 0x00, 0xA0,  0xA1, 0xA2, 0xA3, 0xA4,  0xA5,
			};
			byte[] plaintext = new byte[]
			{
				0x00, 0x01, 0x02, 0x03,  0x04, 0x05, 0x06, 0x07,  0x08, 0x09, 0x0A, 0x0B,  0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13,  0x14, 0x15, 0x16, 0x17,  0x18, 0x19, 0x1A, 0x1B,  0x1C, 0x1D, 0x1E,
			};
			byte[] expectedCipher = new byte[]
			{
				0x58, 0x8C, 0x97, 0x9A,  0x61, 0xC6, 0x63, 0xD2,
				0xF0, 0x66, 0xD0, 0xC2,  0xC0, 0xF9, 0x89, 0x80,  0x6D, 0x5F, 0x6B, 0x61,  0xDA, 0xC3, 0x84, 0x17,
				0xE8, 0xD1, 0x2C, 0xFD,  0xF9, 0x26, 0xE0,
			};

			RunTest(key, nonce, plaintext, 8, expectedCipher);
		}

		[TestMethod]
		public void TestVector2()
		{
			byte[] key = new byte[]
			{
				0xC0, 0xC1, 0xC2, 0xC3,  0xC4, 0xC5, 0xC6, 0xC7,  0xC8, 0xC9, 0xCA, 0xCB,  0xCC, 0xCD, 0xCE, 0xCF
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x00, 0x00, 0x04,  0x03, 0x02, 0x01, 0xA0,  0xA1, 0xA2, 0xA3, 0xA4,  0xA5,
			};
			byte[] plaintext = new byte[]
			{
				0x00, 0x01, 0x02, 0x03,  0x04, 0x05, 0x06, 0x07,  0x08, 0x09, 0x0A, 0x0B,  0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13,  0x14, 0x15, 0x16, 0x17,  0x18, 0x19, 0x1A, 0x1B,  0x1C, 0x1D, 0x1E, 0x1F
			};
			byte[] expectedCipher = new byte[]
			{
				0x72, 0xC9, 0x1A, 0x36,  0xE1, 0x35, 0xF8, 0xCF,
				0x29, 0x1C, 0xA8, 0x94,  0x08, 0x5C, 0x87, 0xE3,  0xCC, 0x15, 0xC4, 0x39,  0xC9, 0xE4, 0x3A, 0x3B,
				0xA0, 0x91, 0xD5, 0x6E,  0x10, 0x40, 0x09, 0x16,
			};

			RunTest(key, nonce, plaintext, 8, expectedCipher);
		}

		[TestMethod]
		public void TestVector3()
		{
			byte[] key = new byte[]
			{
				0xC0, 0xC1, 0xC2, 0xC3,  0xC4, 0xC5, 0xC6, 0xC7,  0xC8, 0xC9, 0xCA, 0xCB,  0xCC, 0xCD, 0xCE, 0xCF
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x00, 0x00, 0x05,  0x04, 0x03, 0x02, 0xA0,  0xA1, 0xA2, 0xA3, 0xA4,  0xA5,
			};
			byte[] plaintext = new byte[]
			{
				0x00, 0x01, 0x02, 0x03,  0x04, 0x05, 0x06, 0x07,  0x08, 0x09, 0x0A, 0x0B,  0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13,  0x14, 0x15, 0x16, 0x17,  0x18, 0x19, 0x1A, 0x1B,  0x1C, 0x1D, 0x1E, 0x1F,
				0x20,
			};
			byte[] expectedCipher = new byte[]
			{
				0x51, 0xB1, 0xE5, 0xF4,  0x4A, 0x19, 0x7D, 0x1D,
				0xA4, 0x6B, 0x0F, 0x8E,  0x2D, 0x28, 0x2A, 0xE8,  0x71, 0xE8, 0x38, 0xBB,  0x64, 0xDA, 0x85, 0x96,
				0x57, 0x4A, 0xDA, 0xA7,  0x6F, 0xBD, 0x9F, 0xB0,  0xC5,
			};

			RunTest(key, nonce, plaintext, 8, expectedCipher);
		}

		[TestMethod]
		public void TestVector4()
		{
			byte[] key = new byte[]
			{
				0xC0, 0xC1, 0xC2, 0xC3,  0xC4, 0xC5, 0xC6, 0xC7,  0xC8, 0xC9, 0xCA, 0xCB,  0xCC, 0xCD, 0xCE, 0xCF
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x00, 0x00, 0x06,  0x05, 0x04, 0x03, 0xA0,  0xA1, 0xA2, 0xA3, 0xA4,  0xA5,
			};
			byte[] plaintext = new byte[]
			{
				0x00, 0x01, 0x02, 0x03,  0x04, 0x05, 0x06, 0x07,  0x08, 0x09, 0x0A, 0x0B,
				0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13,  0x14, 0x15, 0x16, 0x17,  0x18, 0x19, 0x1A, 0x1B,  0x1C, 0x1D, 0x1E,
			};
			byte[] expectedCipher = new byte[]
			{
				0xA2, 0x8C, 0x68, 0x65,
				0x93, 0x9A, 0x9A, 0x79,  0xFA, 0xAA, 0x5C, 0x4C,  0x2A, 0x9D, 0x4A, 0x91,  0xCD, 0xAC, 0x8C, 0x96,
				0xC8, 0x61, 0xB9, 0xC9,  0xE6, 0x1E, 0xF1,
			};

			RunTest(key, nonce, plaintext, 12, expectedCipher);
		}

		[TestMethod]
		public void TestVector5()
		{
			byte[] key = new byte[]
			{
				0xC0, 0xC1, 0xC2, 0xC3,  0xC4, 0xC5, 0xC6, 0xC7,  0xC8, 0xC9, 0xCA, 0xCB,  0xCC, 0xCD, 0xCE, 0xCF
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x00, 0x00, 0x07,  0x06, 0x05, 0x04, 0xA0,  0xA1, 0xA2, 0xA3, 0xA4,  0xA5,
			};
			byte[] plaintext = new byte[]
			{
				0x00, 0x01, 0x02, 0x03,  0x04, 0x05, 0x06, 0x07,  0x08, 0x09, 0x0A, 0x0B,
				0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13,  0x14, 0x15, 0x16, 0x17,  0x18, 0x19, 0x1A, 0x1B,  0x1C, 0x1D, 0x1E, 0x1F
			};
			byte[] expectedCipher = new byte[]
			{
				0xDC, 0xF1, 0xFB, 0x7B,
				0x5D, 0x9E, 0x23, 0xFB,  0x9D, 0x4E, 0x13, 0x12,  0x53, 0x65, 0x8A, 0xD8,  0x6E, 0xBD, 0xCA, 0x3E,
				0x51, 0xE8, 0x3F, 0x07,  0x7D, 0x9C, 0x2D, 0x93,
			};

			RunTest(key, nonce, plaintext, 12, expectedCipher);
		}

		[TestMethod]
		public void TestVector6()
		{
			byte[] key = new byte[]
			{
				0xC0, 0xC1, 0xC2, 0xC3,  0xC4, 0xC5, 0xC6, 0xC7,  0xC8, 0xC9, 0xCA, 0xCB,  0xCC, 0xCD, 0xCE, 0xCF
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x00, 0x00, 0x08,  0x07, 0x06, 0x05, 0xA0,  0xA1, 0xA2, 0xA3, 0xA4,  0xA5,
			};
			byte[] plaintext = new byte[]
			{
				0x00, 0x01, 0x02, 0x03,  0x04, 0x05, 0x06, 0x07,  0x08, 0x09, 0x0A, 0x0B,
				0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13,  0x14, 0x15, 0x16, 0x17,  0x18, 0x19, 0x1A, 0x1B,  0x1C, 0x1D, 0x1E, 0x1F,
				0x20,
			};
			byte[] expectedCipher = new byte[]
			{
				0x6F, 0xC1, 0xB0, 0x11,
				0xF0, 0x06, 0x56, 0x8B,  0x51, 0x71, 0xA4, 0x2D,  0x95, 0x3D, 0x46, 0x9B,  0x25, 0x70, 0xA4, 0xBD,
				0x87, 0x40, 0x5A, 0x04,  0x43, 0xAC, 0x91, 0xCB,  0x94,
			};

			RunTest(key, nonce, plaintext, 12, expectedCipher);
		}

		[TestMethod]
		public void TestVector7()
		{
			byte[] key = new byte[]
			{
				0xC0, 0xC1, 0xC2, 0xC3,  0xC4, 0xC5, 0xC6, 0xC7,  0xC8, 0xC9, 0xCA, 0xCB,  0xCC, 0xCD, 0xCE, 0xCF
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x00, 0x00, 0x09,  0x08, 0x07, 0x06, 0xA0,  0xA1, 0xA2, 0xA3, 0xA4,  0xA5,
			};
			byte[] plaintext = new byte[]
			{
				0x00, 0x01, 0x02, 0x03,  0x04, 0x05, 0x06, 0x07,  0x08, 0x09, 0x0A, 0x0B,
				0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13,  0x14, 0x15, 0x16, 0x17,  0x18, 0x19, 0x1A, 0x1B,  0x1C, 0x1D, 0x1E,
			};
			byte[] expectedCipher = new byte[]
			{
				0x01, 0x35, 0xD1, 0xB2,  0xC9, 0x5F, 0x41, 0xD5,
				0xD1, 0xD4, 0xFE, 0xC1,  0x85, 0xD1, 0x66, 0xB8,  0x09, 0x4E, 0x99, 0x9D,  0xFE, 0xD9, 0x6C, 0x04,
				0x8C, 0x56, 0x60, 0x2C,  0x97, 0xAC, 0xBB, 0x74,  0x90,
			};

			RunTest(key, nonce, plaintext, 8, expectedCipher, 10);
		}

		[TestMethod]
		public void TestVector8()
		{
			byte[] key = new byte[]
			{
				0xC0, 0xC1, 0xC2, 0xC3,  0xC4, 0xC5, 0xC6, 0xC7,  0xC8, 0xC9, 0xCA, 0xCB,  0xCC, 0xCD, 0xCE, 0xCF
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x00, 0x00, 0x0A,  0x09, 0x08, 0x07, 0xA0,  0xA1, 0xA2, 0xA3, 0xA4,  0xA5,
			};
			byte[] plaintext = new byte[]
			{
				0x00, 0x01, 0x02, 0x03,  0x04, 0x05, 0x06, 0x07,  0x08, 0x09, 0x0A, 0x0B,
				0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13,  0x14, 0x15, 0x16, 0x17,  0x18, 0x19, 0x1A, 0x1B,  0x1C, 0x1D, 0x1E, 0x1F
			};
			byte[] expectedCipher = new byte[]
			{
				0x7B, 0x75, 0x39, 0x9A,  0xC0, 0x83, 0x1D, 0xD2,
				0xF0, 0xBB, 0xD7, 0x58,  0x79, 0xA2, 0xFD, 0x8F,  0x6C, 0xAE, 0x6B, 0x6C,  0xD9, 0xB7, 0xDB, 0x24,
				0xC1, 0x7B, 0x44, 0x33,  0xF4, 0x34, 0x96, 0x3F,  0x34, 0xB4,
			};

			RunTest(key, nonce, plaintext, 8, expectedCipher, 10);
		}

		[TestMethod]
		public void TestVector9()
		{
			byte[] key = new byte[]
			{
				0xC0, 0xC1, 0xC2, 0xC3,  0xC4, 0xC5, 0xC6, 0xC7,  0xC8, 0xC9, 0xCA, 0xCB,  0xCC, 0xCD, 0xCE, 0xCF
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x00, 0x00, 0x0B, 0x0A,  0x09, 0x08, 0xA0,  0xA1, 0xA2, 0xA3, 0xA4,  0xA5,
			};
			byte[] plaintext = new byte[]
			{
				0x00, 0x01, 0x02, 0x03,  0x04, 0x05, 0x06, 0x07,  0x08, 0x09, 0x0A, 0x0B,
				0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13,  0x14, 0x15, 0x16, 0x17,  0x18, 0x19, 0x1A, 0x1B,  0x1C, 0x1D, 0x1E, 0x1F,
				0x20
			};
			byte[] expectedCipher = new byte[]
			{
				0x82, 0x53, 0x1A, 0x60,  0xCC, 0x24, 0x94, 0x5A,
				0x4B, 0x82, 0x79, 0x18,  0x1A, 0xB5, 0xC8, 0x4D,  0xF2, 0x1C, 0xE7, 0xF9,  0xB7, 0x3F, 0x42, 0xE1,
				0x97, 0xEA, 0x9C, 0x07,  0xE5, 0x6B, 0x5E, 0xB1,  0x7E, 0x5F, 0x4E,
			};

			RunTest(key, nonce, plaintext, 8, expectedCipher, 10);
		}

		[TestMethod]
		public void TestVector10()
		{
			byte[] key = new byte[]
			{
				0xC0, 0xC1, 0xC2, 0xC3,  0xC4, 0xC5, 0xC6, 0xC7,  0xC8, 0xC9, 0xCA, 0xCB,  0xCC, 0xCD, 0xCE, 0xCF
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x00, 0x00, 0x0C, 0x0B, 0x0A,  0x09, 0xA0,  0xA1, 0xA2, 0xA3, 0xA4,  0xA5,
			};
			byte[] plaintext = new byte[]
			{
				0x00, 0x01, 0x02, 0x03,  0x04, 0x05, 0x06, 0x07,  0x08, 0x09, 0x0A, 0x0B,
				0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13,  0x14, 0x15, 0x16, 0x17,  0x18, 0x19, 0x1A, 0x1B,  0x1C, 0x1D, 0x1E,
			};
			byte[] expectedCipher = new byte[]
			{
				0x07, 0x34, 0x25, 0x94,
				0x15, 0x77, 0x85, 0x15,  0x2B, 0x07, 0x40, 0x98,  0x33, 0x0A, 0xBB, 0x14,  0x1B, 0x94, 0x7B, 0x56,
				0x6A, 0xA9, 0x40, 0x6B,  0x4D, 0x99, 0x99, 0x88,  0xDD,
			};

			RunTest(key, nonce, plaintext, 12, expectedCipher, 10);
		}

		[TestMethod]
		public void TestVector11()
		{
			byte[] key = new byte[]
			{
				0xC0, 0xC1, 0xC2, 0xC3,  0xC4, 0xC5, 0xC6, 0xC7,  0xC8, 0xC9, 0xCA, 0xCB,  0xCC, 0xCD, 0xCE, 0xCF
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x00, 0x00, 0x0D, 0x0C, 0x0B, 0x0A,  0xA0,  0xA1, 0xA2, 0xA3, 0xA4,  0xA5,
			};
			byte[] plaintext = new byte[]
			{
				0x00, 0x01, 0x02, 0x03,  0x04, 0x05, 0x06, 0x07,  0x08, 0x09, 0x0A, 0x0B,
				0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13,  0x14, 0x15, 0x16, 0x17,  0x18, 0x19, 0x1A, 0x1B,  0x1C, 0x1D, 0x1E, 0x1F
			};
			byte[] expectedCipher = new byte[]
			{
				0x67, 0x6B, 0xB2, 0x03,
				0x80, 0xB0, 0xE3, 0x01,  0xE8, 0xAB, 0x79, 0x59,  0x0A, 0x39, 0x6D, 0xA7,  0x8B, 0x83, 0x49, 0x34,
				0xF5, 0x3A, 0xA2, 0xE9,  0x10, 0x7A, 0x8B, 0x6C,  0x02, 0x2C,
			};

			RunTest(key, nonce, plaintext, 12, expectedCipher, 10);
		}

		[TestMethod]
		public void TestVector12()
		{
			byte[] key = new byte[]
			{
				0xC0, 0xC1, 0xC2, 0xC3,  0xC4, 0xC5, 0xC6, 0xC7,  0xC8, 0xC9, 0xCA, 0xCB,  0xCC, 0xCD, 0xCE, 0xCF
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x00, 0x00, 0x0E, 0x0D, 0x0C, 0x0B, 0xA0,  0xA1, 0xA2, 0xA3, 0xA4,  0xA5,
			};
			byte[] plaintext = new byte[]
			{
				0x00, 0x01, 0x02, 0x03,  0x04, 0x05, 0x06, 0x07,  0x08, 0x09, 0x0A, 0x0B,
				0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13,  0x14, 0x15, 0x16, 0x17,  0x18, 0x19, 0x1A, 0x1B,  0x1C, 0x1D, 0x1E, 0x1F,
				0x20
			};
			byte[] expectedCipher = new byte[]
			{
				0xC0, 0xFF, 0xA0, 0xD6,
				0xF0, 0x5B, 0xDB, 0x67,  0xF2, 0x4D, 0x43, 0xA4,  0x33, 0x8D, 0x2A, 0xA4,  0xBE, 0xD7, 0xB2, 0x0E,
				0x43, 0xCD, 0x1A, 0xA3,  0x16, 0x62, 0xE7, 0xAD,  0x65, 0xD6, 0xDB,
			};

			RunTest(key, nonce, plaintext, 12, expectedCipher, 10);
		}

		[TestMethod]
		public void TestVector13()
		{
			byte[] key = new byte[]
			{
				0xD7, 0x82, 0x8D, 0x13,  0xB2, 0xB0, 0xBD, 0xC3,  0x25, 0xA7, 0x62, 0x36,  0xDF, 0x93, 0xCC, 0x6B,
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x41, 0x2b, 0x4e, 0xa9, 0xcd, 0xbe, 0x3c, 0x96, 0x96, 0x76, 0x6c, 0xfa,
			};
			byte[] plaintext = new byte[]
			{
				0x0B, 0xE1, 0xA8, 0x8B,  0xAC, 0xE0, 0x18, 0xB1,  0x08, 0xE8, 0xCF, 0x97,  0xD8, 0x20, 0xEA, 0x25,
				0x84, 0x60, 0xE9, 0x6A,  0xD9, 0xCF, 0x52, 0x89,  0x05, 0x4D, 0x89, 0x5C,  0xEA, 0xC4, 0x7C,
			};
			byte[] expectedCipher = new byte[]
			{
				0x4C, 0xB9, 0x7F, 0x86,  0xA2, 0xA4, 0x68, 0x9A,
				0x87, 0x79, 0x47, 0xAB,  0x80, 0x91, 0xEF, 0x53,  0x86, 0xA6, 0xFF, 0xBD,  0xD0, 0x80, 0xF8, 0xE7,
				0x8C, 0xF7, 0xCB, 0x0C,  0xDD, 0xD7, 0xB3,
			};

			RunTest(key, nonce, plaintext, 8, expectedCipher, 8);
		}

		[TestMethod]
		public void TestVector14()
		{
			byte[] key = new byte[]
			{
				0xD7, 0x82, 0x8D, 0x13,  0xB2, 0xB0, 0xBD, 0xC3,  0x25, 0xA7, 0x62, 0x36,  0xDF, 0x93, 0xCC, 0x6B,
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x33, 0x56, 0x8E,  0xF7, 0xB2, 0x63, 0x3C,  0x96, 0x96, 0x76, 0x6C,  0xFA,
			};
			byte[] plaintext = new byte[]
			{
				0x63, 0x01, 0x8F, 0x76,  0xDC, 0x8A, 0x1B, 0xCB,  0x90, 0x20, 0xEA, 0x6F,  0x91, 0xBD, 0xD8, 0x5A,
				0xFA, 0x00, 0x39, 0xBA,  0x4B, 0xAF, 0xF9, 0xBF,  0xB7, 0x9C, 0x70, 0x28,  0x94, 0x9C, 0xD0, 0xEC,
			};
			byte[] expectedCipher = new byte[]
			{
				0x4C, 0xCB, 0x1E, 0x7C,  0xA9, 0x81, 0xBE, 0xFA,
				0xA0, 0x72, 0x6C, 0x55,  0xD3, 0x78, 0x06, 0x12,  0x98, 0xC8, 0x5C, 0x92,  0x81, 0x4A, 0xBC, 0x33,
				0xC5, 0x2E, 0xE8, 0x1D,  0x7D, 0x77, 0xC0, 0x8A,
			};

			RunTest(key, nonce, plaintext, 8, expectedCipher, 8);
		}

		[TestMethod]
		public void TestVector15()
		{
			byte[] key = new byte[]
			{
				0xD7, 0x82, 0x8D, 0x13,  0xB2, 0xB0, 0xBD, 0xC3,  0x25, 0xA7, 0x62, 0x36,  0xDF, 0x93, 0xCC, 0x6B,
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x10, 0x3F, 0xE4,  0x13, 0x36, 0x71, 0x3C,  0x96, 0x96, 0x76, 0x6C,  0xFA,
			};
			byte[] plaintext = new byte[]
			{
				0xAA, 0x6C, 0xFA, 0x36,  0xCA, 0xE8, 0x6B, 0x40,  0xB9, 0x16, 0xE0, 0xEA,  0xCC, 0x1C, 0x00, 0xD7,
				0xDC, 0xEC, 0x68, 0xEC,  0x0B, 0x3B, 0xBB, 0x1A,  0x02, 0xDE, 0x8A, 0x2D,  0x1A, 0xA3, 0x46, 0x13,
				0x2E,
			};
			byte[] expectedCipher = new byte[]
			{
				0xB1, 0xD2, 0x3A, 0x22,  0x20, 0xDD, 0xC0, 0xAC,
				0x90, 0x0D, 0x9A, 0xA0,  0x3C, 0x61, 0xFC, 0xF4,  0xA5, 0x59, 0xA4, 0x41,  0x77, 0x67, 0x08, 0x97,
				0x08, 0xA7, 0x76, 0x79,  0x6E, 0xDB, 0x72, 0x35,  0x06,
			};

			RunTest(key, nonce, plaintext, 8, expectedCipher, 8);
		}

		[TestMethod]
		public void TestVector16()
		{
			byte[] key = new byte[]
			{
				0xD7, 0x82, 0x8D, 0x13,  0xB2, 0xB0, 0xBD, 0xC3,  0x25, 0xA7, 0x62, 0x36,  0xDF, 0x93, 0xCC, 0x6B,
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x76, 0x4C, 0x63,  0xB8, 0x05, 0x8E, 0x3C,  0x96, 0x96, 0x76, 0x6C,  0xFA,
			};
			byte[] plaintext = new byte[]
			{
				0xD0, 0xD0, 0x73, 0x5C,  0x53, 0x1E, 0x1B, 0xEC,  0xF0, 0x49, 0xC2, 0x44,  0x12, 0xDA, 0xAC, 0x56,
				0x30, 0xEF, 0xA5, 0x39,  0x6F, 0x77, 0x0C, 0xE1,  0xA6, 0x6B, 0x21, 0xF7,  0xB2, 0x10, 0x1C,
			};
			byte[] expectedCipher = new byte[]
			{
				0x14, 0xD2, 0x53, 0xC3,
				0x96, 0x7B, 0x70, 0x60,  0x9B, 0x7C, 0xBB, 0x7C,  0x49, 0x91, 0x60, 0x28,  0x32, 0x45, 0x26, 0x9A,
				0x6F, 0x49, 0x97, 0x5B,  0xCA, 0xDE, 0xAF,
			};

			RunTest(key, nonce, plaintext, 12, expectedCipher, 8);
		}

		[TestMethod]
		public void TestVector17()
		{
			byte[] key = new byte[]
			{
				0xD7, 0x82, 0x8D, 0x13,  0xB2, 0xB0, 0xBD, 0xC3,  0x25, 0xA7, 0x62, 0x36,  0xDF, 0x93, 0xCC, 0x6B,
			};
			byte[] nonce = new byte[]
			{
				0x00, 0xF8, 0xB6, 0x78,  0x09, 0x4E, 0x3B, 0x3C,  0x96, 0x96, 0x76, 0x6C,  0xFA,
			};
			byte[] plaintext = new byte[]
			{
				0x77, 0xB6, 0x0F, 0x01,  0x1C, 0x03, 0xE1, 0x52,  0x58, 0x99, 0xBC, 0xAE,  0xE8, 0x8B, 0x6A, 0x46,
				0xC7, 0x8D, 0x63, 0xE5,  0x2E, 0xB8, 0xC5, 0x46,  0xEF, 0xB5, 0xDE, 0x6F,  0x75, 0xE9, 0xCC, 0x0D,
			};
			byte[] expectedCipher = new byte[]
			{
				0x55, 0x45, 0xFF, 0x1A,
				0x08, 0x5E, 0xE2, 0xEF,  0xBF, 0x52, 0xB2, 0xE0,  0x4B, 0xEE, 0x1E, 0x23,  0x36, 0xC7, 0x3E, 0x3F,
				0x76, 0x2C, 0x0C, 0x77,  0x44, 0xFE, 0x7E, 0x3C,
			};

			RunTest(key, nonce, plaintext, 12, expectedCipher, 8);
		}

		[TestMethod]
		public void TestVector18()
		{
			byte[] key = new byte[]
			{
				0xD7, 0x82, 0x8D, 0x13,  0xB2, 0xB0, 0xBD, 0xC3,  0x25, 0xA7, 0x62, 0x36,  0xDF, 0x93, 0xCC, 0x6B,
			};
			byte[] nonce = new byte[]
			{
				0x00, 0xD5, 0x60, 0x91,  0x2D, 0x3F, 0x70, 0x3C,  0x96, 0x96, 0x76, 0x6C,  0xFA,
			};
			byte[] plaintext = new byte[]
			{
				0xCD, 0x90, 0x44, 0xD2,  0xB7, 0x1F, 0xDB, 0x81,  0x20, 0xEA, 0x60, 0xC0,  0x64, 0x35, 0xAC, 0xBA,
				0xFB, 0x11, 0xA8, 0x2E,  0x2F, 0x07, 0x1D, 0x7C,  0xA4, 0xA5, 0xEB, 0xD9,  0x3A, 0x80, 0x3B, 0xA8,
				0x7F,
			};
			byte[] expectedCipher = new byte[]
			{
				0x00, 0x97, 0x69, 0xEC,
				0xAB, 0xDF, 0x48, 0x62,  0x55, 0x94, 0xC5, 0x92,  0x51, 0xE6, 0x03, 0x57,  0x22, 0x67, 0x5E, 0x04,
				0xC8, 0x47, 0x09, 0x9E,  0x5A, 0xE0, 0x70, 0x45,  0x51,
			};

			RunTest(key, nonce, plaintext, 12, expectedCipher, 8);
		}

		[TestMethod]
		public void TestVector19()
		{
			byte[] key = new byte[]
			{
				0xD7, 0x82, 0x8D, 0x13,  0xB2, 0xB0, 0xBD, 0xC3,  0x25, 0xA7, 0x62, 0x36,  0xDF, 0x93, 0xCC, 0x6B,
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x42, 0xFF, 0xF8,  0xF1, 0x95, 0x1C, 0x3C,  0x96, 0x96, 0x76, 0x6C,  0xFA,
			};
			byte[] plaintext = new byte[]
			{
				0xD8, 0x5B, 0xC7, 0xE6,  0x9F, 0x94, 0x4F, 0xB8,  0x8A, 0x19, 0xB9, 0x50,  0xBC, 0xF7, 0x1A, 0x01,
				0x8E, 0x5E, 0x67, 0x01,  0xC9, 0x17, 0x87, 0x65,  0x98, 0x09, 0xD6, 0x7D,  0xBE, 0xDD, 0x18,
			};
			byte[] expectedCipher = new byte[]
			{
				0xBC, 0x21, 0x8D, 0xAA,  0x94, 0x74, 0x27, 0xB6,
				0xDB, 0x38, 0x6A, 0x99,  0xAC, 0x1A, 0xEF, 0x23,  0xAD, 0xE0, 0xB5, 0x29,  0x39, 0xCB, 0x6A, 0x63,
				0x7C, 0xF9, 0xBE, 0xC2,  0x40, 0x88, 0x97, 0xC6,  0xBA,
			};

			RunTest(key, nonce, plaintext, 8, expectedCipher, 10);
		}

		[TestMethod]
		public void TestVector20()
		{
			byte[] key = new byte[]
			{
				0xD7, 0x82, 0x8D, 0x13,  0xB2, 0xB0, 0xBD, 0xC3,  0x25, 0xA7, 0x62, 0x36,  0xDF, 0x93, 0xCC, 0x6B,
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x92, 0x0F, 0x40,  0xE5, 0x6C, 0xDC, 0x3C,  0x96, 0x96, 0x76, 0x6C,  0xFA,
			};
			byte[] plaintext = new byte[]
			{
				0x74, 0xA0, 0xEB, 0xC9,  0x06, 0x9F, 0x5B, 0x37,  0x17, 0x61, 0x43, 0x3C,  0x37, 0xC5, 0xA3, 0x5F,
				0xC1, 0xF3, 0x9F, 0x40,  0x63, 0x02, 0xEB, 0x90,  0x7C, 0x61, 0x63, 0xBE,  0x38, 0xC9, 0x84, 0x37,
			};
			byte[] expectedCipher = new byte[]
			{
				0x58, 0x10, 0xE6, 0xFD,  0x25, 0x87, 0x40, 0x22,
				0xE8, 0x03, 0x61, 0xA4,  0x78, 0xE3, 0xE9, 0xCF,  0x48, 0x4A, 0xB0, 0x4F,  0x44, 0x7E, 0xFF, 0xF6,
				0xF0, 0xA4, 0x77, 0xCC,  0x2F, 0xC9, 0xBF, 0x54,  0x89, 0x44,
			};

			RunTest(key, nonce, plaintext, 8, expectedCipher, 10);
		}

		[TestMethod]
		public void TestVector21()
		{
			byte[] key = new byte[]
			{
				0xD7, 0x82, 0x8D, 0x13,  0xB2, 0xB0, 0xBD, 0xC3,  0x25, 0xA7, 0x62, 0x36,  0xDF, 0x93, 0xCC, 0x6B,
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x27, 0xCA, 0x0C,  0x71, 0x20, 0xBC, 0x3C,  0x96, 0x96, 0x76, 0x6C,  0xFA,
			};
			byte[] plaintext = new byte[]
			{
				0x44, 0xA3, 0xAA, 0x3A,  0xAE, 0x64, 0x75, 0xCA,  0xA4, 0x34, 0xA8, 0xE5,  0x85, 0x00, 0xC6, 0xE4,
				0x15, 0x30, 0x53, 0x88,  0x62, 0xD6, 0x86, 0xEA,  0x9E, 0x81, 0x30, 0x1B,  0x5A, 0xE4, 0x22, 0x6B,
				0xFA
			};
			byte[] expectedCipher = new byte[]
			{
				0xF2, 0xBE, 0xED, 0x7B,  0xC5, 0x09, 0x8E, 0x83,
				0xFE, 0xB5, 0xB3, 0x16,  0x08, 0xF8, 0xE2, 0x9C,  0x38, 0x81, 0x9A, 0x89,  0xC8, 0xE7, 0x76, 0xF1,
				0x54, 0x4D, 0x41, 0x51,  0xA4, 0xED, 0x3A, 0x8B,  0x87, 0xB9, 0xCE,
			};

			RunTest(key, nonce, plaintext, 8, expectedCipher, 10);
		}

		[TestMethod]
		public void TestVector22()
		{
			byte[] key = new byte[]
			{
				0xD7, 0x82, 0x8D, 0x13,  0xB2, 0xB0, 0xBD, 0xC3,  0x25, 0xA7, 0x62, 0x36,  0xDF, 0x93, 0xCC, 0x6B,
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x5B, 0x8C, 0xCB,  0xCD, 0x9A, 0xF8, 0x3C,  0x96, 0x96, 0x76, 0x6C,  0xFA,
			};
			byte[] plaintext = new byte[]
			{
				0xEC, 0x46, 0xBB, 0x63,  0xB0, 0x25, 0x20, 0xC3,  0x3C, 0x49, 0xFD, 0x70,  0xB9, 0x6B, 0x49, 0xE2,
				0x1D, 0x62, 0x17, 0x41,  0x63, 0x28, 0x75, 0xDB,  0x7F, 0x6C, 0x92, 0x43,  0xD2, 0xD7, 0xC2,
			};
			byte[] expectedCipher = new byte[]
			{
				0x31, 0xD7, 0x50, 0xA0,
				0x9D, 0xA3, 0xED, 0x7F,  0xDD, 0xD4, 0x9A, 0x20,  0x32, 0xAA, 0xBF, 0x17,  0xEC, 0x8E, 0xBF, 0x7D,
				0x22, 0xC8, 0x08, 0x8C,  0x66, 0x6B, 0xE5, 0xC1,  0x97,
			};

			RunTest(key, nonce, plaintext, 12, expectedCipher, 10);
		}

		[TestMethod]
		public void TestVector23()
		{
			byte[] key = new byte[]
			{
				0xD7, 0x82, 0x8D, 0x13,  0xB2, 0xB0, 0xBD, 0xC3,  0x25, 0xA7, 0x62, 0x36,  0xDF, 0x93, 0xCC, 0x6B,
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x3E, 0xBE, 0x94,  0x04, 0x4B, 0x9A, 0x3C,  0x96, 0x96, 0x76, 0x6C,  0xFA,
			};
			byte[] plaintext = new byte[]
			{
				0x47, 0xA6, 0x5A, 0xC7,  0x8B, 0x3D, 0x59, 0x42,  0x27, 0xE8, 0x5E, 0x71,  0xE2, 0xFC, 0xFB, 0xB8,
				0x80, 0x44, 0x2C, 0x73,  0x1B, 0xF9, 0x51, 0x67,  0xC8, 0xFF, 0xD7, 0x89,  0x5E, 0x33, 0x70, 0x76,
			};
			byte[] expectedCipher = new byte[]
			{
				0xE8, 0x82, 0xF1, 0xDB,
				0xD3, 0x8C, 0xE3, 0xED,  0xA7, 0xC2, 0x3F, 0x04,  0xDD, 0x65, 0x07, 0x1E,  0xB4, 0x13, 0x42, 0xAC,
				0xDF, 0x7E, 0x00, 0xDC,  0xCE, 0xC7, 0xAE, 0x52,  0x98, 0x7D,
			};

			RunTest(key, nonce, plaintext, 12, expectedCipher, 10);
		}

		[TestMethod]
		public void TestVector24()
		{
			byte[] key = new byte[]
			{
				0xD7, 0x82, 0x8D, 0x13,  0xB2, 0xB0, 0xBD, 0xC3,  0x25, 0xA7, 0x62, 0x36,  0xDF, 0x93, 0xCC, 0x6B,
			};
			byte[] nonce = new byte[]
			{
				0x00, 0x8D, 0x49, 0x3B,  0x30, 0xAE, 0x8B, 0x3C,  0x96, 0x96, 0x76, 0x6C,  0xFA,
			};
			byte[] plaintext = new byte[]
			{
				0x6E, 0x37, 0xA6, 0xEF,  0x54, 0x6D, 0x95, 0x5D,  0x34, 0xAB, 0x60, 0x59,  0xAB, 0xF2, 0x1C, 0x0B,
				0x02, 0xFE, 0xB8, 0x8F,  0x85, 0x6D, 0xF4, 0xA3,  0x73, 0x81, 0xBC, 0xE3,  0xCC, 0x12, 0x85, 0x17,
				0xD4,
			};
			byte[] expectedCipher = new byte[]
			{
				0xF3, 0x29, 0x05, 0xB8,
				0x8A, 0x64, 0x1B, 0x04,  0xB9, 0xC9, 0xFF, 0xB5,  0x8C, 0xC3, 0x90, 0x90,  0x0F, 0x3D, 0xA1, 0x2A,
				0xB1, 0x6D, 0xCE, 0x9E,  0x82, 0xEF, 0xA1, 0x6D,  0xA6, 0x20, 0x59,
			};

			RunTest(key, nonce, plaintext, 12, expectedCipher, 10);
		}
	}
}
