using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Text;

namespace Titanis.Security.Ntlm.Test
{
	[Microsoft.VisualStudio.TestTools.UnitTesting.TestClass]
	public class NtlmServerTest
	{
		private NtlmAuthStore AuthStore = new NtlmAuthStore(new Dictionary<string, NtlmAuthRecord>()
		{
			{ "User", new NtlmAuthRecord(Ntlm.LmowfV1("Password"), Ntlm.NtowfV1("Password")) }
		});

		[TestMethod]
		public void TestNtlmV1()
		{
			NtlmServerContext context = new NtlmServerContext(AuthStore)
			{
				ServerName = TestValues.ServerName,
				DomainName = TestValues.Domain
			};

			context.SetAuthState(TestValues.ChallengeFlagsV1, TestValues.ServerChallenge, TestValues.Time);
			context.Accept(TestValues.AuthMessage_V1);
		}

		[TestMethod]
		public void TestNtlmAuth_V1()
		{
			NtlmServerContext context = new NtlmServerContext(AuthStore)
			{
				ServerName = TestValues.ServerName,
				DomainName = TestValues.Domain
			};

			context.SetAuthState(TestValues.ChallengeFlagsV1, TestValues.ServerChallenge, TestValues.Time);
			context.Accept(TestValues.AuthMessage_V1);

			byte[] plaintext = (byte[])TestValues.PlaintextSealedV1.Clone();
			context.UnsealMessage(
				new MessageSecBuffer(plaintext, MessageSecBufferOptions.Privacy),
				TestValues.PlaintextMacV1
				);

			CollectionAssert.AreEqual(TestValues.Plaintext, plaintext);
		}

		[TestMethod]
		public void TestNtlmAuth_V1Ext()
		{
			NtlmServerContext context = new NtlmServerContext(AuthStore)
			{
				ServerName = TestValues.ServerName,
				DomainName = TestValues.Domain
			};

			context.SetAuthState(TestValues.ChallengeFlags_V1Ext, TestValues.ServerChallenge, TestValues.Time);
			context.Accept(TestValues.AuthMessage_V1Ext);

			byte[] plaintext = (byte[])TestValues.PlaintextSealedV1_Ext.Clone();
			context.UnsealMessage(
				new MessageSecBuffer(plaintext, MessageSecBufferOptions.Privacy),
				TestValues.PlaintextMacV1_Ext
				);

			CollectionAssert.AreEqual(TestValues.Plaintext, plaintext);
		}

		[TestMethod]
		public void TestNtlmAuth_V2()
		{
			NtlmServerContext context = new NtlmServerContext(AuthStore)
			{
				ServerName = TestValues.ServerName,
				DomainName = TestValues.Domain
			};

			context.SetAuthState(TestValues.ChallengeFlagsV2, TestValues.ServerChallenge, TestValues.Time);
			context.Accept(TestValues.AuthMessage_V2);

			byte[] plaintext = (byte[])TestValues.PlaintextSealedV2.Clone();
			context.UnsealMessage(
				new MessageSecBuffer(plaintext, MessageSecBufferOptions.Privacy),
				TestValues.PlaintextMacV2
				);

			CollectionAssert.AreEqual(TestValues.Plaintext, plaintext);
		}

		[TestMethod]
		public void TestNtlmRoundTrip_V1()
		{
			var useNtlmV2 = false;
			var negFlags = TestValues.ChallengeFlagsV1;

			var cred = new NtlmPasswordCredential(
				TestValues.UserName,
				TestValues.Domain,
				TestValues.Password);

			TestRoundtrip(useNtlmV2, negFlags, cred);
		}

		[TestMethod]
		public void TestNtlmRoundTrip_V1Ext()
		{
			var useNtlmV2 = false;
			var negFlags = TestValues.ChallengeFlags_V1Ext;

			var cred = new NtlmPasswordCredential(
				TestValues.UserName,
				TestValues.Domain,
				TestValues.Password);

			TestRoundtrip(useNtlmV2, negFlags, cred);
		}

		[TestMethod]
		public void TestNtlmRoundTrip_V2()
		{
			var useNtlmV2 = true;
			var negFlags = TestValues.ChallengeFlagsV2;

			var cred = new NtlmPasswordCredential(
				TestValues.UserName,
				TestValues.Domain,
				TestValues.Password);

			TestRoundtrip(useNtlmV2, negFlags, cred);
		}

		private void TestRoundtrip(bool useNtlmV2, NegotiateFlags negFlags, NtlmPasswordCredential cred)
		{
			NtlmClientContext clientContext = new NtlmClientContext(cred)
			{
				UseNtlmV2 = useNtlmV2,
				ClientConfigFlags = negFlags
			};
			NtlmServerContext serverContext = new NtlmServerContext(AuthStore)
			{
				ServerName = TestValues.ServerName,
				DomainName = TestValues.Domain
			};

			clientContext.Initialize();
			serverContext.Accept(clientContext.Token);
			clientContext.InitializeInternal(serverContext.Token);
			serverContext.Accept(clientContext.Token);

			byte[] msgbuf = (byte[])TestValues.Plaintext.Clone();
			byte[] sealToken = new byte[clientContext.SealTokenSize];

			clientContext.SealMessage(
				new MessageSecBuffer(msgbuf, MessageSecBufferOptions.Privacy),
				sealToken
				);

			serverContext.UnsealMessage(
				new MessageSecBuffer(msgbuf, MessageSecBufferOptions.Privacy),
				sealToken
				);

			CollectionAssert.AreEqual(TestValues.Plaintext, msgbuf);
		}

		[TestMethod]
		public void TestLiveRpc()
		{
			// 0000   05 48 b6 e5 5c a2 41 b8
			const ulong ServerChallenge = 0xb841a25ce5b64805;
			// 0000   c4 ff 5c 54 24 3c d7 01
			const long Timestamp = 0x01d73c24545cffc4;
			byte[] ChallengePacket = new byte[]
			{
				0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e, 0x00,
				0x38, 0x00, 0x00, 0x00, 0x35, 0x82, 0x8a, 0xe2, 0x05, 0x48, 0xb6, 0xe5, 0x5c, 0xa2, 0x41, 0xb8,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x00, 0x98, 0x00, 0x56, 0x00, 0x00, 0x00,
				0x0a, 0x00, 0x61, 0x4a, 0x00, 0x00, 0x00, 0x0f, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00,
				0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x42, 0x00, 0x51, 0x00, 0x51, 0x00, 0x37, 0x00,
				0x41, 0x00, 0x52, 0x00, 0x52, 0x00, 0x02, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00,
				0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x42, 0x00, 0x51, 0x00, 0x51, 0x00,
				0x37, 0x00, 0x41, 0x00, 0x52, 0x00, 0x52, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00,
				0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x42, 0x00, 0x51, 0x00,
				0x51, 0x00, 0x37, 0x00, 0x41, 0x00, 0x52, 0x00, 0x52, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x44, 0x00,
				0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x42, 0x00,
				0x51, 0x00, 0x51, 0x00, 0x37, 0x00, 0x41, 0x00, 0x52, 0x00, 0x52, 0x00, 0x03, 0x00, 0x1e, 0x00,
				0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00,
				0x42, 0x00, 0x51, 0x00, 0x51, 0x00, 0x37, 0x00, 0x41, 0x00, 0x52, 0x00, 0x52, 0x00, 0x07, 0x00,
				0x08, 0x00, 0xc4, 0xff, 0x5c, 0x54, 0x24, 0x3c, 0xd7, 0x01, 0x00, 0x00, 0x00, 0x00
			};
			byte[] AuthPacket = new byte[]
			{
				0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00,
				0x6a, 0x00, 0x00, 0x00, 0x40, 0x01, 0x40, 0x01, 0x82, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00,
				0x58, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00,
				0x64, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0xc2, 0x01, 0x00, 0x00, 0x35, 0x82, 0x88, 0xe2,
				0x0a, 0x00, 0xba, 0x47, 0x00, 0x00, 0x00, 0x0f, 0xa7, 0x36, 0xa2, 0x4e, 0x3a, 0xcc, 0x57, 0xcb,
				0x0f, 0xdd, 0xd2, 0x45, 0x19, 0xc0, 0xc9, 0xac, 0x2e, 0x00, 0x41, 0x00, 0x64, 0x00, 0x6d, 0x00,
				0x69, 0x00, 0x6e, 0x00, 0x4d, 0x00, 0x53, 0x00, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x13, 0x45, 0x55, 0xaa, 0x66, 0x7d, 0xfe, 0xe2, 0x25, 0x5e, 0x3e, 0xbd, 0x65, 0xd5,
				0x58, 0xb3, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0xff, 0x5c, 0x54, 0x24, 0x3c,
				0xd7, 0x01, 0x8a, 0x71, 0xd2, 0x82, 0x63, 0xa9, 0x2f, 0x48, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
				0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00,
				0x2d, 0x00, 0x42, 0x00, 0x51, 0x00, 0x51, 0x00, 0x37, 0x00, 0x41, 0x00, 0x52, 0x00, 0x52, 0x00,
				0x01, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00,
				0x50, 0x00, 0x2d, 0x00, 0x42, 0x00, 0x51, 0x00, 0x51, 0x00, 0x37, 0x00, 0x41, 0x00, 0x52, 0x00,
				0x52, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00,
				0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x42, 0x00, 0x51, 0x00, 0x51, 0x00, 0x37, 0x00, 0x41, 0x00,
				0x52, 0x00, 0x52, 0x00, 0x03, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00,
				0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x42, 0x00, 0x51, 0x00, 0x51, 0x00, 0x37, 0x00,
				0x41, 0x00, 0x52, 0x00, 0x52, 0x00, 0x07, 0x00, 0x08, 0x00, 0xc4, 0xff, 0x5c, 0x54, 0x24, 0x3c,
				0xd7, 0x01, 0x06, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x30, 0x00, 0x30, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x46, 0x05,
				0x7d, 0x2e, 0xa0, 0x1b, 0x11, 0x69, 0xc4, 0x93, 0x3d, 0x14, 0x31, 0x4e, 0x98, 0x4a, 0x48, 0xfb,
				0x3c, 0x7b, 0x18, 0x0b, 0x28, 0xb9, 0x2d, 0x7a, 0x8a, 0x51, 0x90, 0xfe, 0x95, 0xd5, 0x0a, 0x00,
				0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x09, 0x00, 0x24, 0x00, 0x48, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x54, 0x00, 0x2f, 0x00,
				0x31, 0x00, 0x39, 0x00, 0x32, 0x00, 0x2e, 0x00, 0x31, 0x00, 0x36, 0x00, 0x38, 0x00, 0x2e, 0x00,
				0x36, 0x00, 0x36, 0x00, 0x2e, 0x00, 0x31, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x01, 0x7f, 0x30, 0x7f, 0xac, 0x11, 0xba, 0xb8, 0xd0, 0x39, 0x06, 0x1c, 0x21, 0xc8,
				0x4f, 0x1f
			};
			byte[] RequestMac = new byte[]
			{
				0x01, 0x00, 0x00, 0x00, 0x3a, 0xad, 0xf3, 0x6d,
				0xdc, 0x9f, 0xad, 0x3b, 0x00, 0x00, 0x00, 0x00
			};
			byte[] EncryptedRequest = new byte[]
			{
				// 0000
				// Header
				0x05, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00,
				0x70, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00,
				0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,

				// 0018
				// Body
				0xa5, 0x9c, 0x51, 0xeb, 0x35, 0x5b, 0xa2, 0x60,
				0x68, 0x8f, 0xaa, 0x0e, 0x1f, 0x66, 0xcf, 0xd4,
				0x8e, 0x17, 0x26, 0x38, 0xf4, 0x3f, 0xc6, 0xb2,
				0x9c, 0xed, 0xc8, 0x4f, 0x71, 0xb4, 0x5f, 0x10,
				0xef, 0xea, 0x3a, 0xed, 0x70, 0x73, 0x7c, 0x3b,
				0x7b, 0xcf, 0x1b, 0x9f, 0x8d, 0x4c, 0x43, 0x2e,
				0x10, 0x83, 0xab, 0xe5, 0x17, 0xb9, 0x1a, 0xe1,
				0x1d, 0xdc, 0x22, 0x84, 0x10, 0x2b, 0x85, 0x42,

				// 0058
				// sec_trailer
				0x0a, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,

				0x01, 0x00, 0x00, 0x00, 0x3a, 0xad, 0xf3, 0x6d,
				0xdc, 0x9f, 0xad, 0x3b, 0x00, 0x00, 0x00, 0x00,
			};

			byte[] ResponseMac = new byte[]
			{
				0x01, 0x00, 0x00, 0x00, 0xf8, 0xc7, 0x08, 0x86,
				0xc4, 0x9b, 0x8d, 0xf4, 0x00, 0x00, 0x00, 0x00
			};
			byte[] EncryptedResponse = new byte[]
			{
				// 0000
				// Header
				0x05, 0x00, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00,
				0x50, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00,
				0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				// 0018
				// Body
				0xff, 0x19, 0xfe, 0x0d, 0x72, 0x21, 0x08, 0xa9,
				0xd7, 0x1e, 0x92, 0x7d, 0x27, 0xe8, 0x31, 0x04,
				0x1a, 0xcd, 0x3c, 0xce, 0xb0, 0x2a, 0x2f, 0xed,
				0x23, 0xcb, 0x0e, 0xab, 0x2c, 0xf0, 0x39, 0xa6,

				// 0038
				// Trailer
				0x0a, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00, 0xf8, 0xc7, 0x08, 0x86,
				0xc4, 0x9b, 0x8d, 0xf4, 0x00, 0x00, 0x00, 0x00,
			};

			NtlmAuthStore store = new NtlmAuthStore(new Dictionary<string, NtlmAuthRecord>()
			{
				{ "Admin", new NtlmAuthRecord( Ntlm.LmowfV1( "password"), Ntlm.NtowfV1("password")) }
			});

			const string ServerName = "DESKTOP-BQQ7ARR";

			NtlmCredential cred = new NtlmPasswordCredential("Admin", "password");

			NtlmClientContext clientContext = new NtlmClientContext(cred)
			{
				UseNtlmV2 = true,
				RequiresConfidentiality = true
			};

			// 8a 71 d2 82 63 a9 2f 48
			const ulong ClientChallenge = 0x482fa96382d2718a;
			clientContext.SetClientChallenge(ClientChallenge);
			// TODO: Fix test
			throw new NotImplementedException();
			//clientContext.HandleChallengeV2((NegotiateFlags)0xe20882b7, ChallengePacket, DateTime.Now, );

			NtlmServerContext serverContext = new NtlmServerContext(store)
			{
				ServerName = ServerName,
				DomainName = ServerName,
				DnsServerName = ServerName,
				DnsDomainName = ServerName,
			};
			serverContext.SetAuthState(
				NegotiateFlags.A_NegotiateUnicode,
				ServerChallenge,
				new DateTime(Timestamp)
				);
			serverContext.Accept(AuthPacket);

			var requestBody = new MessageSecBuffer(EncryptedRequest.Slice(0x18, 0x40), MessageSecBufferOptions.Privacy);
			serverContext.UnsealMessage(
				new MessageUnsealParams
				{
					bufs = new MessageSecBufferList
					{
						buf1 = new MessageSecBuffer(EncryptedRequest.Slice(0, 0x18), MessageSecBufferOptions.None),
						buf2 = requestBody,
						buf3 = new MessageSecBuffer(EncryptedRequest.Slice(0x58, 0x08), MessageSecBufferOptions.None)
					},
					macBuffer = RequestMac
				});

			clientContext.SyncCryptoStateFrom(serverContext);

			var responseBody = new MessageSecBuffer(EncryptedResponse.Slice(0x18, 0x20), MessageSecBufferOptions.Privacy);
			clientContext.UnsealMessage(
				new MessageUnsealParams
				{
					bufs = new MessageSecBufferList
					{
						buf1 = new MessageSecBuffer(EncryptedResponse.Slice(0, 0x18), MessageSecBufferOptions.None),
						buf2 = responseBody,
						buf3 = new MessageSecBuffer(EncryptedResponse.Slice(0x38, 0x08), MessageSecBufferOptions.None)
					},
					macBuffer = ResponseMac
				});
		}
	}
}
