using System;
using System.Buffers.Binary;
using System.Text;

namespace Titanis.Security.Ntlm.Test
{
	static class TestValues
	{





		internal static readonly byte[] Plaintext = Encoding.Unicode.GetBytes("Plaintext");
		internal const uint PlaintextCrc = 0x93aa847d;

		internal static byte[] PlaintextMacV1 = new byte[]
		{
			0x01, 0x00, 0x00, 0x00, 0x45, 0xc8, 0x44, 0xe5,
			0x09, 0xdc, 0xd1, 0xdf, 0x2e, 0x45, 0x9d, 0x36
		};

		internal static byte[] PlaintextMacV1_Ext = new byte[]
		{
			0x01, 0x00, 0x00, 0x00, 0xff, 0x2a, 0xeb, 0x52,
			0xf6, 0x81, 0x79, 0x3a, 0x00, 0x00, 0x00, 0x00
		};

		internal static byte[] PlaintextSealedV1 = new byte[]
		{
			0x56, 0xfe, 0x04, 0xd8, 0x61, 0xf9, 0x31, 0x9a,
			0xf0, 0xd7, 0x23, 0x8a, 0x2e, 0x3b, 0x4d, 0x45,
			0x7f, 0xb8
		};

		internal static byte[] PlaintextSealedV1_Ext = new byte[]
		{
			0xa0, 0x23, 0x72, 0xf6, 0x53, 0x02, 0x73, 0xf3,
			0xaa, 0x1e, 0xb9, 0x01, 0x90, 0xce, 0x52, 0x00,
			0xc9, 0x9d
		};

		internal static byte[] PlaintextSealedV2 = new byte[]
		{
			0x54, 0xe5, 0x01, 0x65, 0xbf, 0x19, 0x36, 0xdc,
			0x99, 0x60, 0x20, 0xc1, 0x81, 0x1b, 0x0f, 0x06,
			0xfb, 0x5f
		};

		internal static byte[] PlaintextMacV2 = new byte[]
		{
			0x01, 0x00, 0x00, 0x00, 0x7f, 0xb3, 0x8e, 0xc5,
			0xc5, 0x5d, 0x49, 0x76, 0x00, 0x00, 0x00, 0x00
		};

		internal static NtlmVersion Version = new NtlmVersion
		{
			majorVersion = 5,
			minorVersion = 1,
			build = 2600,
			revision = 15
		};

		internal const NegotiateFlags ChallengeFlagsV1 = 0
			| NegotiateFlags.V_NegotiateKeyExchange
			| NegotiateFlags.W_Negotiate56
			| NegotiateFlags.U_Negotiate128
			| NegotiateFlags.T_NegotiateVersion
			| NegotiateFlags.O_TargetTypeServer
			| NegotiateFlags.M_NegotiateAlwaysSign
			| NegotiateFlags.H_NegotiateNtlm
			| NegotiateFlags.E_NegotiateSeal
			| NegotiateFlags.D_NegotiateSign
			| NegotiateFlags.B_NegotiateOem
			| NegotiateFlags.A_NegotiateUnicode
			;

		internal const NegotiateFlags ChallengeFlags_V1Ext = 0
			| NegotiateFlags.W_Negotiate56
			| NegotiateFlags.T_NegotiateVersion
			| NegotiateFlags.P_NegotiateExtendedSessionSecurity
			| NegotiateFlags.O_TargetTypeServer
			| NegotiateFlags.M_NegotiateAlwaysSign
			| NegotiateFlags.H_NegotiateNtlm
			| NegotiateFlags.E_NegotiateSeal
			| NegotiateFlags.D_NegotiateSign
			| NegotiateFlags.B_NegotiateOem
			| NegotiateFlags.A_NegotiateUnicode
			;

		// 33 82 02 E2
		internal const NegotiateFlags ChallengeFlagsV2 = 0
			| NegotiateFlags.W_Negotiate56
			| NegotiateFlags.V_NegotiateKeyExchange
			| NegotiateFlags.U_Negotiate128

			| NegotiateFlags.T_NegotiateVersion
			| NegotiateFlags.S_NegotiateTargetInfo

			| NegotiateFlags.P_NegotiateExtendedSessionSecurity
			| NegotiateFlags.O_TargetTypeServer
			| NegotiateFlags.M_NegotiateAlwaysSign
			| NegotiateFlags.H_NegotiateNtlm
			| NegotiateFlags.E_NegotiateSeal
			| NegotiateFlags.D_NegotiateSign
			| NegotiateFlags.B_NegotiateOem
			| NegotiateFlags.A_NegotiateUnicode
			;

		internal static uint ChallengeFlagsNumeric = BinaryPrimitives.ReverseEndianness((uint)ChallengeFlagsV2);

		internal const NegotiateFlags AuthFlags = (NegotiateFlags)0xE2888235;

		internal static NtlmAvInfo TargetInfo = new NtlmAvInfo
		{
			NbDomainName = TestInputValues.Domain,
			NbComputerName = TestInputValues.ServerName
		};


		internal static readonly byte[] NTResponseV1_Extended = new byte[]
		{
			0x75, 0x37, 0xf8, 0x03, 0xae, 0x36, 0x71, 0x28,
			0xca, 0x45, 0x82, 0x04, 0xbd, 0xe7, 0xca, 0xf8,
			0x1e, 0x97, 0xed, 0x26, 0x83, 0x26, 0x72, 0x32
		};

		internal static readonly byte[] LMResponseV1_Extended = new byte[]
		{
			0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		};


		internal static byte[] SigningKeyC2S_V1Ext = new byte[]
		{
			0x60, 0xe7, 0x99, 0xbe, 0x5c, 0x72, 0xfc, 0x92,
			0x92, 0x2a, 0xe8, 0xeb, 0xe9, 0x61, 0xfb, 0x8d
		};

		internal static byte[] SealingKeyC2S_V1Ext = new byte[]
		{
			0x04, 0xdd, 0x7f, 0x01, 0x4d, 0x85, 0x04, 0xd2,
			0x65, 0xa2, 0x5c, 0xc8, 0x6a, 0x3a, 0x7c, 0x06
		};

		internal static byte[] SigningKeyC2S_V2 = new byte[]
		{
			0x47, 0x88, 0xdc, 0x86, 0x1b, 0x47, 0x82, 0xf3,
			0x5d, 0x43, 0xfd, 0x98, 0xfe, 0x1a, 0x2d, 0x39
		};

		internal static byte[] SealingKeyC2S_V2 = new byte[]
		{
			0x59, 0xf6, 0x00, 0x97, 0x3c, 0xc4, 0x96, 0x0a,
			0x25, 0x48, 0x0a, 0x7c, 0x19, 0x6e, 0x4c, 0x58
		};

		internal static byte[] ResponseKeyNT_V2 = new byte[]
		{
			0x0c, 0x86, 0x8a, 0x40, 0x3b, 0xfd, 0x7a, 0x93,
			0xa3, 0x00, 0x1e, 0xf2, 0x2e, 0xf0, 0x2e, 0x3f
		};
		internal static byte[] LMChallengeResponse_V2 = new byte[]
		{
			0x86, 0xc3, 0x50, 0x97, 0xac, 0x9c, 0xec, 0x10,
			0x25, 0x54, 0x76, 0x4a, 0x57, 0xcc, 0xcc, 0x19,
			0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
		};

		internal static byte[] NTProofStr_V2 = new byte[] {
			0x68, 0xcd, 0x0a, 0xb8, 0x51, 0xe5, 0x1c, 0x96,
			0xaa, 0xbc, 0x92, 0x7b, 0xeb, 0xef, 0x6a, 0x1c
		};

		internal static byte[] SessionBaseKey_V2 = new byte[] {
			0x8d, 0xe4, 0x0c, 0xca, 0xdb, 0xc1, 0x4a, 0x82,
			0xf1, 0x5c, 0xb0, 0xad, 0x0d, 0xe9, 0x5c, 0xa3
		};

		internal static byte[] ChallengeMessage_V2 = new byte[]
		{
			0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00,
			0x38, 0x00, 0x00, 0x00, 0x33, 0x82, 0x8a, 0xe2, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x24, 0x00, 0x44, 0x00, 0x00, 0x00,
			0x06, 0x00, 0x70, 0x17, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x00, 0x65, 0x00, 0x72, 0x00, 0x76, 0x00,
			0x65, 0x00, 0x72, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x44, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x61, 0x00,
			0x69, 0x00, 0x6e, 0x00, 0x01, 0x00, 0x0c, 0x00, 0x53, 0x00, 0x65, 0x00, 0x72, 0x00, 0x76, 0x00,
			0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00
		};

		internal static byte[] AuthMessage_V1 = new byte[]
		{
			// 0000:
				// Signature
				0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00,
				// Message type
				0x03, 0x00, 0x00, 0x00,
				// lmChallengeResponse
				0x18, 0x00, 0x18, 0x00,
			// 0010:
				0x6c, 0x00, 0x00, 0x00,
				// ntChallengeResponse
				0x18, 0x00, 0x18, 0x00,
				0x84, 0x00, 0x00, 0x00,
				// domain
				0x0c, 0x00, 0x0c, 0x00,
			// 0020:
				0x48, 0x00, 0x00, 0x00,
				// userName
				0x08, 0x00, 0x08, 0x00,
				0x54, 0x00, 0x00, 0x00,
				// Workstation
				0x10, 0x00, 0x10, 0x00,
			// 0030:
				0x5c, 0x00, 0x00, 0x00,
				// sessionKey
				0x10, 0x00, 0x10, 0x00,
				0x9c, 0x00, 0x00, 0x00,
				// negotiateFlags
				0x35, 0x82, 0x80, 0xe2,
			// 0040:
				// version
				0x05, 0x01, 0x28, 0x0a, 0x00, 0x00, 0x00, 0x0f,
				// Username
				0x44, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x61, 0x00,
			// 0050:
				0x69, 0x00, 0x6e, 0x00,
				// Workstation
				0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x43, 0x00, 0x4f, 0x00,
			// 0060:
				0x4d, 0x00, 0x50, 0x00,
				// 
				0x55, 0x00, 0x54, 0x00, 0x45, 0x00, 0x52, 0x00,
				// LM response
				0x98, 0xde, 0xf7, 0xb8,
			// 0070:
				0x7f, 0x88, 0xaa, 0x5d, 0xaf, 0xe2, 0xdf, 0x77, 0x96, 0x88, 0xa1, 0x72, 0xde, 0xf1, 0x1c, 0x7d,
			// 0080:
				0x5c, 0xcd, 0xef, 0x13, 0x67, 0xc4, 0x30, 0x11, 0xf3, 0x02, 0x98, 0xa2, 0xad, 0x35, 0xec, 0xe6,
			// 0090:
				0x4f, 0x16, 0x33, 0x1c, 0x44, 0xbd, 0xbe, 0xd9, 0x27, 0x84, 0x1f, 0x94,
				// Session key
				0x51, 0x88, 0x22, 0xb1,
			// 00A0:
				0xb3, 0xf3, 0x50, 0xc8, 0x95, 0x86, 0x82, 0xec,
				0xbb, 0x3e, 0x3c, 0xb7
		};

		internal static byte[] AuthMessage_V1Ext = new byte[]
		{
			0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00,
			0x6c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x84, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00,
			0x48, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x54, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00,
			0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x35, 0x82, 0x08, 0x82,
			0x05, 0x01, 0x28, 0x0a, 0x00, 0x00, 0x00, 0x0f, 0x44, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x61, 0x00,
			0x69, 0x00, 0x6e, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x43, 0x00, 0x4f, 0x00,
			0x4d, 0x00, 0x50, 0x00, 0x55, 0x00, 0x54, 0x00, 0x45, 0x00, 0x52, 0x00, 0xaa, 0xaa, 0xaa, 0xaa,
			0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x75, 0x37, 0xf8, 0x03, 0xae, 0x36, 0x71, 0x28, 0xca, 0x45, 0x82, 0x04,
			0xbd, 0xe7, 0xca, 0xf8, 0x1e, 0x97, 0xed, 0x26, 0x83, 0x26, 0x72, 0x32
		};


		internal static byte[] AuthMessage_V2 = new byte[]
		{
				// 0000:
					// Signature
					0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00,
					// Message type
					0x03, 0x00, 0x00, 0x00,
					// LMChallengeResponse fields
					0x18, 0x00, 0x18, 0x00,
				// 0010:
					0x6c, 0x00, 0x00, 0x00,
					// NTChallengeResponse fields
					0x54, 0x00, 0x54, 0x00,
					0x84, 0x00, 0x00, 0x00,
					// Domain name fields
					0x0c, 0x00, 0x0c, 0x00,
				// 0020:
					0x48, 0x00, 0x00, 0x00,
					// User name fields
					0x08, 0x00, 0x08, 0x00,
					0x54, 0x00, 0x00, 0x00,
					// Workstation fields
					0x10, 0x00, 0x10, 0x00,
				// 0030:
					0x5c, 0x00, 0x00, 0x00,
					// Encrypted random session key
					0x10, 0x00, 0x10, 0x00,
					0xd8, 0x00, 0x00, 0x00,
					// Negotiate flags
					0x35, 0x82, 0x88, 0xe2,
				// 0040:
					// Version
					0x05, 0x01, 0x28, 0x0a,
					0x00, 0x00, 0x00, 0x0f,

				//
				// Payload
				//

					// Domain name
					0x44, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x61, 0x00,
				// 0050:
					0x69, 0x00, 0x6e, 0x00,
					// User name
					0x55, 0x00, 0x73, 0x00,
					0x65, 0x00, 0x72, 0x00,
					// Workstation
					0x43, 0x00, 0x4f, 0x00,
				// 0060:
					0x4d, 0x00, 0x50, 0x00, 0x55, 0x00, 0x54, 0x00,
					0x45, 0x00, 0x52, 0x00,
					// LMChallengeResponse
					0x86, 0xc3, 0x50, 0x97,
				// 0070:
					0xac, 0x9c, 0xec, 0x10, 0x25, 0x54, 0x76, 0x4a,
					0x57, 0xcc, 0xcc, 0x19, 0xaa, 0xaa, 0xaa, 0xaa,
				// 0080:
					0xaa, 0xaa, 0xaa, 0xaa,
					// NTChallengeResponse
					0x68, 0xcd, 0x0a, 0xb8,
					0x51, 0xe5, 0x1c, 0x96, 0xaa, 0xbc, 0x92, 0x7b,
				// 0090:
					0xeb, 0xef, 0x6a, 0x1c, 0x01, 0x01, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				// 00A0:
					0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa,
					0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00,
				// 00B0:
					0x02, 0x00, 0x0c, 0x00, 0x44, 0x00, 0x6f, 0x00,
					0x6d, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6e, 0x00,
				// 00C0:
					0x01, 0x00, 0x0c, 0x00, 0x53, 0x00, 0x65, 0x00,
					0x72, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00,
				// 00D0:
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					// EncryptedRandomSessionKey
					0xc5, 0xda, 0xd2, 0x54, 0x4f, 0xc9, 0x79, 0x90,
				// 00E0:
					0x94, 0xce, 0x1c, 0xe9, 0x0b, 0xc9, 0xd0, 0x3e
		};
		internal static byte[] Kxkey_Extended = new byte[]
		{
				0xeb, 0x93, 0x42, 0x9a, 0x8b, 0xd9, 0x52, 0xf8,
				0xb8, 0x9c, 0x55, 0xb8, 0x7f, 0x47, 0x5e, 0xdc
		};
	}
}
