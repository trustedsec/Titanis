using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Titanis.Security.Kerberos.Test;

[TestClass]
public class Lumon_Aes256
{
	private const string UserName = "milchick";
	private const string Password = "Br3@kr00m!";
	private const string DomainName = "LUMON.IND";

	[TestMethod("Decrypt AS-REQ pa-data (AES 256)")]
	public void TestDecryptAsreq_padata()
	{
		KerberosCredential cred = new KerberosPasswordCredential(UserName, DomainName, Password);
		var encProfile = new EncProfile_Aes256CtsHmacSha1_96();
		var key = cred.DeriveProtocolKeyFor(encProfile, null);
		//var key = cred.DeriveProtocolKeyFor(encProfile, Array.Empty<byte>());
		var decrypted = key.Decrypt(KeyUsage.AsreqPaEncTimestamp, Structs.EncryptedData(EType.Aes256CtsHmacSha1_96, Asreq_Padata));
	}

	[TestMethod("Decrypt AS-REP enc-part (AES 256)")]
	public void TestDecryptAsrep_encPart()
	{
		KerberosCredential cred = new KerberosPasswordCredential(UserName, DomainName, Password);
		var encProfile = new EncProfile_Aes256CtsHmacSha1_96();
		var key = cred.DeriveProtocolKeyFor(encProfile, null);
		var decrypted = key.Decrypt(KeyUsage.AsrepEncPart, Structs.EncryptedData(EType.Aes256CtsHmacSha1_96, Asrep_encPart));
	}

	#region Test data
	private static readonly byte[] Asreq_Padata = new byte[] { 0x64, 0xb8, 0x43, 0x30, 0x62, 0xa9, 0xa5, 0x18, 0x72, 0x37, 0x8e, 0x6b, 0x38, 0xec, 0x32, 0x5d, 0xa7, 0xae, 0xb0, 0x5b, 0x50, 0x81, 0x83, 0xd0, 0x87, 0x47, 0xc7, 0x49, 0x10, 0x9, 0xa2, 0xd9, 0x6f, 0xef, 0x6d, 0x45, 0x5b, 0x26, 0xd6, 0xf3, 0x8f, 0x56, 0xe4, 0xfa, 0x3c, 0x7a, 0xf6, 0xff, 0xa6, 0x94, 0xf5, 0xb9, 0xc6, 0xf5, 0x65, 0x1a };
	private static readonly byte[] Asrep_encPart = new byte[] { 0x87, 0x43, 0xbb, 0xa6, 0xa4, 0xc2, 0x78, 0x89, 0x4c, 0xfb, 0x48, 0x68, 0xf0, 0x29, 0xbd, 0x5c, 0xf2, 0x68, 0x4c, 0xd8, 0x4f, 0xde, 0x9b, 0x28, 0x3b, 0x81, 0x1b, 0x7e, 0xf2, 0x1, 0xce, 0xc8, 0x4e, 0x38, 0xfa, 0xb1, 0x91, 0x4e, 0x3, 0x25, 0x49, 0x32, 0x1, 0xae, 0xab, 0xd4, 0xa, 0x3, 0x5e, 0xec, 0xf0, 0x90, 0xf1, 0x80, 0xa4, 0xde, 0x3b, 0xf2, 0xc1, 0x4e, 0x1, 0x51, 0x6e, 0xb9, 0x64, 0x54, 0x17, 0x6f, 0x6f, 0xf6, 0x88, 0x74, 0x30, 0x4d, 0x37, 0xe6, 0x53, 0xe, 0xc6, 0xcb, 0xe8, 0x3d, 0xda, 0x5d, 0xba, 0xad, 0x75, 0xfb, 0x2, 0xbf, 0x4f, 0x68, 0xe5, 0xb1, 0xfa, 0xfd, 0x1b, 0x14, 0x9e, 0xcd, 0x67, 0x9c, 0x98, 0xf7, 0x56, 0xb8, 0x64, 0x7, 0x68, 0xb2, 0xeb, 0xe9, 0x52, 0x52, 0xb, 0x29, 0xd3, 0x24, 0xe9, 0x42, 0x30, 0x35, 0xcb, 0x20, 0xc7, 0x6a, 0xad, 0x2, 0x53, 0xf, 0x2, 0x68, 0xe2, 0xfa, 0xd2, 0x3a, 0x72, 0x69, 0xfd, 0xe3, 0xdb, 0x3a, 0x5c, 0xa5, 0x5c, 0x56, 0xbc, 0xf4, 0x7c, 0xe8, 0x3d, 0x5f, 0xc8, 0x72, 0xf3, 0xc0, 0xa7, 0x11, 0x7f, 0xf1, 0x2, 0x39, 0xaa, 0xbb, 0x42, 0xaf, 0xdc, 0x10, 0x6d, 0x35, 0x55, 0x1, 0xda, 0x4c, 0x58, 0xc3, 0x86, 0x93, 0xdf, 0x46, 0x1d, 0x4c, 0xdc, 0xb9, 0x61, 0x64, 0xa5, 0xba, 0x5f, 0xfa, 0xdd, 0x33, 0xa9, 0xdb, 0xc, 0x40, 0xfc, 0xec, 0x3, 0xdc, 0xe6, 0xb, 0x5e, 0x4e, 0x67, 0xe5, 0x3b, 0x8a, 0xcd, 0xc5, 0xeb, 0xca, 0x52, 0x9b, 0x80, 0x4c, 0xe9, 0xde, 0x5, 0x78, 0x5, 0x2a, 0x5e, 0xe9, 0x86, 0xe0, 0x2a, 0x7c, 0xa7, 0xcf, 0xb5, 0xb, 0x0, 0xc1, 0x16, 0x8f, 0x93, 0x62, 0xce, 0xd6, 0x80, 0x0, 0xe7, 0x20, 0xa8, 0xbc, 0xb5, 0x24, 0xf4, 0x15, 0xa4, 0x8f, 0x1c, 0x50, 0x2b, 0x7, 0xc6, 0x32, 0x67, 0x5d, 0x76, 0xcc, 0xb3, 0xd1, 0x36, 0xbf, 0x45, 0x2b, 0xc, 0x74, 0x77, 0x1b, 0x4c, 0x51, 0xdf, 0xb8, 0x95, 0xc8, 0x81, 0xb7, 0x32, 0x88, 0x72, 0x56, 0xd5, 0xbf, 0xc, 0x26, 0x18, 0x45, 0xaf, 0x1c, 0x38, 0xb6, 0xad, 0x68, 0xbe, 0xc2, 0xde, 0x57, 0xe9, 0xbf, 0x44, 0xf8, 0x27, 0x8, 0x9e, 0x1d, 0x3f, 0x8f, 0x8d, 0xff, 0xdf, 0x54, 0x8b, 0x9a, 0xa0, 0x9f, 0x44 };
	#endregion
}
