using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Net;
using System.Reflection;
using System.Text;
using Titanis.Asn1.Serialization;
using Titanis.Crypto;
using Titanis.Reflection;
using Titanis.Security.Kerberos.Asn1.KerberosV5Spec2;

namespace Titanis.Security.Kerberos.Test
{
	[TestClass]
	public class ParseTest
	{

		//[TestMethod]
		//public void Test_ASReq_TGSReq_Exchanges()
		//{
		//	KerberosClient client = new KerberosClient(TestData_.locator);

		//	byte[] asrepBytes = Assembly.GetExecutingAssembly().LoadResourceData("Titanis.Security.Kerberos.Test.TestData.asrep-testuser.bin");
		//	var asrep = KerberosClient.ParseReplyPdu(asrepBytes).asrep;
		//	var tgt = client.ProcessASRep(asrep, new KerberosClient.TicketRequestContext(TestData_.Cred_TestUser, KerberosClient.TgtServiceName, ""), DateTime.Now);
		//	var asrep_ticket = asrep.ticket;
		//	var asrep_ticket_encPart = client.Decrypt<Ticket_EncPart>(
		//		TestData_.Cred_Krbtgt, null, KeyUsage.Asrep_Tgsrep_Ticket,
		//		asrep_ticket.enc_part);

		//	byte[] tgsreqBytes = Assembly.GetExecutingAssembly().LoadResourceData("Titanis.Security.Kerberos.Test.TestData.tgsreq-testuser-cifs-dc1.bin");
		//	var tgsreq = KerberosClient.ParseRequestPdu(tgsreqBytes).tgsreq;
		//	var tgsreq_apreq = KerberosClient.ExtractPAData<AP_REQ>(tgsreq, PadataType.TgsReq).Value;
		//	var tgsreq_auth = client.Decrypt<Authenticator_Outer>(
		//		tgt.SessionKey.KeyBytes, KeyUsage.TgsreqPatgsreqPadataApreqAuthChecksum_TgsSessionKey_IncludesAuthSubkey,
		//		tgsreq_apreq.authenticator).Value;

		//	byte[] tgsrepBytes = Assembly.GetExecutingAssembly().LoadResourceData("Titanis.Security.Kerberos.Test.TestData.tgsrep-testuser-cifs-dc1.bin");
		//	var tgsrep = KerberosClient.ParseReplyPdu(tgsrepBytes).tgsrep;
		//	var ticketInfo = client.ProcessTgsRep(tgsrep, tgt, new KerberosClient.TicketRequestContext(TestData_.Cred_TestUser, string.Empty, string.Empty));
		//	var tgsrep_ticket = tgsrep.ticket;
		//	var tgsrep_ticket_encPart = client.Decrypt<Ticket_EncPart>(
		//		TestData_.Cred_DC1, null, KeyUsage.Asrep_Tgsrep_Ticket,
		//		tgsrep_ticket.enc_part);

		//	byte[] apreqBytes = Assembly.GetExecutingAssembly().LoadResourceData("Titanis.Security.Kerberos.Test.TestData.apreq-cifs-wks.bin");
		//	var apreq = Asn1DerDecoder.Decode<AP_REQ>(apreqBytes).Value;
		//	var apreq_ticket = apreq.ticket;
		//	var aprep_ticket_encPart = client.Decrypt<Ticket_EncPart>(
		//		TestData_.Cred_Workstation, null, KeyUsage.Asrep_Tgsrep_Ticket,
		//		apreq_ticket.enc_part).Value;
		//	var apreq_auth = client.Decrypt<Authenticator_Outer>(
		//		aprep_ticket_encPart.key.keyvalue, KeyUsage.ApreqAuth_AppSessionKey_IncludesAuthSubkey,
		//		apreq.authenticator).Value;

		//	var apreq_auth_cksum = KerberosReader.ReadAuthChecksum(apreq_auth.cksum.checksum);
		//}

		//[TestMethod]
		//public void TestRpcDecrypt()
		//{
		//	KerberosClient client = new KerberosClient(TestData_.locator);

		//	byte[] apreqBytes = Assembly.GetExecutingAssembly().LoadResourceData("Titanis.Security.Kerberos.Test.TestData.apreq-nrpc-dc1.bin");
		//	var apreq = Asn1DerDecoder.Decode<AP_REQ>(apreqBytes).Value;
		//	var apreq_ticket = apreq.ticket;
		//	var apreq_ticket_encPart = client.Decrypt<Ticket_EncPart>(
		//		TestData_.Cred_DC1, null, KeyUsage.Asrep_Tgsrep_Ticket,
		//		apreq_ticket.enc_part).Value;
		//	var apreq_auth = client.Decrypt<Authenticator_Outer>(
		//		apreq_ticket_encPart.key.keyvalue, KeyUsage.ApreqAuth_AppSessionKey_IncludesAuthSubkey,
		//		apreq.authenticator).Value;
		//	var apreq_auth_cksum = KerberosReader.ReadAuthChecksum(apreq_auth.cksum.checksum);
		//	// context flags: 0x103E

		//	// Client seq number: 0x0db4373d

		//	byte[] aprepBytes = Assembly.GetExecutingAssembly().LoadResourceData("Titanis.Security.Kerberos.Test.TestData.aprep-nrpc-dc1.bin");
		//	var aprep = Asn1DerDecoder.Decode<AP_REP>(aprepBytes).Value;
		//	var aprep_encPart = client.Decrypt<EncPart_APRep>(
		//		apreq_ticket_encPart.key.keyvalue, KeyUsage.APRep_EncPart,
		//		aprep.enc_part).Value;

		//	// Server seq number: 0x0eb16869

		//	byte[] aprep2Bytes = Assembly.GetExecutingAssembly().LoadResourceData("Titanis.Security.Kerberos.Test.TestData.aprep2-nrpc-dc1.bin");
		//	var aprep2 = Asn1DerDecoder.Decode<AP_REP>(aprep2Bytes).Value;
		//	var aprep2_encPart = client.Decrypt<EncPart_APRep>(
		//		apreq_ticket_encPart.key.keyvalue, KeyUsage.APRep_EncPart,
		//		aprep2.enc_part).Value;

		//	var etype = aprep2.enc_part.etype;

		//	byte[] micList = Assembly.GetExecutingAssembly().LoadResourceData("Titanis.Security.Kerberos.Test.TestData.miclist-nrpc.bin");
		//	byte[] micListSig = Assembly.GetExecutingAssembly().LoadResourceData("Titanis.Security.Kerberos.Test.TestData.miclist-sig-nrpc.bin");
		//	client.VerifySignature(
		//		client.CreateSessionKeyFor(aprep_encPart.subkey), KeyUsage.InitiatorSign,
		//		apreq_auth.seq_number.Value,
		//		WrapFlags.AcceptorSubkey,
		//		new MessageVerifyParams(micList, micList));

		//	byte[] trailer = Assembly.GetExecutingAssembly().LoadResourceData("Titanis.Security.Kerberos.Test.TestData.dcerpc-encTrailer.bin");
		//	byte[] stub = Assembly.GetExecutingAssembly().LoadResourceData("Titanis.Security.Kerberos.Test.TestData.dcerpc-encStub.bin");
		//	uint seqNbr = apreq_auth.seq_number.Value + 1;
		//	client.UnsealMessage(
		//		aprep_encPart.subkey.keyvalue, KeyUsage.InitiatorSeal, (EType)aprep_encPart.subkey.keytype,
		//		seqNbr,
		//		WrapFlags.Sealed | WrapFlags.AcceptorSubkey,
		//		new MessageUnsealParams
		//		{
		//			bufs = new MessageSecBufferList
		//			{
		//				buf1 = new MessageSecBuffer(stub, MessageSecBufferOptions.Privacy)
		//			},
		//			macBuffer = trailer
		//		});
		//}

		[TestMethod]
		public void TestUnseal()
		{
			byte[] header = new byte[]
			{
				0x05, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x4c, 0x00, 0x02, 0x00, 0x00, 0x00,
				0x94, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			};
			byte[] authHeader = new byte[]
			{
				0x09, 0x06, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
			};
			byte[] message = new byte[]
			{
				0xbc, 0x76, 0xcd, 0x55, 0xd9, 0x7c, 0x7e, 0x51, 0xf5, 0x3c, 0xd2, 0xad, 0xc8, 0xda, 0xf9, 0x4b,
				0xe7, 0xbc, 0x02, 0x22, 0x3e, 0xed, 0x68, 0xf3, 0x4e, 0x9b, 0x22, 0x89, 0x4a, 0xd6, 0x96, 0xf2,
				0x68, 0x76, 0xcb, 0x58, 0x86, 0x66, 0x31, 0x07, 0xbe, 0x1d, 0x88, 0x71, 0xcf, 0xbc, 0x1d, 0x82,
				0x9c, 0xac, 0xea, 0x2b, 0x34, 0xdb, 0xf0, 0xea, 0x1f, 0x94, 0x20, 0xab, 0x13, 0x08, 0x74, 0x5c,
				0xe0, 0x58, 0xe1, 0xe5, 0x75, 0xe1, 0x0f, 0xa7, 0x8c, 0xd8, 0xe4, 0x6b, 0xf8, 0x92, 0xd0, 0xf2,
				0x7f, 0xfc, 0x08, 0x05, 0x34, 0x1f, 0x12, 0xf6, 0xe7, 0xa4, 0xbe, 0x75, 0x11, 0xcf, 0x39, 0x11,
				0x08, 0x2e, 0xca, 0xc0, 0x4b, 0xb6, 0x5e, 0x10, 0x33, 0xb5, 0xdc, 0x93, 0x28, 0x6c, 0xaa, 0x65,
				0x0c, 0xaf, 0x0b, 0x22, 0x7d, 0xea, 0x5a, 0xbf, 0x5e, 0x2e, 0x97, 0x98, 0x37, 0x7f, 0x38, 0xec,
				0xc9, 0xa6, 0xd2, 0x91, 0xfc, 0xad, 0x9d, 0x62, 0x8e, 0xb7, 0x79, 0x40, 0xfc, 0x3d, 0xf3, 0xe1,
				0x09, 0x44, 0xc8, 0x76, 0xde, 0xda, 0x0d, 0x08, 0x7b, 0x97, 0xbc, 0x11, 0xdd, 0xeb, 0x46, 0x5c,
			};
			byte[] token = new byte[] {
				0x05, 0x04, 0x06, 0xff, 0x00, 0x10, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xb4, 0x37, 0x3e,
				0x60, 0x71, 0xd6, 0x0a, 0x44, 0xb2, 0xe3, 0x59, 0xde, 0x7a, 0x6e, 0x59, 0x16, 0x24, 0xff, 0x39,
				0x8a, 0x64, 0x89, 0x98, 0x78, 0x9d, 0xba, 0xb3, 0x77, 0xf3, 0x72, 0xbb, 0xc7, 0xee, 0xce, 0xb9,
				0xaf, 0xc4, 0xf1, 0xe7, 0x9c, 0x5d, 0x9a, 0x41, 0xe9, 0x88, 0x84, 0x4a, 0x44, 0x05, 0x35, 0xd3,
				0xba, 0xdd, 0x84, 0x5e, 0x85, 0x1d, 0x64, 0xd9, 0xeb, 0x79, 0x1c, 0x63,
			};

			byte[] key = new byte[] {
				0x7e, 0x8e, 0x1d, 0xcd, 0x92, 0xa2, 0xca, 0x30, 0x97, 0xdc, 0xc1, 0xdc, 0xb9, 0x59, 0x4c, 0xb9,
				0xcf, 0x92, 0x20, 0x57, 0x48, 0xc4, 0x2b, 0xca, 0xe1, 0xf0, 0xa3, 0x37, 0xfd, 0x02, 0x96, 0xee,
			};

			byte[] plaintext = new byte[]
			{
				0xc1, 0xf3, 0x87, 0x55, 0x0e, 0x16, 0xd8, 0x49, 0x84, 0xbe, 0xd5, 0x95, 0xe1, 0x61, 0xce, 0x3c,
				0x05, 0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x4c, 0x00, 0x02, 0x00, 0x00, 0x00,
				0x94, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x1a, 0x20, 0x4d, 0xe2, 0xd6, 0x4f, 0xd1, 0x11, 0xa3, 0xda, 0x00, 0x00, 0xf8, 0x75, 0xae, 0x0d,
				0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a, 0xe3, 0x13, 0x71, 0x02, 0xf4, 0x36, 0x71,
				0x02, 0x40, 0x28, 0x00, 0x35, 0x42, 0x51, 0xe3, 0x06, 0x4b, 0xd1, 0x11, 0xab, 0x04, 0x00, 0xc0,
				0x4f, 0xc2, 0xdc, 0xd2, 0x04, 0x00, 0x00, 0x00, 0x33, 0x05, 0x71, 0x71, 0xba, 0xbe, 0x37, 0x49,
				0x83, 0x19, 0xb5, 0xdb, 0xef, 0x9c, 0xcc, 0x36, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x06, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x05, 0x04, 0x06, 0xff, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xb4, 0x37, 0x3e,
			};

			byte[] checksum = new byte[]
			{
				0xaf, 0xc4, 0xf1, 0xe7, 0x9c, 0x5d, 0x9a, 0x41, 0xe9, 0x88, 0x84, 0x4a,
			};

			SimpleKdcLocator locator = new SimpleKdcLocator(new IPEndPoint(IPAddress.Any, 88));
			KerberosClient client = new KerberosClient(locator);

			uint seqNbr = 0x0db4373d + 1;// 0x0eb16869;
			client.UnsealMessage(
				key, KeyUsage.InitiatorSeal, EType.Aes256CtsHmacSha1_96,
				seqNbr,
				WrapFlags.Sealed | WrapFlags.AcceptorSubkey,
				new MessageUnsealParams
				{
					bufs = new SecBufferList(
						new SecBuffer(header, MessageSecBufferOptions.None),
						new SecBuffer(message, MessageSecBufferOptions.Privacy),
						new SecBuffer(authHeader, MessageSecBufferOptions.None)
					),
					macBuffer = token
				});
		}

		[TestMethod]
		public void TestUnseal2()
		{
			byte[] header = new byte[]
			{
0x05, 0x00, 0x02, 0x03, 0x10, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x4c, 0x00, 0x02, 0x00, 0x00, 0x00,
0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			};
			byte[] message = new byte[] {
												0x87, 0x2a, 0xec, 0x02, 0x9a, 0x84, 0x3f, 0x54,
0x2b, 0x62, 0x34, 0x2c, 0x0e, 0x33, 0x1c, 0x24, 0x19, 0xe8, 0x0d, 0xeb, 0xae, 0x58, 0x69, 0x69,
0xa0, 0x96, 0x93, 0x9b, 0x66, 0x74, 0x94, 0x3d, 0x3d, 0x01, 0xac, 0x36, 0x38, 0xdd, 0x6a, 0x93,
0x63, 0x6a, 0x4a, 0x76, 0x6d, 0x68, 0x47, 0xb2, 0x33, 0x9f, 0xd2, 0x69, 0x8c, 0x89, 0x3f, 0x85,
0x16, 0xf0, 0x2f, 0xd7, 0x56, 0xf5, 0xe1, 0x6c, 0x59, 0x93, 0xf1, 0x7d, 0x59, 0x71, 0x66, 0xec,
0xa5, 0x49, 0xaa, 0x8d, 0x5f, 0x72, 0x26, 0x69, 0xf0, 0xd6, 0xd3, 0x48, 0x6e, 0xdc, 0x71, 0xcf,
0x85, 0x8a, 0xcf, 0x8b, 0xe2, 0x49, 0xe0, 0x83
				};
			byte[] authHeader = new byte[] {
			0x09, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			};
			byte[] token = new byte[] {
0x05, 0x04, 0x07, 0xff, 0x00, 0x10, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xb1, 0x68, 0x6a,
0xcc, 0xfd, 0x20, 0x91, 0x5d, 0xc8, 0x20, 0xcc, 0x48, 0x24, 0x87, 0x07, 0xd3, 0x37, 0xa8, 0x1d,
0x73, 0x60, 0x5d, 0xd4, 0x02, 0x90, 0xe6, 0x6d, 0xd7, 0x50, 0xda, 0xb7, 0x69, 0x2d, 0x8d, 0xa6,
0x5b, 0xc7, 0xe9, 0x76, 0x39, 0x92, 0x11, 0xbd, 0xca, 0xf6, 0x6b, 0x0c, 0x9b, 0x31, 0x1e, 0xb3,
0xa4, 0x99, 0x77, 0x1e, 0x01, 0x3a, 0xc2, 0x5e, 0xa5, 0xdb, 0x4b, 0x59,
			};

			byte[] key = new byte[] {
				0x7e, 0x8e, 0x1d, 0xcd, 0x92, 0xa2, 0xca, 0x30, 0x97, 0xdc, 0xc1, 0xdc, 0xb9, 0x59, 0x4c, 0xb9,
				0xcf, 0x92, 0x20, 0x57, 0x48, 0xc4, 0x2b, 0xca, 0xe1, 0xf0, 0xa3, 0x37, 0xfd, 0x02, 0x96, 0xee,
			};

			SimpleKdcLocator locator = new SimpleKdcLocator(new IPEndPoint(IPAddress.Any, 88));
			KerberosClient client = new KerberosClient(locator);

			uint seqNbr = 0x0eb16869 + 1;
			client.UnsealMessage(
				key, KeyUsage.AcceptorSeal, EType.Aes256CtsHmacSha1_96,
				seqNbr,
				WrapFlags.Sealed | WrapFlags.AcceptorSubkey | WrapFlags.SentByAcceptor,
				new MessageUnsealParams
				{
					bufs = new SecBufferList(
						new SecBuffer(header, MessageSecBufferOptions.None),
						new SecBuffer(message, MessageSecBufferOptions.Privacy),
						new SecBuffer(authHeader, MessageSecBufferOptions.None)
					),
					macBuffer = token
				});
		}

		[TestMethod]
		public void Test_APReq_Exchange()
		{
			KerberosClient client = new KerberosClient(TestData_.locator);



			//for (int i = 0; i < 20; i++)
			//{
			//	try
			//	{
			//		var apreq_ticket_bytes = apreq_ticket_encProfile.Decrypt(apreq_ticket_key.Span, (KeyUsage)i, apreq.ticket.enc_part.cipher);
			//		break;
			//	}
			//	catch { }
			//}



			//var apreq_ticket_encPart = Asn1DerDecoder.Decode<Ticket_EncPart>(apreq_auth_bytes);


			//var apreq_auth_encProfile = client.TryGetEncProfile((EType)apreq.authenticator.etype);
			//var apreq_auth_key = apreq.ticket; 
			//for (int i = 0; i < 20; i++)
			//{
			//	try
			//	{
			//		var apreq_auth_bytes = apreq_auth_encProfile.Decrypt(apreq_auth_key.Span, (KeyUsage)i, apreq.authenticator.cipher);
			//		var apreq_auth_encPart = Asn1DerDecoder.Decode<Ticket_EncPart>(apreq_auth_bytes);
			//		break;
			//	}
			//	catch { }
			//}



		}
	}
}
