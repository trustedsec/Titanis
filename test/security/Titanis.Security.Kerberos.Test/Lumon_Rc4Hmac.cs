using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Titanis.Security.Kerberos.Test;

[TestClass]
public class Lumon_Rc4Hmac
{
	private static readonly byte[] Asreq_padata=new byte[] { 0x29, 0xd8, 0xa7, 0xe0, 0x8b, 0x8b, 0x79, 0xe2, 0x92, 0x46, 0x98, 0x7f, 0x49, 0x9b, 0x89, 0x68, 0x59, 0x1a, 0x5d, 0x49, 0x7a, 0x4c, 0x68, 0xd8, 0xf3, 0xf7, 0x56, 0x64, 0x3f, 0xea, 0xea, 0xd1, 0xcd, 0x6c, 0xa0, 0xbd, 0x79, 0x80, 0x85, 0x4c, 0x2c, 0x64, 0x3a, 0x76, 0x7e, 0xcf, 0x3d, 0xb4, 0xfb, 0xaa, 0xbe, 0x2b };
	private static readonly byte[] Rc4Hmac_Asrep = new byte[] { 0xae, 0xb3, 0x20, 0xd9, 0xfa, 0x63, 0x57, 0xc6, 0xe2, 0xc2, 0xdf, 0xf2, 0x7b, 0x33, 0x7a, 0x1d, 0xcd, 0x73, 0x45, 0x60, 0x8c, 0x88, 0xf, 0x93, 0x9f, 0x59, 0xc5, 0x68, 0xcb, 0x66, 0x18, 0x1, 0xe3, 0xb2, 0x1d, 0x2d, 0xc, 0x23, 0x97, 0x75, 0x20, 0x49, 0x3c, 0xfa, 0x88, 0x33, 0x6e, 0x2c, 0x4f, 0x58, 0xb1, 0x20, 0x78, 0x65, 0x55, 0x8, 0x12, 0x83, 0x32, 0x32, 0xae, 0xd8, 0xc2, 0xb4, 0xcd, 0xee, 0xb5, 0x50, 0xb8, 0xe4, 0x1, 0x3e, 0x95, 0xa7, 0x8a, 0xb9, 0x26, 0x2f, 0x97, 0x10, 0xe4, 0x90, 0xce, 0x19, 0xe3, 0x1d, 0xc, 0x82, 0x77, 0xcf, 0x17, 0x17, 0x88, 0xc, 0xaa, 0xc, 0x78, 0x30, 0x99, 0x6e, 0x65, 0x53, 0x81, 0xba, 0xa6, 0x4a, 0x36, 0x9d, 0x4e, 0x44, 0x80, 0x3b, 0xc1, 0x1c, 0x2d, 0x8e, 0x2b, 0xbd, 0xeb, 0x7e, 0x7a, 0x8d, 0xca, 0xf4, 0x1a, 0xf9, 0x50, 0xf6, 0x6e, 0x3d, 0x19, 0xa2, 0xa, 0xce, 0xc1, 0x5d, 0xc8, 0xa4, 0x24, 0x73, 0xff, 0x10, 0xd4, 0xb7, 0xe1, 0xac, 0x9f, 0xb9, 0x58, 0x6a, 0xee, 0xd1, 0x79, 0x51, 0x68, 0x67, 0x34, 0x46, 0x17, 0xf8, 0xdb, 0xd0, 0x34, 0x62, 0x90, 0x1d, 0xf2, 0xd0, 0x41, 0xef, 0xdd, 0x63, 0x8b, 0x22, 0xf0, 0x97, 0x49, 0x82, 0xec, 0x47, 0x7b, 0x78, 0xbf, 0xe1, 0xbd, 0x8a, 0xd, 0x6a, 0x1e, 0x3b, 0xb6, 0x57, 0x51, 0x10, 0xd9, 0xf, 0x43, 0x2, 0x87, 0x6f, 0xa8, 0x4, 0x6c, 0x39, 0x54, 0x65, 0x33, 0x0, 0x86, 0x5c, 0xc4, 0xd2, 0xc5, 0xaf, 0xf3, 0xe4, 0xb, 0x89, 0xaa, 0x52, 0x78, 0xc6, 0x31, 0x70, 0x5c, 0x5, 0x58, 0xcb, 0x4d, 0xbf, 0x37, 0x7a, 0x13, 0xe8, 0x3a, 0x24, 0x4, 0x53, 0x4f, 0xd6, 0x21, 0x7e, 0x73, 0x7d, 0x45, 0xf5, 0xfe, 0x93, 0xb7, 0x61, 0x75, 0xc, 0x37, 0xcd, 0x3c, 0x51, 0x7a, 0x73, 0xf9, 0x2e, 0x41, 0x3f, 0x75, 0xe9, 0x37, 0xca, 0x0, 0x18, 0xa3, 0xb9, 0xb, 0x67, 0x57, 0xc5, 0x1a, 0x5c, 0xb7, 0xc7, 0xc3, 0x19, 0x8f, 0x3b, 0x90, 0xc5, 0x82, 0xc4, 0x0, 0xb3, 0x4c, 0x8b, 0xc7, 0x90, 0x37, 0x3e, 0xf5, 0xf7, 0x5, 0xc3, 0xa3 };

	private const string UserName = "milchick";
	private const string Password = "Br3@kr00m!";
	private const string SimpleDomainName = "LUMON";

	[TestMethod("Decrypt AS-REQ pa-data (RC4 HMAC)")]
	public void TestDecryptAsreqPadata()
	{
		KerberosCredential cred = new KerberosPasswordCredential(UserName, SimpleDomainName, Password);
		var encProfile = new Rc4Hmac();
		var key = cred.DeriveProtocolKeyFor(encProfile, Array.Empty<byte>());
		var decrypted = key.Decrypt(KeyUsage.AsreqPaEncTimestamp, Structs.EncryptedData(EType.Rc4Hmac, Asreq_padata));
	}

	[TestMethod("Decrypt AS-REP enc-part (RC4 HMAC)")]
	public void TestDecryptAsrep()
	{
		KerberosCredential cred = new KerberosPasswordCredential(UserName, SimpleDomainName, Password);
		var encProfile = new Rc4Hmac();
		var key = cred.DeriveProtocolKeyFor(encProfile, Array.Empty<byte>());
		var decrypted = key.Decrypt(KeyUsage.AsrepEncPart, Structs.EncryptedData(EType.Rc4Hmac, Rc4Hmac_Asrep));
	}
}
