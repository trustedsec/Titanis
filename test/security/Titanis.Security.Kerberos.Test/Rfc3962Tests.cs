using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Titanis.Security.Kerberos.Test;

[TestClass]
public class Rfc3962Tests
{
	private static readonly byte[] RfcTestKey = new byte[] {
			0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x20,
			0x74, 0x65, 0x72, 0x69, 0x79, 0x61, 0x6b, 0x69
		};

	internal static void TestAesCbcCts(byte[] input, byte[] expected, int BlockSize)
	{
		byte[] actual = (byte[])input.Clone();
		var confounder = actual.Slice(0, 16);
		var message = actual.Slice(16);

		AesCtsTest.TestEncrypt(RfcTestKey, confounder, message, BlockSize);
		CollectionAssert.AreEqual(expected, actual);


		AesCtsTest.TestDecrypt(RfcTestKey, confounder, message, BlockSize);
		CollectionAssert.AreEqual(input, actual);
	}


	[TestMethod("RFC 3962 AES CTS #1")]
	public void TestAesCts_1()
	{
		byte[] input = new byte[]
		{
			0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20,
			0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,

			0x20
		};
		byte[] expected = new byte[]
		{
			0xc6, 0x35, 0x35, 0x68, 0xf2, 0xbf, 0x8c, 0xb4,
			0xd8, 0xa5, 0x80, 0x36, 0x2d, 0xa7, 0xff, 0x7f,

			0x97
		};

		TestAesCbcCts(input, expected, 128);
	}

	[TestMethod("RFC 3962 AES CTS #2")]
	public void TestAesCts_2()
	{
		byte[] input = new byte[]
		{
			0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20,
			0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,

			0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
			0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20
		};
		byte[] expected = new byte[]
		{
			0xfc, 0x00, 0x78, 0x3e, 0x0e, 0xfd, 0xb2, 0xc1,
			0xd4, 0x45, 0xd4, 0xc8, 0xef, 0xf7, 0xed, 0x22,

			0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0,
			0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5
		};

		TestAesCbcCts(input, expected, 128);
	}

	[TestMethod("RFC 3962 AES CTS #3")]
	public void TestAesCts_3()
	{
		byte[] input = new byte[]
		{
			0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
			0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20, 0x43,
		};
		byte[] expected = new byte[]
		{
			0x39, 0x31, 0x25, 0x23, 0xa7, 0x86, 0x62, 0xd5, 0xbe, 0x7f, 0xcb, 0xcc, 0x98, 0xeb, 0xf5, 0xa8,
			0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0, 0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5, 0x84,
		};

		TestAesCbcCts(input, expected, 128);
	}

	[TestMethod("RFC 3962 AES CTS #4")]
	public void TestAesCts_4()
	{
		byte[] input = new byte[]
		{
			0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
			0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20, 0x43,
			0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2c,
		};
		byte[] expected = new byte[]
		{
			0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0, 0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5, 0x84,
			0xb3, 0xff, 0xfd, 0x94, 0x0c, 0x16, 0xa1, 0x8c, 0x1b, 0x55, 0x49, 0xd2, 0xf8, 0x38, 0x02, 0x9e,
			0x39, 0x31, 0x25, 0x23, 0xa7, 0x86, 0x62, 0xd5, 0xbe, 0x7f, 0xcb, 0xcc, 0x98, 0xeb, 0xf5,
		};

		TestAesCbcCts(input, expected, 128);
	}

	[TestMethod("RFC 3962 AES CTS #5")]
	public void TestAesCts_5()
	{
		byte[] input = new byte[]
		{
			0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
			0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20, 0x43,
			0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2c, 0x20,
		};
		byte[] expected = new byte[]
		{
			0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0, 0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5, 0x84,
			0x9d, 0xad, 0x8b, 0xbb, 0x96, 0xc4, 0xcd, 0xc0, 0x3b, 0xc1, 0x03, 0xe1, 0xa1, 0x94, 0xbb, 0xd8,
			0x39, 0x31, 0x25, 0x23, 0xa7, 0x86, 0x62, 0xd5, 0xbe, 0x7f, 0xcb, 0xcc, 0x98, 0xeb, 0xf5, 0xa8,
		};

		TestAesCbcCts(input, expected, 128);
	}

	[TestMethod("RFC 3962 AES CTS #6")]
	public void TestAesCts_6()
	{
		byte[] input = new byte[]
		{
			0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65,
			0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20, 0x43,
			0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2c, 0x20,
			0x61, 0x6e, 0x64, 0x20, 0x77, 0x6f, 0x6e, 0x74, 0x6f, 0x6e, 0x20, 0x73, 0x6f, 0x75, 0x70, 0x2e,
		};
		byte[] expected = new byte[]
		{
			0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0, 0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5, 0x84,
			0x39, 0x31, 0x25, 0x23, 0xa7, 0x86, 0x62, 0xd5, 0xbe, 0x7f, 0xcb, 0xcc, 0x98, 0xeb, 0xf5, 0xa8,
			0x48, 0x07, 0xef, 0xe8, 0x36, 0xee, 0x89, 0xa5, 0x26, 0x73, 0x0d, 0xbc, 0x2f, 0x7b, 0xc8, 0x40,
			0x9d, 0xad, 0x8b, 0xbb, 0x96, 0xc4, 0xcd, 0xc0, 0x3b, 0xc1, 0x03, 0xe1, 0xa1, 0x94, 0xbb, 0xd8,
		};

		TestAesCbcCts(input, expected, 128);
	}

}
