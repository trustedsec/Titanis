using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;

namespace Titanis.NFoldTest
{
	[TestClass]
	public class UnitTest1
	{
		private static readonly byte[] input = new byte[]
		{
			0x30, 0x31, 0x32, 0x33, 0x34, 0x35
		};

		[TestMethod]
		public void TestRounds()
		{
			byte[][] expectedRounds = new byte[][]
			{
				new byte[] { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35 },
				new byte[] { 0xa1, 0xa9, 0x81, 0x89, 0x91, 0x99 },
				new byte[] { 0x8c, 0xcd, 0x0d, 0x4c, 0x0c, 0x4c },
				new byte[] { 0x62, 0x64, 0x66, 0x68, 0x6a, 0x60 },
			};

			for (int i = 0; i < 4; i++)
			{
				for (int j = 0; j < input.Length; j++)
				{
					byte actual = (byte)NFold.GetInputWord(input, i * input.Length + j);
					Assert.AreEqual(expectedRounds[i][j], actual);
				}
			}
		}

		private static void TestNFold(
			string input,
			byte[] expected
			)
		{
			byte[] actual = new byte[expected.Length];
			NFold.DeriveKey(Encoding.UTF8.GetBytes(input), actual);
			CollectionAssert.AreEqual(expected, actual);
		}

		[TestMethod]
		public void TestNFold_1()
		{
			byte[] expected = new byte[]
			{
				0xbe, 0x07, 0x26, 0x31, 0x27, 0x6b, 0x19, 0x55, 
			};
			TestNFold("012345", expected);
		}

		[TestMethod]
		public void TestNFold_2()
		{
			byte[] expected = new byte[]
			{
				0x78, 0xa0, 0x7b, 0x6c, 0xaf, 0x85, 0xfa, 
			};
			TestNFold("password", expected);
		}

		[TestMethod]
		public void TestNFold_3()
		{
			byte[] expected = new byte[]
			{
				0xbb, 0x6e, 0xd3, 0x08, 0x70, 0xb7, 0xf0, 0xe0, 
			};
			TestNFold("Rough Consensus, and Running Code", expected);
		}

		[TestMethod]
		public void TestNFold_4()
		{
			byte[] expected = new byte[]
			{
				0x59, 0xe4, 0xa8, 0xca, 0x7c, 0x03, 0x85, 0xc3, 0xc3, 0x7b, 0x3f, 0x6d, 0x20, 0x00, 0x24, 0x7c, 0xb6, 0xe6, 0xbd, 0x5b, 0x3e, 
			};
			TestNFold("password", expected);
		}

		[TestMethod]
		public void TestNFold_5()
		{
			byte[] expected = new byte[]
			{
				0xdb, 0x3b, 0x0d, 0x8f, 0x0b, 0x06, 0x1e, 0x60, 0x32, 0x82, 0xb3, 0x08, 0xa5, 0x08, 0x41, 0x22, 0x9a, 0xd7, 0x98, 0xfa, 0xb9, 0x54, 0x0c, 0x1b, 
			};
			TestNFold("MASSACHVSETTS INSTITVTE OF TECHNOLOGY", expected);
		}

		[TestMethod]
		public void TestNFold_6()
		{
			byte[] expected = new byte[]
			{
				0x51, 0x8a, 0x54, 0xa2,  0x15, 0xa8, 0x45, 0x2a,  0x51, 0x8a, 0x54, 0xa2,  0x15, 0xa8, 0x45, 0x2a, 
				0x51, 0x8a, 0x54, 0xa2,  0x15, 
			};
			TestNFold("Q", expected);
		}

		[TestMethod]
		public void TestNFold_7()
		{
			byte[] expected = new byte[]
			{
				0xfb, 0x25, 0xd5, 0x31,  0xae, 0x89, 0x74, 0x49,  0x9f, 0x52, 0xfd, 0x92,  0xea, 0x98, 0x57, 0xc4, 
				0xba, 0x24, 0xcf, 0x29,  0x7e, 
			};
			TestNFold("ba", expected);
		}

		[TestMethod]
		public void TestNFold_8()
		{
			byte[] expected = new byte[]
			{
				0x6b, 0x65, 0x72, 0x62,  0x65, 0x72, 0x6f, 0x73, 
			};
			TestNFold("kerberos", expected);
		}

		[TestMethod]
		public void TestNFold_9()
		{
			byte[] expected = new byte[]
			{
				0x6b, 0x65, 0x72, 0x62,  0x65, 0x72, 0x6f, 0x73,  0x7b, 0x9b, 0x5b, 0x2b,  0x93, 0x13, 0x2b, 0x93, 
			};
			TestNFold("kerberos", expected);
		}

		[TestMethod]
		public void TestNFold_10()
		{
			byte[] expected = new byte[]
			{
				0x83, 0x72, 0xc2, 0x36,  0x34, 0x4e, 0x5f, 0x15,  0x50, 0xcd, 0x07, 0x47,  0xe1, 0x5d, 0x62, 0xca, 
				0x7a, 0x5a, 0x3b, 0xce,  0xa4, 
			};
			TestNFold("kerberos", expected);
		}

		[TestMethod]
		public void TestNFold_11()
		{
			byte[] expected = new byte[]
			{
				0x6b, 0x65, 0x72, 0x62,  0x65, 0x72, 0x6f, 0x73,  0x7b, 0x9b, 0x5b, 0x2b,  0x93, 0x13, 0x2b, 0x93, 
				0x5c, 0x9b, 0xdc, 0xda,  0xd9, 0x5c, 0x98, 0x99,  0xc4, 0xca, 0xe4, 0xde,  0xe6, 0xd6, 0xca, 0xe4, 
			};
			TestNFold("kerberos", expected);
		}


	}
}
